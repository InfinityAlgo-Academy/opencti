import React, { FunctionComponent } from 'react';
import ListLines from '../../../components/list_lines/ListLines';
import { usePaginationLocalStorage } from '../../../utils/hooks/useLocalStorage';
import Security from '../../../utils/Security';
import { KNOWLEDGE_KNUPDATE } from '../../../utils/hooks/useGranted';
import MalwareAnalysisCreation from './malware_analyses/MalwareAnalysisCreation';
import useQueryLoading from '../../../utils/hooks/useQueryLoading';
import MalwareAnalysesLines, { malwareAnalysesLinesQuery } from './malware_analyses/MalwareAnalysesLines';
import {
  MalwareAnalysesLinesPaginationQuery as MalwareAnalysisQuery,
  MalwareAnalysesLinesPaginationQuery$variables as MalwareAnalysisQueryVariables,
} from './malware_analyses/__generated__/MalwareAnalysesLinesPaginationQuery.graphql';
import { MalwareAnalysisLineDummy } from './malware_analyses/MalwareAnalysisLine';
import useEntityToggle from '../../../utils/hooks/useEntityToggle';
import { MalwareAnalysisLine_node$data } from './malware_analyses/__generated__/MalwareAnalysisLine_node.graphql';
import ToolBar from '../data/ToolBar';
import { useBuildEntityTypeBasedFilterContext, emptyFilterGroup } from '../../../utils/filters/filtersUtils';
import { useFormatter } from '../../../components/i18n';
import ExportContextProvider from '../../../utils/ExportContextProvider';
import Breadcrumbs from '../../../components/Breadcrumbs';

const LOCAL_STORAGE_KEY = 'malwareAnalyses';

const MalwareAnalyses: FunctionComponent = () => {
  const { t_i18n } = useFormatter();
  const { viewStorage, helpers, paginationOptions } = usePaginationLocalStorage<MalwareAnalysisQueryVariables>(
    LOCAL_STORAGE_KEY,
    {
      searchTerm: '',
      sortBy: 'submitted',
      orderAsc: false,
      openExports: false,
      filters: emptyFilterGroup,
      numberOfElements: {
        number: 0,
        symbol: '',
      },
    },
  );
  const {
    sortBy,
    orderAsc,
    searchTerm,
    filters,
    openExports,
    numberOfElements,
  } = viewStorage;
  const {
    onToggleEntity,
    numberOfSelectedElements,
    handleClearSelectedElements,
    selectedElements,
    deSelectedElements,
    selectAll,
    handleToggleSelectAll,
  } = useEntityToggle<MalwareAnalysisLine_node$data>(LOCAL_STORAGE_KEY);
  const contextFilters = useBuildEntityTypeBasedFilterContext('Malware-Analysis', filters);
  const queryPaginationOptions = {
    ...paginationOptions,
    filters: contextFilters,
  } as unknown as MalwareAnalysisQueryVariables;
  const queryRef = useQueryLoading<MalwareAnalysisQuery>(
    malwareAnalysesLinesQuery,
    queryPaginationOptions,
  );
  const renderLines = () => {
    const dataColumns = {
      result_name: {
        label: 'Result name',
        width: '15%',
        isSortable: true,
      },
      product: {
        label: 'Product',
        width: '15%',
        isSortable: true,
      },
      operatingSystem: {
        label: 'Operating System',
        width: '15%',
        isSortable: false,
      },
      createdBy: {
        label: 'Author',
        width: '10%',
        isSortable: true,
      },
      creator: {
        label: 'Creator',
        width: '10%',
        isSortable: true,
      },
      objectLabel: {
        label: 'Labels',
        width: '15%',
        isSortable: false,
      },
      submitted: {
        label: 'Submission date',
        width: '7%',
        isSortable: true,
      },
      objectMarking: {
        label: 'Marking',
        width: '8%',
        isSortable: true,
      },
    };
    return (
      <>
        <ListLines
          helpers={helpers}
          sortBy={sortBy}
          orderAsc={orderAsc}
          dataColumns={dataColumns}
          handleSort={helpers.handleSort}
          handleSearch={helpers.handleSearch}
          handleAddFilter={helpers.handleAddFilter}
          handleRemoveFilter={helpers.handleRemoveFilter}
          handleSwitchLocalMode={helpers.handleSwitchLocalMode}
          handleSwitchGlobalMode={helpers.handleSwitchGlobalMode}
          handleToggleExports={helpers.handleToggleExports}
          handleToggleSelectAll={handleToggleSelectAll}
          selectAll={selectAll}
          openExports={openExports}
          exportContext={{ entity_type: 'Malware-Analysis' }}
          keyword={searchTerm}
          iconExtension={true}
          filters={filters}
          paginationOptions={queryPaginationOptions}
          numberOfElements={numberOfElements}
        >
          {queryRef && (
          <React.Suspense
            fallback={
              <>
                {Array(20)
                  .fill(0)
                  .map((_, idx) => (
                    <MalwareAnalysisLineDummy
                      key={idx}
                      dataColumns={dataColumns}
                    />
                  ))}
              </>
                            }
          >
            <MalwareAnalysesLines
              selectedElements={selectedElements}
              deSelectedElements={deSelectedElements}
              selectAll={selectAll}
              queryRef={queryRef}
              paginationOptions={queryPaginationOptions}
              dataColumns={dataColumns}
              setNumberOfElements={helpers.handleSetNumberOfElements}
              onToggleEntity={onToggleEntity}
            />
          </React.Suspense>
          )}
        </ListLines>
        <ToolBar
          selectedElements={selectedElements}
          deSelectedElements={deSelectedElements}
          numberOfSelectedElements={numberOfSelectedElements}
          handleClearSelectedElements={handleClearSelectedElements}
          selectAll={selectAll}
          search={searchTerm}
          filters={contextFilters}
          type="Malware-Analysis"
        />
      </>
    );
  };
  return (
    <ExportContextProvider>
      <Breadcrumbs variant="list" elements={[{ label: t_i18n('Analyses') }, { label: t_i18n('Malware analyses'), current: true }]} />
      {renderLines()}
      <Security needs={[KNOWLEDGE_KNUPDATE]}>
        <MalwareAnalysisCreation paginationOptions={queryPaginationOptions}/>
      </Security>
    </ExportContextProvider>
  );
};

export default MalwareAnalyses;
