import React, { FunctionComponent } from 'react';
import { graphql, PreloadedQuery } from 'react-relay';
import ListLinesContent from '../../../../components/list_lines/ListLinesContent';
import { DataColumns } from '../../../../components/list_lines';
import usePreloadedPaginationFragment from '../../../../utils/hooks/usePreloadedPaginationFragment';
import { UseLocalStorageHelpers } from '../../../../utils/hooks/useLocalStorage';
import { MalwareAnalysisLine, MalwareAnalysisLineDummy } from './MalwareAnalysisLine';
import { MalwareAnalysesLinesPaginationQuery, MalwareAnalysesLinesPaginationQuery$variables } from './__generated__/MalwareAnalysesLinesPaginationQuery.graphql';
import { MalwareAnalysesLines_data$key } from './__generated__/MalwareAnalysesLines_data.graphql';
import { MalwareAnalysisLine_node$data } from './__generated__/MalwareAnalysisLine_node.graphql';

const nbOfRowsToLoad = 50;

interface MalwareAnalysesLinesProps {
  paginationOptions?: MalwareAnalysesLinesPaginationQuery$variables,
  dataColumns: DataColumns,
  queryRef: PreloadedQuery<MalwareAnalysesLinesPaginationQuery>,
  setNumberOfElements: UseLocalStorageHelpers['handleSetNumberOfElements'],
  selectAll: boolean;
  selectedElements: Record<string, MalwareAnalysisLine_node$data>;
  deSelectedElements: Record<string, MalwareAnalysisLine_node$data>;
  onToggleEntity: (
    entity: MalwareAnalysisLine_node$data,
    event: React.SyntheticEvent
  ) => void;
}

export const malwareAnalysesLinesQuery = graphql`
    query MalwareAnalysesLinesPaginationQuery(
        $search: String
        $count: Int
        $cursor: ID
        $orderBy: MalwareAnalysesOrdering
        $orderMode: OrderingMode
        $filters: FilterGroup
    ) {
        ...MalwareAnalysesLines_data
        @arguments(
            search: $search
            count: $count
            cursor: $cursor
            orderBy: $orderBy
            orderMode: $orderMode
            filters: $filters
        )
    }
`;

const malwareAnalysesLinesFragment = graphql`
    fragment MalwareAnalysesLines_data on Query
    @argumentDefinitions(
        search: { type: "String" }
        count: { type: "Int" }
        cursor: { type: "ID" }
        orderBy: { type: "MalwareAnalysesOrdering" }
        orderMode: { type: "OrderingMode" }
        filters: { type: "FilterGroup" }
    ) @refetchable(queryName: "MalwareAnalysesLinesRefetchQuery") {
        malwareAnalyses(
            search: $search
            first: $count
            after: $cursor
            orderBy: $orderBy
            orderMode: $orderMode
            filters: $filters
        ) @connection(key: "Pagination_malwareAnalyses") {
            edges {
                node {
                    id
                    product
                    submitted
                    ...MalwareAnalysisLine_node
                }
            }
            pageInfo {
                endCursor
                hasNextPage
                globalCount
            }
        }
    }
`;

const MalwareAnalysesLines: FunctionComponent<MalwareAnalysesLinesProps> = (
  {
    setNumberOfElements,
    dataColumns,
    queryRef,
    paginationOptions,
    selectedElements,
    selectAll,
    deSelectedElements,
    onToggleEntity,
  },
) => {
  const {
    data,
    hasMore,
    loadMore,
    isLoadingMore,
  } = usePreloadedPaginationFragment<MalwareAnalysesLinesPaginationQuery, MalwareAnalysesLines_data$key>({
    linesQuery: malwareAnalysesLinesQuery,
    linesFragment: malwareAnalysesLinesFragment,
    queryRef,
    nodePath: ['malwareAnalyses', 'pageInfo', 'globalCount'],
    setNumberOfElements,
  });
  return (
    <ListLinesContent
      initialLoading={!data}
      hasMore={hasMore}
      loadMore={loadMore}
      isLoading={isLoadingMore}
      dataList={data?.malwareAnalyses?.edges ?? []}
      globalCount={data?.malwareAnalyses?.pageInfo?.globalCount}
      LineComponent={MalwareAnalysisLine}
      DummyLineComponent={MalwareAnalysisLineDummy}
      dataColumns={dataColumns}
      nbOfRowsToLoad={nbOfRowsToLoad}
      paginationOptions={paginationOptions}
      selectedElements={selectedElements}
      deSelectedElements={deSelectedElements}
      onToggleEntity={onToggleEntity}
      selectAll={selectAll}
    />
  );
};

export default MalwareAnalysesLines;
