/* eslint-disable @typescript-eslint/no-explicit-any */
// TODO Remove this when V6
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck
import { graphql, useSubscription } from 'react-relay';
import { Route, Switch, useParams } from 'react-router-dom';
import React, { useMemo } from 'react';
import { GraphQLSubscriptionConfig } from 'relay-runtime';
import { QueryRenderer } from '../../../../relay/environment';
import ErrorNotFound from '../../../../components/ErrorNotFound';
import Loader from '../../../../components/Loader';
import MalwareAnalysis from './MalwareAnalysis';
import { RootMalwareAnalysisSubscription } from './__generated__/RootMalwareAnalysisSubscription.graphql';
import { RootMalwareAnalysisQuery$data } from './__generated__/RootMalwareAnalysisQuery.graphql';
import StixDomainObjectHeader from '../../common/stix_domain_objects/StixDomainObjectHeader';
import MalwareAnalysisPopover from './MalwareAnalysisPopover';
import EntityStixCoreRelationships from '../../common/stix_core_relationships/EntityStixCoreRelationships';
import FileManager from '../../common/files/FileManager';
import StixCoreObjectHistory from '../../common/stix_core_objects/StixCoreObjectHistory';
import StixCoreRelationship from '../../common/stix_core_relationships/StixCoreRelationship';

const subscription = graphql`
  subscription RootMalwareAnalysisSubscription($id: ID!) {
    stixDomainObject(id: $id) {
      ... on MalwareAnalysis {
        ...MalwareAnalysis_malwareAnalysis
      }
      ...FileImportViewer_entity
      ...FileExportViewer_entity
      ...FileExternalReferencesViewer_entity
      ...WorkbenchFileViewer_entity
    }
  }
`;

const malwareAnalysisQuery = graphql`
  query RootMalwareAnalysisQuery($id: String!) {
    malwareAnalysis(id: $id) {
      id
      product
      result_name
      x_opencti_graph_data
      ...MalwareAnalysis_malwareAnalysis
      ...FileImportViewer_entity
      ...FileExportViewer_entity
      ...FileExternalReferencesViewer_entity
      ...WorkbenchFileViewer_entity
    }
    connectorsForImport {
      ...FileManager_connectorsImport
    }
    connectorsForExport {
      ...FileManager_connectorsExport
    }
  }
`;

const RootMalwareAnalysis = () => {
  const { malwareAnalysisId } = useParams() as { malwareAnalysisId: string };
  const subConfig = useMemo<
  GraphQLSubscriptionConfig<RootMalwareAnalysisSubscription>
  >(
    () => ({
      subscription,
      variables: { id: malwareAnalysisId },
    }),
    [malwareAnalysisId],
  );
  useSubscription(subConfig);
  const link = `/dashboard/analyses/malware_analyses/${malwareAnalysisId}/knowledge`;
  return (
    <div>
            <QueryRenderer
        query={malwareAnalysisQuery}
        variables={{ id: malwareAnalysisId }}
        render={({ props }: { props: RootMalwareAnalysisQuery$data }) => {
          if (props) {
            if (props.malwareAnalysis) {
              return (
                <Switch>
                  <Route
                    exact
                    path="/dashboard/analyses/malware_analyses/:malwareAnalysisId"
                    render={(routeProps: any) => (
                      <MalwareAnalysis
                        {...routeProps}
                        data={props.malwareAnalysis}
                      />
                    )}
                  />
                  <Route
                    exact
                    path="/dashboard/analyses/malware_analyses/:malwareAnalysisId/knowledge"
                    render={(routeProps) => (
                      <React.Fragment>
                        <StixDomainObjectHeader
                          stixDomainObject={props.malwareAnalysis}
                          PopoverComponent={
                            <MalwareAnalysisPopover id={malwareAnalysisId} />
                          }
                          noAliases={true}
                        />
                        <EntityStixCoreRelationships
                          entityId={malwareAnalysisId}
                          relationshipTypes={[
                            'related-to',
                            'duplicate-of',
                            'derived-from',
                            'characterizes',
                            'analysis-of',
                            'static-analysis-of',
                            'dynamic-analysis-of',
                          ]}
                          entityLink={link}
                          defaultStartTime={props.malwareAnalysis.first_seen}
                          defaultStopTime={props.malwareAnalysis.last_seen}
                          allDirections={true}
                          paddingRightButtonAdd={0}
                          {...routeProps}
                        />
                      </React.Fragment>
                    )}
                  />
                  <Route
                    path="/dashboard/analyses/malware_analyses/:malwareAnalysisId/knowledge/relations/:relationId"
                    render={(routeProps) => (
                      <StixCoreRelationship
                        entityId={malwareAnalysisId}
                        {...routeProps}
                      />
                    )}
                  />
                  <Route
                    exact
                    path="/dashboard/analyses/malware_analyses/:malwareAnalysisId/files"
                    render={(routeProps) => (
                      <React.Fragment>
                        <StixDomainObjectHeader
                          entityType={'Malware-Analysis'}
                          stixDomainObject={props.malwareAnalysis}
                          PopoverComponent={MalwareAnalysisPopover}
                        />
                        <FileManager
                          {...routeProps}
                          id={malwareAnalysisId}
                          connectorsImport={props.connectorsForImport}
                          connectorsExport={props.connectorsForExport}
                          entity={props.malwareAnalysis}
                        />
                      </React.Fragment>
                    )}
                  />
                  <Route
                    exact
                    path="/dashboard/analyses/malware_analyses/:malwareAnalysisId/history"
                    render={(routeProps) => (
                      <React.Fragment>
                        <StixDomainObjectHeader
                          entityType='Malware-Analysis'
                          stixDomainObject={props.malwareAnalysis}
                          PopoverComponent={MalwareAnalysisPopover}
                        />
                        <StixCoreObjectHistory
                          {...routeProps}
                          stixCoreObjectId={malwareAnalysisId}
                        />
                      </React.Fragment>
                    )}
                  />
                </Switch>
              );
            }
            return <ErrorNotFound />;
          }
          return <Loader />;
        }}
      />
    </div>
  );
};
export default RootMalwareAnalysis;
