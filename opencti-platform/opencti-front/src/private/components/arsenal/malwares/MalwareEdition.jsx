import React, { Component } from 'react';
import * as PropTypes from 'prop-types';
import { graphql } from 'react-relay';
import { compose } from 'ramda';
import Drawer, { DrawerVariant } from '../../common/drawer/Drawer';
import { commitMutation, QueryRenderer } from '../../../../relay/environment';
import MalwareEditionContainer from './MalwareEditionContainer';
import { malwareEditionOverviewFocus } from './MalwareEditionOverview';
import Loader from '../../../../components/Loader';
import inject18n from '../../../../components/i18n';

export const malwareEditionQuery = graphql`
  query MalwareEditionContainerQuery($id: String!) {
    malware(id: $id) {
      ...MalwareEditionContainer_malware
    }
  }
`;

class MalwareEdition extends Component {
  constructor(props) {
    super(props);
    this.state = { open: false };
  }

  handleOpen() {
    this.setState({ open: true });
  }

  handleClose() {
    commitMutation({
      mutation: malwareEditionOverviewFocus,
      variables: {
        id: this.props.malwareId,
        input: { focusOn: '' },
      },
    });
    this.setState({ open: false });
  }

  render() {
    const { t, malwareId } = this.props;
    return (
      <QueryRenderer
        query={malwareEditionQuery}
        variables={{ id: malwareId }}
        render={({ props }) => {
          if (props) {
            return (
              <Drawer
                title={t('Update a malware')}
                open={this.state.open}
                onClose={this.handleClose.bind(this)}
                variant={DrawerVariant.update}
                context={props.malware.context}
              >
                <MalwareEditionContainer malware={props.malware} handleClose={this.handleClose.bind(this)} />
              </Drawer>
            );
          }
          return (
            <Drawer
              title={t('Update a malware')}
              open={this.state.open}
            >
              <Loader variant="inElement" />
            </Drawer>
          );
        }}
      />
    );
  }
}

MalwareEdition.propTypes = {
  malwareId: PropTypes.string,
};

export default compose(inject18n)(MalwareEdition);
