import React, { FunctionComponent, useState } from 'react';
import { graphql, PreloadedQuery } from 'react-relay';
import ListCardsContent from '../../../../components/list_cards/ListCardsContent';
import MalwareCard from './MalwareCard';
import { GenericAttackCardDummy } from '../../common/cards/GenericAttackCard';
import { QueryRenderer } from '../../../../relay/environment';
import StixDomainObjectBookmarks, {
  stixDomainObjectBookmarksQuery,
} from '../../common/stix_domain_objects/StixDomainObjectBookmarks';
import { HandleAddFilter, UseLocalStorageHelpers } from '../../../../utils/hooks/useLocalStorage';
import usePreloadedPaginationFragment from '../../../../utils/hooks/usePreloadedPaginationFragment';
import {
  StixDomainObjectBookmarksQuery$data,
} from '../../common/stix_domain_objects/__generated__/StixDomainObjectBookmarksQuery.graphql';
import { MalwaresCardsPaginationQuery } from './__generated__/MalwaresCardsPaginationQuery.graphql';
import { MalwaresCards_data$key } from './__generated__/MalwaresCards_data.graphql';

const nbOfCardsToLoad = 20;

export const malwaresCardsQuery = graphql`
    query MalwaresCardsPaginationQuery(
        $search: String
        $count: Int!
        $cursor: ID
        $orderBy: MalwaresOrdering
        $orderMode: OrderingMode
        $filters: FilterGroup
    ) {
        ...MalwaresCards_data
        @arguments(
            search: $search
            count: $count
            cursor: $cursor
            orderBy: $orderBy
            orderMode: $orderMode
            filters: $filters
        )
    }
`;

export const malwaresCardsFragment = graphql`
    fragment MalwaresCards_data on Query
    @argumentDefinitions(
        search: { type: "String" }
        count: { type: "Int", defaultValue: 25 }
        cursor: { type: "ID" }
        orderBy: { type: "MalwaresOrdering", defaultValue: name }
        orderMode: { type: "OrderingMode", defaultValue: asc }
        filters: { type: "FilterGroup" }
    )
    @refetchable(queryName: "MalwaresRefetchQuery") {
        malwares(
            search: $search
            first: $count
            after: $cursor
            orderBy: $orderBy
            orderMode: $orderMode
            filters: $filters
        ) @connection(key: "Pagination_malwares") {
            edges {
                node {
                    id
                    name
                    description
                    ...MalwareCard_node
                }
            }
            pageInfo {
                endCursor
                hasNextPage
                globalCount
            }
        }
    }
`;

interface MalwaresCardsProps {
  queryRef: PreloadedQuery<MalwaresCardsPaginationQuery>;
  setNumberOfElements: UseLocalStorageHelpers['handleSetNumberOfElements'];
  onLabelClick: HandleAddFilter;
}

const MalwaresCards: FunctionComponent<
MalwaresCardsProps
> = ({ setNumberOfElements, queryRef, onLabelClick }) => {
  const [bookmarks, setBookmarks] = useState([]);
  const { data, hasMore, loadMore, isLoadingMore } = usePreloadedPaginationFragment<
  MalwaresCardsPaginationQuery,
  MalwaresCards_data$key
  >({
    linesQuery: malwaresCardsQuery,
    linesFragment: malwaresCardsFragment,
    queryRef,
    nodePath: ['malwares', 'pageInfo', 'globalCount'],
    setNumberOfElements,
  });

  const handleSetBookmarkList = (newBookmarks: []) => {
    setBookmarks(newBookmarks);
  };

  return (
      <QueryRenderer
        query={stixDomainObjectBookmarksQuery}
        variables={{ types: ['Malware'] }}
        render={({ props }: { props: StixDomainObjectBookmarksQuery$data }) => (
          <>
            <StixDomainObjectBookmarks
              data={props}
              onLabelClick={onLabelClick}
              setBookmarkList={handleSetBookmarkList}
            />
            <ListCardsContent
              initialLoading={!data}
              loadMore={loadMore}
              hasMore={hasMore}
              isLoading={isLoadingMore}
              DummyCardComponent={GenericAttackCardDummy}
              dataList={data?.malwares?.edges ?? []}
              globalCount={
                data?.malwares?.pageInfo?.globalCount
                ?? nbOfCardsToLoad
              }
              CardComponent={MalwareCard}
              nbOfCardsToLoad={nbOfCardsToLoad}
              onLabelClick={onLabelClick}
              bookmarkList={bookmarks}
              rowHeight={350}
            />
          </>
        )}
      />
  );
};

export default MalwaresCards;
