import React, { Component } from 'react';
import * as PropTypes from 'prop-types';
import { graphql, createFragmentContainer } from 'react-relay';
import { Form, Formik, Field } from 'formik';
import * as Yup from 'yup';
import * as R from 'ramda';
import inject18n from '../../../../components/i18n';
import { SubscriptionFocus } from '../../../../components/Subscription';
import { commitMutation } from '../../../../relay/environment';
import { buildDate, parse } from '../../../../utils/Time';
import OpenVocabField from '../../common/form/OpenVocabField';
import SwitchField from '../../../../components/SwitchField';
import { adaptFieldValue } from '../../../../utils/String';
import CommitMessage from '../../common/form/CommitMessage';
import DateTimePickerField from '../../../../components/DateTimePickerField';
import { fieldSpacingContainerStyle } from '../../../../utils/field';

const malwareMutationFieldPatch = graphql`
  mutation MalwareEditionDetailsFieldPatchMutation(
    $id: ID!
    $input: [EditInput]!
  ) {
    malwareEdit(id: $id) {
      fieldPatch(input: $input) {
        ...MalwareEditionDetails_malware
        ...Malware_malware
      }
    }
  }
`;

const malwareEditionDetailsFocus = graphql`
  mutation MalwareEditionDetailsFocusMutation($id: ID!, $input: EditContext!) {
    malwareEdit(id: $id) {
      contextPatch(input: $input) {
        id
      }
    }
  }
`;

const malwareValidation = (t) => Yup.object().shape({
  is_family: Yup.boolean().nullable(),
  first_seen: Yup.date()
    .nullable()
    .typeError(t('The value must be a datetime (yyyy-MM-dd hh:mm (a|p)m)')),
  last_seen: Yup.date()
    .nullable()
    .typeError(t('The value must be a datetime (yyyy-MM-dd hh:mm (a|p)m)')),
  architecture_execution_envs: Yup.array().nullable(),
  implementation_languages: Yup.array().nullable(),
  capabilities: Yup.array().nullable(),
});

class MalwareEditionDetailsComponent extends Component {
  handleChangeFocus(name) {
    commitMutation({
      mutation: malwareEditionDetailsFocus,
      variables: {
        id: this.props.malware.id,
        input: {
          focusOn: name,
        },
      },
    });
  }

  onSubmit(values, { setSubmitting }) {
    const commitMessage = values.message;
    const inputValues = R.pipe(
      R.dissoc('message'),
      R.assoc(
        'first_seen',
        values.first_seen ? parse(values.first_seen).format() : null,
      ),
      R.assoc(
        'last_seen',
        values.last_seen ? parse(values.last_seen).format() : null,
      ),
      R.toPairs,
      R.map((n) => ({
        key: n[0],
        value: adaptFieldValue(n[1]),
      })),
    )(values);
    commitMutation({
      mutation: malwareMutationFieldPatch,
      variables: {
        id: this.props.malware.id,
        input: inputValues,
        commitMessage:
          commitMessage && commitMessage.length > 0 ? commitMessage : null,
      },
      onCompleted: () => {
        setSubmitting(false);
        this.props.handleClose();
      },
    });
  }

  handleSubmitField(name, value) {
    if (!this.props.enableReferences) {
      malwareValidation(this.props.t)
        .validateAt(name, { [name]: value })
        .then(() => {
          commitMutation({
            mutation: malwareMutationFieldPatch,
            variables: {
              id: this.props.malware.id,
              input: { key: name, value: value || '' },
            },
          });
        })
        .catch(() => false);
    }
  }

  render() {
    const { t, malware, context, enableReferences } = this.props;
    const initialValues = R.pipe(
      R.assoc('first_seen', buildDate(malware.first_seen)),
      R.assoc('last_seen', buildDate(malware.last_seen)),
      R.assoc(
        'architecture_execution_envs',
        malware.architecture_execution_envs
          ? malware.architecture_execution_envs
          : [],
      ),
      R.assoc(
        'implementation_languages',
        malware.implementation_languages ? malware.implementation_languages : [],
      ),
      R.assoc('capabilities', malware.capabilities ? malware.capabilities : []),
      R.pick([
        'first_seen',
        'last_seen',
        'architecture_execution_envs',
        'implementation_languages',
        'capabilities',
        'is_family',
      ]),
    )(malware);
    return (
      <Formik
        enableReinitialize={true}
        initialValues={initialValues}
        validationSchema={malwareValidation(t)}
        onSubmit={this.onSubmit.bind(this)}
      >
        {({
          submitForm,
          isSubmitting,
          validateForm,
          setFieldValue,
          values,
        }) => (
          <Form style={{ margin: '20px 0 20px 0' }}>
            <Field
              component={DateTimePickerField}
              name="first_seen"
              onFocus={this.handleChangeFocus.bind(this)}
              onSubmit={this.handleSubmitField.bind(this)}
              TextFieldProps={{
                label: t('First seen'),
                variant: 'standard',
                fullWidth: true,
                helperText: (
                  <SubscriptionFocus context={context} fieldName="first_seen" />
                ),
              }}
            />
            <Field
              component={DateTimePickerField}
              name="last_seen"
              onFocus={this.handleChangeFocus.bind(this)}
              onSubmit={this.handleSubmitField.bind(this)}
              TextFieldProps={{
                label: t('Last seen'),
                variant: 'standard',
                fullWidth: true,
                style: { marginTop: 20 },
                helperText: (
                  <SubscriptionFocus context={context} fieldName="last_seen" />
                ),
              }}
            />
            <OpenVocabField
              label={t('Architecture execution env.')}
              type="processor-architecture-ov"
              name="architecture_execution_envs"
              onFocus={this.handleChangeFocus.bind(this)}
              onChange={this.handleSubmitField.bind(this)}
              containerStyle={fieldSpacingContainerStyle}
              variant="edit"
              multiple={true}
              editContext={context}
            />
            <OpenVocabField
              label={t('Implementation languages')}
              type="implementation-language-ov"
              name="implementation_languages"
              onFocus={this.handleChangeFocus.bind(this)}
              onChange={this.handleSubmitField.bind(this)}
              containerStyle={fieldSpacingContainerStyle}
              variant="edit"
              multiple={true}
              editContext={context}
            />
            <OpenVocabField
              label={t('Capabilities')}
              type="malware-capabilities-ov"
              name="capabilities"
              onFocus={this.handleChangeFocus.bind(this)}
              onChange={this.handleSubmitField.bind(this)}
              containerStyle={fieldSpacingContainerStyle}
              variant="edit"
              multiple={true}
              editContext={context}
            />
            <Field
              component={SwitchField}
              type="checkbox"
              name="is_family"
              label={t('Is family?')}
              containerstyle={{ marginTop: 20 }}
              onChange={this.handleSubmitField.bind(this)}
              helperText={
                <SubscriptionFocus context={context} fieldName="is_family" />
              }
            />
            {enableReferences && (
              <CommitMessage
                submitForm={submitForm}
                disabled={isSubmitting}
                validateForm={validateForm}
                setFieldValue={setFieldValue}
                values={values}
              />
            )}
          </Form>
        )}
      </Formik>
    );
  }
}

MalwareEditionDetailsComponent.propTypes = {
  t: PropTypes.func,
  malware: PropTypes.object,
  context: PropTypes.array,
};

const MalwareEditionDetails = createFragmentContainer(
  MalwareEditionDetailsComponent,
  {
    malware: graphql`
      fragment MalwareEditionDetails_malware on Malware {
        id
        is_family
        first_seen
        last_seen
        architecture_execution_envs
        implementation_languages
        capabilities
      }
    `,
  },
);

export default R.compose(inject18n)(MalwareEditionDetails);
