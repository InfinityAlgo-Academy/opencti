import React from 'react';
import { createFragmentContainer, graphql } from 'react-relay';
import { Field, Form, Formik } from 'formik';
import * as R from 'ramda';
import { pick, pipe } from 'ramda';
import * as Yup from 'yup';
import MenuItem from '@mui/material/MenuItem';
import { useFormatter } from '../../../../components/i18n';
import TextField from '../../../../components/TextField';
import { SubscriptionFocus } from '../../../../components/Subscription';
import { commitMutation } from '../../../../relay/environment';
import SelectField from '../../../../components/SelectField';
import { adaptFieldValue } from '../../../../utils/String';
import CommitMessage from '../../common/form/CommitMessage';
import { fieldSpacingContainerStyle } from '../../../../utils/field';

const vulnerabilityMutationFieldPatch = graphql`
  mutation VulnerabilityEditionDetailsFieldPatchMutation(
    $id: ID!
    $input: [EditInput]!
    $commitMessage: String
    $references: [String]
  ) {
    vulnerabilityEdit(id: $id) {
      fieldPatch(
        input: $input
        commitMessage: $commitMessage
        references: $references
      ) {
        ...VulnerabilityEditionDetails_vulnerability
        ...Vulnerability_vulnerability
      }
    }
  }
`;

export const vulnerabilityEditionDetailsFocus = graphql`
  mutation VulnerabilityEditionDetailsFocusMutation(
    $id: ID!
    $input: EditContext!
  ) {
    vulnerabilityEdit(id: $id) {
      contextPatch(input: $input) {
        id
      }
    }
  }
`;

const vulnerabilityValidation = () => Yup.object().shape({
  x_opencti_base_score: Yup.number(),
  x_opencti_base_severity: Yup.string().nullable(),
  x_opencti_attack_vector: Yup.string().nullable(),
  x_opencti_integrity_impact: Yup.string().nullable(),
  x_opencti_availability_impact: Yup.string().nullable(),
  x_opencti_confidentiality_impact: Yup.string().nullable(),
});

const VulnerabilityEditionDetailsComponent = (props) => {
  const { vulnerability, enableReferences, context, handleClose } = props;
  const { t } = useFormatter();

  const handleChangeFocus = (name) => commitMutation({
    mutation: vulnerabilityEditionDetailsFocus,
    variables: {
      id: vulnerability.id,
      input: {
        focusOn: name,
      },
    },
  });

  const onSubmit = (values, { setSubmitting }) => {
    const commitMessage = values.message;
    const references = R.pluck('value', values.references || []);
    const inputValues = R.pipe(
      R.dissoc('message'),
      R.dissoc('references'),
      R.toPairs,
      R.map((n) => ({
        key: n[0],
        value: adaptFieldValue(n[1]),
      })),
    )(values);
    commitMutation({
      mutation: vulnerabilityMutationFieldPatch,
      variables: {
        id: vulnerability.id,
        input: inputValues,
        commitMessage:
          commitMessage && commitMessage.length > 0 ? commitMessage : null,
        references,
      },
      setSubmitting,
      onCompleted: () => {
        setSubmitting(false);
        handleClose();
      },
    });
  };

  const handleSubmitField = (name, value) => {
    if (!enableReferences) {
      vulnerabilityValidation()
        .validateAt(name, { [name]: value })
        .then(() => {
          commitMutation({
            mutation: vulnerabilityMutationFieldPatch,
            variables: {
              id: vulnerability.id,
              input: { key: name, value: value || '' },
            },
          });
        })
        .catch(() => false);
    }
  };

  const initialValues = pipe(
    pick([
      'x_opencti_base_score',
      'x_opencti_base_severity',
      'x_opencti_attack_vector',
      'x_opencti_integrity_impact',
      'x_opencti_availability_impact',
      'x_opencti_confidentiality_impact',
    ]),
  )(vulnerability);
  return (
      <Formik
        enableReinitialize={true}
        initialValues={initialValues}
        validationSchema={vulnerabilityValidation()}
        onSubmit={onSubmit}
      >
        {({
          submitForm,
          isSubmitting,
          setFieldValue,
          values,
          isValid,
          dirty,
        }) => (
          <Form style={{ margin: '20px 0 20px 0' }}>
            <Field
              component={TextField}
              variant="standard"
              name="x_opencti_base_score"
              label={t('CVSS3 - Score')}
              fullWidth={true}
              type="number"
              step="0.1"
              onFocus={handleChangeFocus}
              onSubmit={handleSubmitField}
              helperText={
                <SubscriptionFocus
                  context={context}
                  fieldName="x_opencti_base_score"
                />
              }
            />
            { /* TODO Dont touch until CVSS4 */ }
            <Field
              component={SelectField}
              variant="standard"
              name="x_opencti_base_severity"
              label={t('CVSS3 - Severity')}
              fullWidth={true}
              containerstyle={fieldSpacingContainerStyle}
              onFocus={handleChangeFocus}
              onChange={handleSubmitField}
              helpertext={
                <SubscriptionFocus
                  context={context}
                  fieldName="x_opencti_base_severity"
                />
              }
            >
              <MenuItem value="CRITICAL">{t('CRITICAL')}</MenuItem>
              <MenuItem value="HIGH">{t('HIGH')}</MenuItem>
              <MenuItem value="MEDIUM">{t('MEDIUM')}</MenuItem>
              <MenuItem value="LOW">{t('LOW')}</MenuItem>
              <MenuItem value="Unknown">{t('Unknown')}</MenuItem>
            </Field>
            <Field
              component={TextField}
              variant="standard"
              name="x_opencti_attack_vector"
              label={t('CVSS3 - Attack vector')}
              fullWidth={true}
              style={fieldSpacingContainerStyle}
              onFocus={handleChangeFocus}
              onSubmit={handleSubmitField}
              helperText={
                <SubscriptionFocus
                  context={context}
                  fieldName="x_opencti_attack_vector"
                />
              }
            />
            <Field
              component={TextField}
              variant="standard"
              name="x_opencti_integrity_impact"
              label={t('CVSS3 - Integrity impact')}
              fullWidth={true}
              style={fieldSpacingContainerStyle}
              onFocus={handleChangeFocus}
              onSubmit={handleSubmitField}
              helperText={
                <SubscriptionFocus
                  context={context}
                  fieldName="x_opencti_integrity_impact"
                />
              }
            />
            <Field
              component={TextField}
              variant="standard"
              name="x_opencti_availability_impact"
              label={t('CVSS3 - Availability impact')}
              fullWidth={true}
              style={fieldSpacingContainerStyle}
              onFocus={handleChangeFocus}
              onSubmit={handleSubmitField}
              helperText={
                <SubscriptionFocus
                  context={context}
                  fieldName="x_opencti_availability_impact"
                />
              }
            />
            <Field
              component={TextField}
              variant="standard"
              name="x_opencti_confidentiality_impact"
              label={t('CVSS3 - Confidentiality impact')}
              fullWidth={true}
              style={fieldSpacingContainerStyle}
              onFocus={handleChangeFocus}
              onSubmit={handleSubmitField}
              helperText={
                <SubscriptionFocus
                  context={context}
                  fieldName="x_opencti_confidentiality_impact"
                />
              }
            />
            {enableReferences && (
              <CommitMessage
                submitForm={submitForm}
                disabled={isSubmitting || !isValid || !dirty}
                setFieldValue={setFieldValue}
                open={false}
                values={values.references}
                id={vulnerability.id}
              />
            )}
          </Form>
        )}
      </Formik>
  );
};

export default createFragmentContainer(VulnerabilityEditionDetailsComponent, {
  vulnerability: graphql`
      fragment VulnerabilityEditionDetails_vulnerability on Vulnerability {
        id
        x_opencti_base_score
        x_opencti_base_severity
        x_opencti_attack_vector
        x_opencti_integrity_impact
        x_opencti_availability_impact
        x_opencti_confidentiality_impact
      }
    `,
});
