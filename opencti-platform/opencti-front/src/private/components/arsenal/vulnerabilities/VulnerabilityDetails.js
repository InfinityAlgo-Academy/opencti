import React, { Component } from 'react';
import * as PropTypes from 'prop-types';
import { compose } from 'ramda';
import { graphql, createFragmentContainer } from 'react-relay';
import withTheme from '@mui/styles/withTheme';
import withStyles from '@mui/styles/withStyles';
import Paper from '@mui/material/Paper';
import Typography from '@mui/material/Typography';
import Grid from '@mui/material/Grid';
import Chip from '@mui/material/Chip';
import inject18n from '../../../../components/i18n';
import ExpandableMarkdown from '../../../../components/ExpandableMarkdown';

const styles = () => ({
  paper: {
    height: '100%',
    minHeight: '100%',
    margin: '10px 0 0 0',
    padding: '15px',
    borderRadius: 6,
  },
  chip: {
    fontSize: 12,
    lineHeight: '12px',
    height: 25,
    marginTop: 4,
    textTransform: 'uppercase',
    borderRadius: '0',
  },
});

const inlineStyles = {
  whiteDark: {
    backgroundColor: '#ffffff',
    color: '#2b2b2b',
  },
  whiteLight: {
    backgroundColor: '#ffffff',
    color: '#2b2b2b',
    border: '1px solid #2b2b2b',
  },
  green: {
    backgroundColor: 'rgba(76, 175, 80, 0.08)',
    color: '#4caf50',
  },
  blue: {
    backgroundColor: 'rgba(92, 123, 245, 0.08)',
    color: '#5c7bf5',
  },
  red: {
    backgroundColor: 'rgba(244, 67, 54, 0.08)',
    color: '#f44336',
  },
  orange: {
    backgroundColor: 'rgba(255, 152, 0, 0.08)',
    color: '#ff9800',
  },
  black: {
    backgroundColor: '#000000',
    color: '#ffffff',
  },
};

class VulnerabilityDetailsComponent extends Component {
  renderScore(score) {
    const { classes, theme, t } = this.props;
    const finalScore = score || 99;
    if (finalScore <= 3) {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.green}
          label={score}
        />
      );
    }
    if (finalScore <= 5) {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.blue}
          label={score}
        />
      );
    }
    if (finalScore <= 7) {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.orange}
          label={score}
        />
      );
    }
    if (finalScore <= 9) {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.red}
          label={score}
        />
      );
    }
    if (finalScore <= 10) {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.black}
          label={score}
        />
      );
    }
    return (
      <Chip
        classes={{ root: classes.chip }}
        style={
          theme.palette.mode === 'light'
            ? inlineStyles.whiteLight
            : inlineStyles.whiteDark
        }
        label={t('Unknown')}
      />
    );
  }

  renderSeverity(severity) {
    const { classes, theme, t } = this.props;
    if (severity === 'LOW') {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.green}
          label={severity}
        />
      );
    }
    if (severity === 'MEDIUM') {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.orange}
          label={severity}
        />
      );
    }
    if (severity === 'HIGH') {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.red}
          label={severity}
        />
      );
    }
    if (severity === 'CRITICAL') {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.black}
          label={severity}
        />
      );
    }
    return (
      <Chip
        classes={{ root: classes.chip }}
        style={
          theme.palette.mode === 'light'
            ? inlineStyles.whiteLight
            : inlineStyles.whiteDark
        }
        label={t('Unknown')}
      />
    );
  }

  render() {
    const { t, classes, vulnerability } = this.props;
    return (
      <div style={{ height: '100%' }}>
        <Typography variant="h4" gutterBottom={true}>
          {t('Details')}
        </Typography>
        <Paper classes={{ root: classes.paper }} variant="outlined">
          <Typography variant="h3" gutterBottom={true}>
            {t('Description')}
          </Typography>
          <ExpandableMarkdown source={vulnerability.description} limit={400} />
          <Grid container={true} spacing={3}>
            <Grid item={true} xs={6}>
              <Typography
                variant="h3"
                gutterBottom={true}
                style={{ marginTop: 15 }}
              >
                {t('CVSS3 - Score')}
              </Typography>
              {this.renderScore(vulnerability.x_opencti_base_score)}
            </Grid>
            <Grid item={true} xs={6}>
              <Typography
                variant="h3"
                gutterBottom={true}
                style={{ marginTop: 15 }}
              >
                {t('CVSS3 - Severity')}
              </Typography>
              {this.renderSeverity(vulnerability.x_opencti_base_severity)}
            </Grid>
          </Grid>
          <Grid container={true} spacing={3}>
            <Grid item={true} xs={6}>
              <Typography
                variant="h3"
                gutterBottom={true}
                style={{ marginTop: 15 }}
              >
                {t('CVSS3 - Availability impact (A)')}
              </Typography>
              <pre>
                {vulnerability.x_opencti_availability_impact || t('Unknown')}
              </pre>
            </Grid>
            <Grid item={true} xs={6}>
              <Typography
                variant="h3"
                gutterBottom={true}
                style={{ marginTop: 15 }}
              >
                {t('CVSS3 - Integrity impact (I)')}
              </Typography>
              <pre>
                {vulnerability.x_opencti_integrity_impact || t('Unknown')}
              </pre>
            </Grid>
            <Grid item={true} xs={6}>
              <Typography variant="h3" gutterBottom={true}>
                {t('CVSS3 - Confidentiality impact (C)')}
              </Typography>
              <pre>
                {vulnerability.x_opencti_confidentiality_impact || t('Unknown')}
              </pre>
            </Grid>
            <Grid item={true} xs={6}>
              <Typography variant="h3" gutterBottom={true}>
                {t('CVSS3 - Attack vector (AV)')}
              </Typography>
              <pre>{vulnerability.x_opencti_attack_vector || t('Unknown')}</pre>
            </Grid>
          </Grid>
        </Paper>
      </div>
    );
  }
}

VulnerabilityDetailsComponent.propTypes = {
  vulnerability: PropTypes.object,
  classes: PropTypes.object,
  theme: PropTypes.object,
  t: PropTypes.func,
  fld: PropTypes.func,
};

const VulnerabilityDetails = createFragmentContainer(
  VulnerabilityDetailsComponent,
  {
    vulnerability: graphql`
      fragment VulnerabilityDetails_vulnerability on Vulnerability {
        id
        x_opencti_base_score
        x_opencti_base_severity
        x_opencti_attack_vector
        x_opencti_integrity_impact
        x_opencti_availability_impact
        x_opencti_confidentiality_impact
        description
      }
    `,
  },
);

export default compose(
  inject18n,
  withTheme,
  withStyles(styles),
)(VulnerabilityDetails);
