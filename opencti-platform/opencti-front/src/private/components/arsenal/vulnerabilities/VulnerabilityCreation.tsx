import React, { FunctionComponent, useState } from 'react';
import { Formik, Field } from 'formik';
import Drawer from '@mui/material/Drawer';
import Typography from '@mui/material/Typography';
import Button from '@mui/material/Button';
import IconButton from '@mui/material/IconButton';
import Fab from '@mui/material/Fab';
import { Add, Close } from '@mui/icons-material';
import MenuItem from '@mui/material/MenuItem';
import * as Yup from 'yup';
import { graphql, useMutation } from 'react-relay';
import makeStyles from '@mui/styles/makeStyles';
import { FormikConfig, FormikHelpers } from 'formik/dist/types';
import { useFormatter } from '../../../../components/i18n';
import { handleErrorInForm } from '../../../../relay/environment';
import TextField from '../../../../components/TextField';
import CreatedByField from '../../common/form/CreatedByField';
import ObjectLabelField from '../../common/form/ObjectLabelField';
import ObjectMarkingField from '../../common/form/ObjectMarkingField';
import MarkDownField from '../../../../components/MarkDownField';
import { Theme } from '../../../../components/Theme';
import { VulnerabilitiesLinesPaginationQuery$variables } from './__generated__/VulnerabilitiesLinesPaginationQuery.graphql';
import { Option } from '../../common/form/ReferenceField';
import { insertNode } from '../../../../utils/store';
import { fieldSpacingContainerStyle } from '../../../../utils/field';
import ConfidenceField from '../../common/form/ConfidenceField';
import SelectField from '../../../../components/SelectField';
import { ExternalReferencesField } from '../../common/form/ExternalReferencesField';
import { useYupSchemaBuilder } from '../../../../utils/hooks/useEntitySettings';

const useStyles = makeStyles<Theme>((theme) => ({
  drawerPaper: {
    minHeight: '100vh',
    width: '50%',
    position: 'fixed',
    transition: theme.transitions.create('width', {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
    padding: 0,
  },
  createButton: {
    position: 'fixed',
    bottom: 30,
    right: 30,
  },
  buttons: {
    marginTop: 20,
    textAlign: 'right',
  },
  button: {
    marginLeft: theme.spacing(2),
  },
  header: {
    backgroundColor: theme.palette.background.nav,
    padding: '20px 20px 20px 60px',
  },
  closeButton: {
    position: 'absolute',
    top: 12,
    left: 5,
    color: 'inherit',
  },
  importButton: {
    position: 'absolute',
    top: 15,
    right: 20,
  },
  container: {
    padding: '10px 20px 20px 20px',
  },
}));

const vulnerabilityMutation = graphql`
  mutation VulnerabilityCreationMutation($input: VulnerabilityAddInput!) {
    vulnerabilityAdd(input: $input) {
      ...VulnerabilityLine_node
    }
  }
`;

interface VulnerabilityAddInput {
  name: string
  description: string
  createdBy?: Option
  objectMarking: Option[]
  objectLabel: Option[]
  x_opencti_base_score: number
  x_opencti_base_severity: string
  x_opencti_attack_vector: string
  confidence: number
  externalReferences: { value: string }[]
}

interface VulnerabilityCreationProps {
  inputValue?: string;
  paginationOptions: VulnerabilitiesLinesPaginationQuery$variables;
}

const VulnerabilityCreation: FunctionComponent<VulnerabilityCreationProps> = ({
  inputValue,
  paginationOptions,
}) => {
  const { t } = useFormatter();
  const classes = useStyles();
  const [open, setOpen] = useState(false);

  const basicShape = {
    name: Yup.string().required(t('This field is required')),
    description: Yup.string().nullable(),
    x_opencti_base_score: Yup.number().nullable(),
    x_opencti_base_severity: Yup.string().nullable(),
    x_opencti_attack_vector: Yup.string().nullable(),
    confidence: Yup.number().nullable(),
  };
  const vulnerabilityValidator = useYupSchemaBuilder('Vulnerability', basicShape);

  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);
  const onReset = () => handleClose();

  const initialValues: VulnerabilityAddInput = {
    name: inputValue || '',
    description: '',
    createdBy: undefined,
    objectMarking: [],
    objectLabel: [],
    x_opencti_base_score: 1,
    x_opencti_base_severity: '',
    x_opencti_attack_vector: '',
    confidence: 75,
    externalReferences: [],
  };

  const [commit] = useMutation(vulnerabilityMutation);

  const onSubmit: FormikConfig<VulnerabilityAddInput>['onSubmit'] = (
    values: VulnerabilityAddInput,
    {
      setSubmitting,
      setErrors,
      resetForm,
    }: FormikHelpers<VulnerabilityAddInput>,
  ) => {
    const finalValues = {
      name: values.name,
      description: values.description,
      createdBy: values.createdBy?.value,
      objectMarking: values.objectMarking.map((v) => v.value),
      objectLabel: values.objectLabel.map((v) => v.value),
      x_opencti_base_score: parseInt(String(values.x_opencti_base_score), 10),
      x_opencti_base_severity: values.x_opencti_base_severity,
      x_opencti_attack_vector: values.x_opencti_attack_vector,
      confidence: parseInt(String(values.confidence), 10),
      externalReferences: values.externalReferences.map(({ value }) => value),
    };
    commit({
      variables: {
        input: finalValues,
      },
      updater: (store) => {
        insertNode(
          store,
          'Pagination_vulnerabilities',
          paginationOptions,
          'vulnerabilityAdd',
        );
      },
      onError: (error: Error) => {
        handleErrorInForm(error, setErrors);
        setSubmitting(false);
      },
      onCompleted: () => {
        setSubmitting(false);
        resetForm();
        handleClose();
      },
    });
  };

  const fields = (
    setFieldValue: (
      field: string,
      value: unknown,
      shouldValidate?: boolean | undefined
    ) => void,
    values: VulnerabilityAddInput,
  ) => (
    <React.Fragment>
      <Field
        component={TextField}
        variant="standard"
        name="name"
        label={t('Name')}
        fullWidth={true}
        detectduplicate={['Vulnerability']}
      />
      <Field
        component={MarkDownField}
        name="description"
        label={t('Description')}
        fullWidth={true}
        multiline={true}
        rows="4"
        style={{ marginTop: 20 }}
      />
      <Field
        component={TextField}
        variant="standard"
        name="x_opencti_base_score"
        label={t('CVSS3 - Score')}
        type="number"
        step="0.1"
        fullWidth={true}
        style={{ marginTop: 20 }}
      />
      { /* TODO Dont touch until CVSS4 */ }
      <Field
        component={SelectField}
        variant="standard"
        name="x_opencti_base_severity"
        label={t('CVSS3 - Severity')}
        fullWidth={true}
        containerstyle={{ width: '100%', marginTop: 20 }}>
        <MenuItem value="CRITICAL">{t('CRITICAL')}</MenuItem>
        <MenuItem value="HIGH">{t('HIGH')}</MenuItem>
        <MenuItem value="MEDIUM">{t('MEDIUM')}</MenuItem>
        <MenuItem value="LOW">{t('LOW')}</MenuItem>
        <MenuItem value="Unknown">{t('Unknown')}</MenuItem>
      </Field>
      <Field
        component={TextField}
        variant="standard"
        name="x_opencti_attack_vector"
        label={t('CVSS3 - Attack vector')}
        fullWidth={true}
        style={{ marginTop: 20 }}
      />
      <ConfidenceField
        name="confidence"
        label={t('Confidence')}
        fullWidth={true}
        containerStyle={fieldSpacingContainerStyle}
      />
      <CreatedByField
        name="createdBy"
        style={{
          marginTop: 20,
          width: '100%',
        }}
        setFieldValue={setFieldValue}
      />
      <ObjectLabelField
        name="objectLabel"
        style={{
          marginTop: 20,
          width: '100%',
        }}
        setFieldValue={setFieldValue}
        values={values.objectLabel}
      />
      <ObjectMarkingField
        name="objectMarking"
        style={{
          marginTop: 20,
          width: '100%',
        }}
      />
      <ExternalReferencesField
        name="externalReferences"
        style={fieldSpacingContainerStyle}
        setFieldValue={setFieldValue}
        values={values.externalReferences}
      />
    </React.Fragment>
  );

  const button = (
    handleReset: () => void,
    isSubmitting: boolean,
    submitForm: () => Promise<void>,
  ) => (
    <React.Fragment>
      <Button
        variant="contained"
        onClick={handleReset}
        disabled={isSubmitting}
        classes={{ root: classes.button }}
      >
        {t('Cancel')}
      </Button>
      <Button
        variant="contained"
        color="secondary"
        onClick={submitForm}
        disabled={isSubmitting}
        classes={{ root: classes.button }}
      >
        {t('Create')}
      </Button>
    </React.Fragment>
  );

  return (
    <div>
      <Fab
        onClick={handleOpen}
        color="secondary"
        aria-label="Add"
        className={classes.createButton}
      >
        <Add />
      </Fab>
      <Drawer
        open={open}
        anchor="right"
        elevation={1}
        sx={{ zIndex: 1202 }}
        classes={{ paper: classes.drawerPaper }}
        onClose={handleClose}
      >
        <div className={classes.header}>
          <IconButton
            aria-label="Close"
            className={classes.closeButton}
            onClick={handleClose}
            size="large"
            color="primary"
          >
            <Close fontSize="small" color="primary" />
          </IconButton>
          <Typography variant="h6">{t('Create a vulnerability')}</Typography>
        </div>
        <div className={classes.container}>
          <Formik<VulnerabilityAddInput>
            initialValues={initialValues}
            validationSchema={vulnerabilityValidator}
            onSubmit={onSubmit}
            onReset={onReset}
          >
            {({
              submitForm,
              handleReset,
              isSubmitting,
              setFieldValue,
              values,
            }) => (
              <div style={{ margin: '20px 0 20px 0' }}>
                {fields(setFieldValue, values)}
                <div className={classes.buttons}>
                  {button(handleReset, isSubmitting, submitForm)}
                </div>
              </div>
            )}
          </Formik>
        </div>
      </Drawer>
    </div>
  );
};

export default VulnerabilityCreation;
