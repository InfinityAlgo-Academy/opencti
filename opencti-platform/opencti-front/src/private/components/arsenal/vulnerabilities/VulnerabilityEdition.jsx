import React, { Component } from 'react';
import * as PropTypes from 'prop-types';
import { graphql } from 'react-relay';
import { commitMutation, QueryRenderer } from '../../../../relay/environment';
import VulnerabilityEditionContainer from './VulnerabilityEditionContainer';
import { vulnerabilityEditionOverviewFocus } from './VulnerabilityEditionOverview';
import Loader from '../../../../components/Loader';

export const vulnerabilityEditionQuery = graphql`
  query VulnerabilityEditionContainerQuery($id: String!) {
    vulnerability(id: $id) {
      ...VulnerabilityEditionContainer_vulnerability
    }
  }
`;

class VulnerabilityEdition extends Component {
  handleClose() {
    commitMutation({
      mutation: vulnerabilityEditionOverviewFocus,
      variables: {
        id: this.props.vulnerabilityId,
        input: { focusOn: '' },
      },
    });
  }

  render() {
    const { vulnerabilityId } = this.props;
    return (
      <QueryRenderer
        query={vulnerabilityEditionQuery}
        variables={{ id: vulnerabilityId }}
        render={({ props }) => {
          if (props) {
            return (
              <VulnerabilityEditionContainer vulnerability={props.vulnerability} handleClose={this.handleClose.bind(this)} />
            );
          }
          return <Loader variant="inElement" />;
        }}
      />
    );
  }
}

VulnerabilityEdition.propTypes = {
  vulnerabilityId: PropTypes.string,
  me: PropTypes.object,
  classes: PropTypes.object,
  theme: PropTypes.object,
  t: PropTypes.func,
};

export default VulnerabilityEdition;
