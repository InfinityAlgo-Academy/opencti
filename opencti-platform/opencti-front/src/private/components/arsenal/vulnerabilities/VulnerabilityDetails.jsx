import React from 'react';
import { createFragmentContainer, graphql } from 'react-relay';
import makeStyles from '@mui/styles/makeStyles';
import { useTheme } from '@mui/styles';
import Paper from '@mui/material/Paper';
import Typography from '@mui/material/Typography';
import Grid from '@mui/material/Grid';
import Chip from '@mui/material/Chip';
import { useFormatter } from '../../../../components/i18n';
import VulnerabilitySoftwares from './VulnerabilitySoftwares';
import ExpandableMarkdown from '../../../../components/ExpandableMarkdown';
import { emptyFilled } from '../../../../utils/String';

// Deprecated - https://mui.com/system/styles/basics/
// Do not use it for new code.
const useStyles = makeStyles(() => ({
  paper: {
    height: '100%',
    minHeight: '100%',
    margin: '10px 0 0 0',
    padding: '15px',
    borderRadius: 4,
  },
  chip: {
    fontSize: 12,
    lineHeight: '12px',
    height: 25,
    marginTop: 4,
    textTransform: 'uppercase',
    borderRadius: 4,
  },
}));

const inlineStyles = {
  whiteDark: {
    backgroundColor: '#ffffff',
    color: '#2b2b2b',
  },
  whiteLight: {
    backgroundColor: '#ffffff',
    color: '#2b2b2b',
    border: '1px solid #2b2b2b',
  },
  green: {
    backgroundColor: 'rgba(76, 175, 80, 0.08)',
    color: '#4caf50',
  },
  blue: {
    backgroundColor: 'rgba(92, 123, 245, 0.08)',
    color: '#5c7bf5',
  },
  red: {
    backgroundColor: 'rgba(244, 67, 54, 0.08)',
    color: '#f44336',
  },
  orange: {
    backgroundColor: 'rgba(255, 152, 0, 0.08)',
    color: '#ff9800',
  },
  black: {
    backgroundColor: '#000000',
    color: '#ffffff',
  },
};

const VulnerabilityDetailsComponent = ({ vulnerability }) => {
  const classes = useStyles();
  const theme = useTheme();
  const { t_i18n } = useFormatter();
  const renderScore = (score) => {
    const finalScore = score || 99;
    if (finalScore <= 3) {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.green}
          label={score}
        />
      );
    }
    if (finalScore <= 5) {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.blue}
          label={score}
        />
      );
    }
    if (finalScore <= 7) {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.orange}
          label={score}
        />
      );
    }
    if (finalScore <= 9) {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.red}
          label={score}
        />
      );
    }
    if (finalScore <= 10) {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.black}
          label={score}
        />
      );
    }
    return (
      <Chip
        classes={{ root: classes.chip }}
        style={
          theme.palette.mode === 'light'
            ? inlineStyles.whiteLight
            : inlineStyles.whiteDark
        }
        label={score}
      />
    );
  };

  const renderSeverity = (severity) => {
    if (severity === 'LOW') {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.green}
          label={severity}
        />
      );
    }
    if (severity === 'MEDIUM') {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.orange}
          label={severity}
        />
      );
    }
    if (severity === 'HIGH') {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.red}
          label={severity}
        />
      );
    }
    if (severity === 'CRITICAL') {
      return (
        <Chip
          classes={{ root: classes.chip }}
          style={inlineStyles.black}
          label={severity}
        />
      );
    }
    return (
      <Chip
        classes={{ root: classes.chip }}
        style={
          theme.palette.mode === 'light'
            ? inlineStyles.whiteLight
            : inlineStyles.whiteDark
        }
        label={t_i18n('Unknown')}
      />
    );
  };

  return (
    <div style={{ height: '100%' }}>
      <Typography variant="h4" gutterBottom={true}>
        {t_i18n('Details')}
      </Typography>
      <Paper classes={{ root: classes.paper }} variant="outlined">
        <Typography variant="h3" gutterBottom={true}>
          {t_i18n('Description')}
        </Typography>
        <ExpandableMarkdown source={vulnerability.description} limit={400} />
        <Grid container={true} spacing={3}>
          <Grid item={true} xs={6}>
            <Typography
              variant="h3"
              gutterBottom={true}
              style={{ marginTop: 15 }}
            >
              {t_i18n('CVSS3 - Score')}
            </Typography>
            {renderScore(vulnerability.x_opencti_cvss_base_score)}
          </Grid>
          <Grid item={true} xs={6}>
            <Typography
              variant="h3"
              gutterBottom={true}
              style={{ marginTop: 15 }}
            >
              {t_i18n('CVSS3 - Severity')}
            </Typography>
            {renderSeverity(vulnerability.x_opencti_cvss_base_severity)}
          </Grid>
        </Grid>
        <Grid container={true} spacing={3}>
          <Grid item={true} xs={6}>
            <Typography
              variant="h3"
              gutterBottom={true}
              style={{ marginTop: 15 }}
            >
              {t_i18n('CVSS3 - Availability impact (A)')}
            </Typography>
            <pre>{emptyFilled(vulnerability.x_opencti_cvss_availability_impact)}</pre>
          </Grid>
          <Grid item={true} xs={6}>
            <Typography
              variant="h3"
              gutterBottom={true}
              style={{ marginTop: 15 }}
            >
              {t_i18n('CVSS3 - Integrity impact (I)')}
            </Typography>
            <pre>{emptyFilled(vulnerability.x_opencti_cvss_integrity_impact)}</pre>
          </Grid>
          <Grid item={true} xs={6}>
            <Typography variant="h3" gutterBottom={true}>
              {t_i18n('CVSS3 - Confidentiality impact (C)')}
            </Typography>
            <pre>
              {emptyFilled(vulnerability.x_opencti_cvss_confidentiality_impact)}
            </pre>
          </Grid>
          <Grid item={true} xs={6}>
            <Typography variant="h3" gutterBottom={true}>
              {t_i18n('CVSS3 - Attack vector (AV)')}
            </Typography>
            <pre>{emptyFilled(vulnerability.x_opencti_cvss_attack_vector)}</pre>
          </Grid>
        </Grid>
        <VulnerabilitySoftwares vulnerability={vulnerability} />
      </Paper>
    </div>
  );
};

const VulnerabilityDetails = createFragmentContainer(
  VulnerabilityDetailsComponent,
  {
    vulnerability: graphql`
      fragment VulnerabilityDetails_vulnerability on Vulnerability {
        id
        x_opencti_cvss_base_score
        x_opencti_cvss_base_severity
        x_opencti_cvss_attack_vector
        x_opencti_cvss_integrity_impact
        x_opencti_cvss_availability_impact
        x_opencti_cvss_confidentiality_impact
        description
        ...VulnerabilitySoftwares_vulnerability
      }
    `,
  },
);

export default VulnerabilityDetails;
