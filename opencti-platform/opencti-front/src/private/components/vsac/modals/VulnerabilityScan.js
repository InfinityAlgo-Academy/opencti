/* eslint-disable */
import React, { Component, useState, useEffect, useRef } from 'react';
import { useForm, Controller } from 'react-hook-form';
import Alert from '@material-ui/lab/Alert';
import Paper from '@material-ui/core/Paper';
import Grid from '@material-ui/core/Grid';
import Card from '@material-ui/core/Card';
import CardHeader from '@material-ui/core/CardHeader';
import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import Checkbox from '@material-ui/core/Checkbox';
import Button from '@material-ui/core/Button';
import InputLabel from '@material-ui/core/InputLabel';
import TextField from '@material-ui/core/TextField';
import MenuItem from '@material-ui/core/MenuItem';
import FormLabel from '@material-ui/core/FormLabel';
import FormControl from '@material-ui/core/FormControl';
import FormGroup from '@material-ui/core/FormGroup';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import FormHelperText from '@material-ui/core/FormHelperText';
import CloudUploadIcon from "@material-ui/icons/CloudUpload";
import Switch from '@material-ui/core/Switch';
import Select from '@material-ui/core/Select';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import ListItemText from '@material-ui/core/ListItemText';
import { createScan } from '../../../../services/scan.service';
import { scanAxios } from '../../../../utils/axios';
import updateFileName from "../../../../utils/s3FileName";
import ReactS3Uploader from 'react-s3-uploader';
import bsCustomFileInput from "bs-custom-file-input";
import LinearProgress from '@material-ui/core/LinearProgress';
import Box from '@material-ui/core/Box';
import {
	defaultVulnerabilityRange,
	defaultWeaknessCount,
	defaultVignette,
	vulnerabilityRanges,
	weaknessesCount,
	vignettes,
} from '../data';
import {toastAxiosError, toastGenericError, toastSuccess} from "../../../../utils/bakedToast";

const classes = {
	root: {
		flexGrow: 1,
	},
	card: {
		width: '100%',
		marginBottom: 20,
		borderRadius: 6,
		position: 'relative',
	},
	cardHeader: {
		marginBottom: '0',
	},
	paper: {
		margin: '10px 0 0 0',
		padding: 0,
		borderRadius: 6,
	},
	item: {
		height: 50,
		minHeight: 50,
		maxHeight: 50,
		paddingRight: 0,
	},
	itemText: {
		whiteSpace: 'nowrap',
		overflow: 'hidden',
		textOverflow: 'ellipsis',
		paddingRight: 24,
	},
	itemIconSecondary: {
		marginRight: 0,
	},
	number: {
		marginTop: 10,
		float: 'left',
		fontSize: 30,
	},
	title: {
		marginTop: 5,
		textTransform: 'uppercase',
		fontSize: 12,
		fontWeight: 500,
	},
	icon: {
		position: 'absolute',
		top: 35,
		right: 20,
	},
	graphContainer: {
		width: '100%',
		padding: '20px 20px 0 0',
	},
	labelsCloud: {
		width: '100%',
		height: 300,
	},
	label: {
		width: '100%',
		height: 100,
		padding: 15,
	},
	labelNumber: {
		fontSize: 30,
		fontWeight: 500,
	},
	labelValue: {
		fontSize: 15,
	},
	itemAuthor: {
		width: 200,
		minWidth: 200,
		maxWidth: 200,
		paddingRight: 24,
		whiteSpace: 'nowrap',
		overflow: 'hidden',
		textOverflow: 'ellipsis',
		textAlign: 'left',
	},
	itemType: {
		width: 100,
		minWidth: 100,
		maxWidth: 100,
		paddingRight: 24,
		whiteSpace: 'nowrap',
		overflow: 'hidden',
		textOverflow: 'ellipsis',
		textAlign: 'left',
	},
	itemDate: {
		width: 120,
		minWidth: 120,
		maxWidth: 120,
		paddingRight: 24,
		whiteSpace: 'nowrap',
		overflow: 'hidden',
		textOverflow: 'ellipsis',
		textAlign: 'left',
	},
	fileUuploadWwrapper: {
  		display: 'flex',
  		flexDirection: 'column',
        justifyContent: 'center',
  		alignItems: 'center',
		padding: 4,
		border: '1px dashed blue',
		borderRadius: '5px',
		position: 'relative',
		transition: 'backgroundColor 0.3s linear',
	},
	customFileLabel: {
    	position: "relative",
    	width: "75%",
  	},
	customFileInput: {
    	position: "absolute",
    	height: "120px",
    	width: "600px",
  	}
};

const VulnerabilityScan = (props) => {

	const STATUS_INTERVAL = 10000;

	const [vulnerabilityRange, setVulnerabilityRange] = useState(
		defaultVulnerabilityRange
	);
	const [weaknessCount, setWeaknessCount] = useState(defaultWeaknessCount);
	const [vignette, setVignette] = useState(defaultVignette);
	const [uploadPercentage, setUploadPercentage] = useState(0);
	const [isLoading, setIsLoading] = useState(false);
	const [currentOrg] = useState(localStorage.getItem('currentOrg'))
	const [disableSubmit, setDisableSubmit] = useState(false)
	const { onSubmit, client_ID } = props;

	const { register, handleSubmit, setValue, control, getValues, errors } = useForm();

	const { ref, ...inputProps } = register("file");

	const scan_name = useRef();
	const fileRef= useRef();

	useEffect(() => {
    	bsCustomFileInput.init();
  	});

	const handleClose = () => {
		props.onClose();
	};

	const onFinishUpload = (result) => {
		const {fileId} = result;
		const data = getValues();
		data.file = data.scan_name;
		data.fileId = fileId;
		newScan(data).then(() => {
			setUploadPercentage(0);
			setIsLoading(false);
			toastSuccess("Scan Uploaded")
		});
	};

	const onErrorUpload = (error) => {
		toastGenericError("Scan Upload Failed")
		setUploadPercentage(0);
		setIsLoading(false);
	};

	const onFormSubmit = (data) => {
		setIsLoading(true);
		setDisableSubmit(true);
		fileRef.current.uploadFile();
	};

	const preSignS3 = async (file, callback) => {
		const headers = {
			Accept: 'application/vnd.dl.s3.surl.response+json;version=1',
			'Content-Type': 'application/vnd.dl.s3.surl.request+json;version=1',
			'X-Cyio-Client': client_ID,
		};
		const bodyParams = {
			file_name: updateFileName(file.name),
			resource_type: 'nessus',
			file_type: file.type,
		};
		try {
			scanAxios
				.post('/s3/presign', bodyParams, { headers })
				.then((results) => {
					callback(results.data);
				})
				.catch((error) => {
					toastAxiosError("Upload Error")
					console.error(error);
				});
		} catch (error) {
			throw error;
		}
	};

	const setUploadedFileName = (event) => {
		const rawPath = event.target.value
		if(!rawPath){
			setValue("scan_name", null)
		}else{
			let fileName = rawPath.substr(rawPath.lastIndexOf("\\") + 1)
			if(fileName.length === 0) fileName = null
			setValue("scan_name", fileName)
		}
	};

	const handleVulnerabilityRanges = (e) => {
		setValue('vulnerability_ranges', e.target.value);
	};

	const handleWeaknessCount = (e) => {
		setValue('weakness_count', e.target.value);
	};

	const handleWeaknessScore = (e) => {
		setValue('weakness_score', e.target.value);
	};

	const handleNotify = (e) => {
		setValue('notify', e.target.value);
	};

	const newScan = async (data) => {
		const params = {
			file: data.fileId || data.file,
			scan_name: getValues('scan_name'),
			vulnerabilityRange: getValues('vulnerability_ranges') || vulnerabilityRanges[0].id,
			weaknessRange: getValues('weakness_count') || weaknessesCount[0].id,
			vignette: getValues('weakness_score') || vignettes[0].id,
			notify: getValues('notify') || false,
		};

		try {
			await createScan(params, client_ID);
			 
			setTimeout(() => {
	        	props.rerenderParentCallback();
	       		handleClose();
	      	}, STATUS_INTERVAL);
		} catch (error) {
			//setIsPendingAnalysis(false);
			console.log(error);
		}
	};
	return (
		<Paper
			classes={{ root: classes.paper }}
			elevation={2}
			style={{ width: 480 }}
		>
			<Card>
				<form
					onSubmit={handleSubmit((data) => onFormSubmit(data))}
				>
					<CardHeader title="New vulnerability scan export file" />
					<CardContent>
						<FormControl>
							<FormGroup row={true}>
							<Box 
								width="100%"
								display="flex" 
								flexDirection="column"
						        justifyContent="center"
						  		alignItems="center"
								padding="10px"
								marginBottom="10px"
								border="1px dashed #fff" 
								borderRadius="5px"
								position="relative"
								transition="backgroundColor 0.3s linear"
								>
								<CloudUploadIcon />
								<ReactS3Uploader
									name="file"
									ref={(ref) => {
				                      fileRef.current = ref;
				                    }}
				                    inputRef={ref}
				                    {...inputProps}
									className="custom-file-input"
									getSignedUrl={preSignS3}
									s3path="/uploads/"
									accept=".nessus, .xml"
									onProgress={(progress) =>
										setUploadPercentage(progress)
									}
									onError={(e) => onErrorUpload(e)}
									onFinish={onFinishUpload}
									scrubFilename={updateFileName}
									uploadRequestHeaders={{}}
									autoUpload={false}
									contentDisposition="auto"
									onChange={setUploadedFileName}
								/>
								<label 
									data-browse="Browse" 
									for="vulnscan-file-upload" 
									classes={{root: classes.customFileLabel}}
								>
									Choose the vulnerability scan file to upload
								</label>
								<Box color="text.secondary">
				                  or drag and drop it here
				                </Box>	

							</Box>
							{uploadPercentage >= 1 ? (
								<Box 
									width="100%"
									marginBottom="20px"
								>
							      <LinearProgress variant="determinate" value={uploadPercentage} />
							    </Box>) : null
							}
							</FormGroup>
							<FormGroup row={true}>
								<TextField
									style={{ width: '100%' }}
									label="Scan Name"
									name="scan_name"
									defaultValue="A custom scan file name"
									inputRef={scan_name}
								/>
							</FormGroup>
							<FormGroup row={true}>
								<List style={{ width: '100%' }}>
									<ListItem dense button>
										<ListItemIcon>
											<Select
												labelId="demo-simple-select-label"
												id="demo-simple-select"
												defaultValue={
													vulnerabilityRanges[0].id
												}
												onChange={(event, value) => {
													handleVulnerabilityRanges(
														event
													);
												}}
											>
												{vulnerabilityRanges.map(
													(item) => (
														<MenuItem
															value={item.id}
														>
															{item.title}
														</MenuItem>
													)
												)}
												;
											</Select>
										</ListItemIcon>
										<ListItemText
											style={{ width: '100%' }}
											primary={'Vulnerability Ranges'}
											secondary={
												'Choose how many years of vulnerabilities to consider.'
											}
										/>
									</ListItem>
									<ListItem dense button>
										<ListItemIcon>
											<Select
												labelId="demo-simple-select-label"
												id="demo-simple-select"
												defaultValue={
													weaknessesCount[0].id
												}
												onChange={(event, value) => {
													handleWeaknessCount(event);
												}}
											>
												{weaknessesCount.map((item) => (
													<MenuItem value={item.id}>
														{item.title}
													</MenuItem>
												))}
												;
											</Select>
										</ListItemIcon>
										<ListItemText
											style={{ width: '100%' }}
											primary={'Weakness Count'}
											secondary={
												'The number of weaknesses to rank order.'
											}
										/>
									</ListItem>
									<ListItem dense button>
										<ListItemIcon>
											<Select
												labelId="demo-simple-select-label"
												id="demo-simple-select"
												defaultValue={vignettes[0].id}
												onChange={(event, value) => {
													handleWeaknessScore(event);
												}}
											>
												{vignettes.map((item) => (
													<MenuItem value={item.id}>
														{item.title}
													</MenuItem>
												))}
												;
											</Select>
										</ListItemIcon>
										<ListItemText
											style={{ width: '100%' }}
											primary={
												'Influence Weakness Scores with Vignette'
											}
											secondary={
												'Adjusts some values in the calculations to help prioritize weaknesses.'
											}
										/>
									</ListItem>
								</List>
							</FormGroup>
							<FormGroup row={true}>
								<FormControlLabel
									control={
										<Checkbox
											name="checkedB"
											color="primary"
											onChange={(event, value) => {
												handleNotify(event);
											}}
										/>
									}
									label="Notify me via email when the results are ready"
								/>
							</FormGroup>
							<FormGroup row={true}>
								<Alert
									style={{ width: '100%' }}
									severity="info"
								>
									<strong>Note:</strong> Uploading to &nbsp;{currentOrg}
								</Alert>
							</FormGroup>
						</FormControl>
					</CardContent>
					<CardActions style={{ justifyContent: 'right' }}>
						<Button size="small" color="secondary" onClick={handleClose}>
							Cancel
						</Button>
						<Button size="small" color="primary" type="submit" disabled={disableSubmit}>
							Submit
						</Button>
					</CardActions>
				</form>
			</Card>
		</Paper>
	);
};

export default VulnerabilityScan;
