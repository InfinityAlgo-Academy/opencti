/* eslint-disable */
import React, { Component, useState, useEffect, useRef } from 'react';
import { useForm, Controller } from 'react-hook-form';
import Alert from '@material-ui/lab/Alert';
import Paper from '@material-ui/core/Paper';
import Grid from '@material-ui/core/Grid';
import Card from '@material-ui/core/Card';
import CardHeader from '@material-ui/core/CardHeader';
import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import Checkbox from '@material-ui/core/Checkbox';
import Button from '@material-ui/core/Button';
import InputLabel from '@material-ui/core/InputLabel';
import TextField from '@material-ui/core/TextField';
import Typography from '@material-ui/core/Typography';
import MenuItem from '@material-ui/core/MenuItem';
import FormLabel from '@material-ui/core/FormLabel';
import FormControl from '@material-ui/core/FormControl';
import FormGroup from '@material-ui/core/FormGroup';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import Dialog from '@material-ui/core/Dialog';
import DialogContent from '@material-ui/core/DialogContent';
import DialogContentText from '@material-ui/core/DialogContentText';
import DialogActions from '@material-ui/core/DialogActions';
import FormHelperText from '@material-ui/core/FormHelperText';
import AttachFileIcon from '@material-ui/icons/AttachFile';
import CloudUploadIcon from "@material-ui/icons/CloudUpload";
import Switch from '@material-ui/core/Switch';
import Select from '@material-ui/core/Select';
import List from '@material-ui/core/List';
import { makeStyles } from '@material-ui/core/styles';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import ListItemText from '@material-ui/core/ListItemText';
import { createScan } from '../../../../services/scan.service';
import { scanAxios } from '../../../../utils/axios';
import updateFileName from "../../../../utils/s3FileName";
import ReactS3Uploader from 'react-s3-uploader';
import bsCustomFileInput from "bs-custom-file-input";
import LinearProgress from '@material-ui/core/LinearProgress';
import Box from '@material-ui/core/Box';
import {
	defaultVulnerabilityRange,
	defaultWeaknessCount,
	defaultVignette,
	vulnerabilityRanges,
	weaknessesCount,
	vignettes,
	defaultImplementationPoint,
	implementationPoint,
} from '../data';
import { toastAxiosError, toastGenericError, toastSuccess } from "../../../../utils/bakedToast";

const useStyles = makeStyles({
	root: {
		flexGrow: 1,
	},
	card: {
		width: '100%',
		marginBottom: 20,
		borderRadius: 6,
		position: 'relative',
	},
	cardHeader: {
		marginBottom: '0',
	},
	paper: {
		margin: '10px 0 0 0',
		padding: 0,
		borderRadius: 6,
	},
	item: {
		height: 50,
		minHeight: 50,
		maxHeight: 50,
		paddingRight: 0,
	},
	itemText: {
		whiteSpace: 'nowrap',
		overflow: 'hidden',
		textOverflow: 'ellipsis',
		paddingRight: 24,
	},
	itemIconSecondary: {
		marginRight: 0,
	},
	number: {
		marginTop: 10,
		float: 'left',
		fontSize: 30,
	},
	title: {
		marginTop: 5,
		textTransform: 'uppercase',
		fontSize: 12,
		fontWeight: 500,
	},
	icon: {
		position: 'absolute',
		top: 35,
		right: 20,
	},
	graphContainer: {
		width: '100%',
		padding: '20px 20px 0 0',
	},
	labelsCloud: {
		width: '100%',
		height: 300,
	},
	label: {
		width: '100%',
		height: 100,
		padding: 15,
	},
	labelNumber: {
		fontSize: 30,
		fontWeight: 500,
	},
	labelValue: {
		fontSize: 15,
	},
	itemAuthor: {
		width: 200,
		minWidth: 200,
		maxWidth: 200,
		paddingRight: 24,
		whiteSpace: 'nowrap',
		overflow: 'hidden',
		textOverflow: 'ellipsis',
		textAlign: 'left',
	},
	itemType: {
		width: 100,
		minWidth: 100,
		maxWidth: 100,
		paddingRight: 24,
		whiteSpace: 'nowrap',
		overflow: 'hidden',
		textOverflow: 'ellipsis',
		textAlign: 'left',
	},
	itemDate: {
		width: 120,
		minWidth: 120,
		maxWidth: 120,
		paddingRight: 24,
		whiteSpace: 'nowrap',
		overflow: 'hidden',
		textOverflow: 'ellipsis',
		textAlign: 'left',
	},
	fileUuploadWwrapper: {
		display: 'flex',
		flexDirection: 'column',
		justifyContent: 'center',
		alignItems: 'center',
		padding: 4,
		border: '1px dashed blue',
		borderRadius: '5px',
		position: 'relative',
		transition: 'backgroundColor 0.3s linear',
	},
	customFileLabel: {
		position: "relative",
		width: "75%",
	},
	customFileInput: {
		position: "absolute",
		height: "120px",
		width: "600px",
	},
	selectInput: {		
		minWidth: '100px',
	},
	selectText: {
		paddingLeft: '30px',
	}
});

const VulnerabilityScan = (props) => {
	const { client_ID } = props;
	const classes = useStyles();
	const STATUS_INTERVAL = 5000;

	const [uploadPercentage, setUploadPercentage] = useState(0);
	const [currentOrg] = useState(localStorage.getItem('currentOrg'))
	const [disableSubmit, setDisableSubmit] = useState(true)
	const [displayDialog, setDisplayDialog] = useState(false);
	const buttonRef = useRef(null);
	const { register, handleSubmit, setValue, getValues } = useForm();
	const { ref, ...inputProps } = register("file");

	const fileRef = useRef();

	useEffect(() => {
		bsCustomFileInput.init();
	});

	useEffect(() => {
	  if(displayDialog){
		buttonRef.current.focus();
	  }	 
	}, [displayDialog])
	

	const handleClose = () => {
		props.onClose();
	};

	const onFinishUpload = (result) => {
		const { fileId } = result;
		const data = getValues();
		data.file = data.customName ? data.customName : data.scanName;
		data.fileId = fileId;
		newScan(data).then(() => {
			setUploadPercentage(0);
			toastSuccess("Scan Uploaded")
		});
	};

	const onErrorUpload = (error) => {
		toastGenericError("Scan Upload Failed")
		console.error(error)
		setUploadPercentage(0);
	};

	const onFormSubmit = (data) => {
		setDisableSubmit(true);
		setTimeout(() => {
			setDisplayDialog(false);
		}, 800);
		fileRef.current.uploadFile();
	};

	const preSignS3 = async (file, callback) => {
		const headers = {
			Accept: 'application/vnd.dl.s3.surl.response+json;version=1',
			'Content-Type': 'application/vnd.dl.s3.surl.request+json;version=1',
			'X-Cyio-Client': client_ID,
		};
		const bodyParams = {
			file_name: updateFileName(file.name),
			resource_type: 'nessus',
			file_type: file.type,
		};
		try {
			scanAxios
				.post('/s3/presign', bodyParams, { headers })
				.then((results) => {
					callback(results.data);
				})
				.catch((error) => {
					toastAxiosError("Upload Error")
					console.error(error);
				});
		} catch (error) {
			setDisableSubmit(false)
			throw error;
		}
	};

	const setUploadedFileName = (event) => {
		const rawPath = event.target.value
		if (!rawPath) {
			setDisableSubmit(true)
			setValue("scanName", null)
		} else {
			let fileName = rawPath.substring(rawPath.lastIndexOf("\\") + 1)
			if (fileName.length === 0) fileName = null
			setValue("scanName", fileName)
			setDisableSubmit(false)
		}
	};

	const handleVulnerabilityRanges = (e) => {
		setValue('vulnerability_ranges', e.target.value);
	};

	const handleWeaknessCount = (e) => {
		setValue('weakness_count', e.target.value);
	};

	const handleWeaknessScore = (e) => {
		setValue('weakness_score', e.target.value);
	};

	const handleNotify = (e) => {
		setValue('notify', e.target.checked);
	};

	const handleImplementationPoint = (e) => {
		setValue('implementation_point', e.target.value);
	};

	const handleScanNameInputChange = (e) => {
		const value = e.target.value
		if (value === null || value === '') {
			setValue("customName", null)
		} else {
			setValue("customName", value)
		}
	}

	const newScan = async (data) => {
		const params = {
			file: data.fileId || data.file,
			scan_name: getValues('customName') || getValues("scanName"),
			vulnerabilityRange: getValues('vulnerability_ranges') || vulnerabilityRanges[0].id,
			weaknessRange: getValues('weakness_count') || weaknessesCount[0].id,
			vignette: getValues('weakness_score') || vignettes[0].id,
			notify: getValues('notify'),
			implementationPoint: getValues('implementation_point') || implementationPoint[0].id
		};

		try {
			await createScan(params, client_ID);
			setTimeout(() => {
				props.rerenderParentCallback();
				handleClose();
			}, STATUS_INTERVAL);
		} catch (error) {
			console.error(error);
			setDisableSubmit(false)
		}
	};
	return (
		<Paper
			classes={{ root: classes.paper }}
			elevation={2}
			style={{ width: 480 }}
		>
			<Card>
				<CardHeader
					disableTypography={true}
					style={{ fontSize: '18px' }}
					title="Upload Vulnerability Scan File"
				/>
				<CardContent>
					<FormControl>
						<FormGroup row={true}>
							<Box
								width="100%"
								display="flex"
								flexDirection="column"
								justifyContent="center"
								alignItems="center"
								padding="30px 10px"
								marginBottom="10px"
								border="1px dashed #fff"
								borderRadius="5px"
								position="relative"
								transition="backgroundColor 0.3s linear"
							>
								<CloudUploadIcon />
								<ReactS3Uploader
									name="file"
									ref={(ref) => fileRef.current = ref}
									inputRef={ref}
									{...inputProps}
									className="custom-file-input"
									getSignedUrl={preSignS3}
									s3path="/uploads/"
									accept=".nessus, .xml"
									onProgress={(progress) => setUploadPercentage(progress)}
									onError={(e) => onErrorUpload(e)}
									onFinish={onFinishUpload}
									scrubFilename={updateFileName}
									uploadRequestHeaders={{}}
									autoUpload={false}
									contentDisposition="auto"
									onChange={setUploadedFileName}
								/>
								<label
									data-browse="Browse"
									for="vulnscan-file-upload"
									classes={{ root: classes.customFileLabel }}
								>
									Choose the vulnerability scan to upload (XML format only)
								</label>
								<Box color="text.secondary"> or drag and drop it here </Box>
							</Box>
							{uploadPercentage >= 1 ? (
								<Box
									width="100%"
									marginBottom="20px"
								>
									<LinearProgress variant="determinate" value={uploadPercentage} />
								</Box>
							) : null}
						</FormGroup>
						<FormGroup row={true}>
							<TextField
								fullWidth
								variant={"outlined"}
								label="Custom Scan Name (Optional)"
								name="scan_name"
								onChange={handleScanNameInputChange}
							/>
						</FormGroup>
						<FormGroup row={true}>
							<List style={{ width: '100%' }}>
								<ListItem dense button>
									<ListItemIcon>									
										<Select
											labelId="demo-simple-select-label"
											id="demo-simple-select"
											className={classes.selectInput}
											defaultValue={vulnerabilityRanges[0].id}
											onChange={(event) => {
												handleVulnerabilityRanges(event);
											}}
											
										>
											{vulnerabilityRanges.map(
												(item) => (
													<MenuItem
														value={item.id}
														
													>
														{item.title}
													</MenuItem>
												)
											)};
										</Select>																		
									</ListItemIcon>
									<ListItemText
										style={{ width: '100%' }}
										primary={'Vulnerability Ranges'}
										secondary={
											'Choose how many years of vulnerabilities to consider.'
										}
										className={classes.selectText}
									/>
								</ListItem>
								<ListItem dense button>
									<ListItemIcon>										
											<Select
												labelId="demo-simple-select-label"
												id="demo-simple-select"
												defaultValue={weaknessesCount[0].id}
												onChange={(event) => handleWeaknessCount(event)}
												className={classes.selectInput}
											>
												{weaknessesCount.map((item) => (
													<MenuItem value={item.id}>
														{item.title}
													</MenuItem>
												))}
												;
											</Select>									
									</ListItemIcon>
									<ListItemText
										style={{ width: '100%' }}
										primary={'Weakness Count'}
										secondary={
											'The number of weaknesses to rank order.'
										}
										className={classes.selectText}
									/>
								</ListItem>
								<ListItem dense button>
									<ListItemIcon>
										<Select
											labelId="demo-simple-select-label"
											id="demo-simple-select"
											defaultValue={vignettes[0].id}
											onChange={(event) => handleWeaknessScore(event)}
											className={classes.selectInput}
										>
											{vignettes.map((item) => (
												<MenuItem value={item.id}>
													{item.title}
												</MenuItem>
											))}
											;
										</Select>
									</ListItemIcon>
									<ListItemText
										style={{ width: '100%' }}
										primary={'Influence Weakness Scores with Vignette'}
										secondary={'Adjusts some values in the calculations to help prioritize weaknesses.'}
										className={classes.selectText}
									/>
								</ListItem>
								<ListItem dense button>
									<ListItemIcon>
										<Select
											labelId="demo-simple-select-label"
											id="demo-simple-select"
											defaultValue={implementationPoint[0].id}
											onChange={(event) => handleImplementationPoint(event)}
											className={classes.selectInput}
										>
											{implementationPoint.map((item) => (
												<MenuItem value={item.id}>
													{item.title}
												</MenuItem>
											))}
											;
										</Select>
									</ListItemIcon>
									<ListItemText
										style={{ width: '100%' }}
										primary={'Implementation Point'}
										secondary={'Indicate whether the scan being uploaded is for an internal or external targets.'}
										className={classes.selectText}
									/>
								</ListItem>
							</List>
						</FormGroup>
						<FormGroup row={true}>
							<FormControlLabel
								control={
									<Checkbox
										name="checkedB"
										color="primary"
										onChange={(event) => handleNotify(event)}
									/>
								}
								label="Notify me via email when the results are ready"
							/>
						</FormGroup>
						<FormGroup row={true}>
							<Alert
								style={{ width: '100%' }}
								severity="info"
							>
								<strong>Note:</strong> Uploading to {currentOrg}
							</Alert>
						</FormGroup>
					</FormControl>
				</CardContent>
				<CardActions style={{ justifyContent: 'left', padding: '8px 8px 8px 15px', marginBottom: '10px' }}>
					<Button
						size="small"
						variant="outlined"
						onClick={handleClose}
					>
						Cancel
					</Button>
					<Button
						size="small"
						variant="contained"
						color="primary"
						type="submit"
						disabled={disableSubmit}
						onClick={() => setDisplayDialog(true)}
					>
						Submit
					</Button>
				</CardActions>
				<Dialog
					open={displayDialog}
					keepMounted={true}
				>
					<DialogContent>
						<Typography
							style={{
								fontSize: '18px',
								lineHeight: '24px',
								color: 'white',
							}} >
							{`Are you sure you want to upload to ${currentOrg}?`}
						</Typography>
						<DialogContentText>
							Once confirmed this action can't be undone
						</DialogContentText>
						<FormGroup row={true}>
							<Alert
								severity="info"
								style={{ width: '100%', marginBottom: '10px' }}
								icon={<AttachFileIcon />}
							>
								Uploading {getValues('customName') || getValues("scanName")}
							</Alert>
							<Alert
								style={{ width: '100%' }}
								severity="info"
							>
								Uploading to {currentOrg}
							</Alert>
						</FormGroup>
					</DialogContent>
					<DialogActions
						style={{
							justifyContent: 'flex-start',
							padding: '10px 0 20px 22px',
						}}
					>
						<Button
							ref={buttonRef}
							size='small'
							color='primary'
							variant='contained'							
							style={{ textTransform: 'capitalize' }}
							onClick={() => setDisplayDialog(false)}
						>
							Cancel
						</Button>
						<Button
							size='small'							
							variant='outlined'
							disabled={disableSubmit}
							style={{ textTransform: 'capitalize' }}
							onClick={handleSubmit((data) => onFormSubmit(data))}
						>
							Confirm
						</Button>
					</DialogActions>
				</Dialog>
			</Card>
		</Paper>
	);
};

export default VulnerabilityScan;
