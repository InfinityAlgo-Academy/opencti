import React, { FunctionComponent } from 'react';
import { graphql, PreloadedQuery, useFragment, usePreloadedQuery } from 'react-relay';
import List from '@mui/material/List';
import ListItemIcon from '@mui/material/ListItemIcon';
import Skeleton from '@mui/material/Skeleton';
import ListItemText from '@mui/material/ListItemText';
import ListItem from '@mui/material/ListItem';
import makeStyles from '@mui/styles/makeStyles';
import { Link } from 'react-router-dom';
import { FragmentRefs } from 'relay-runtime';
import Chip from '@mui/material/Chip';
import Typography from '@mui/material/Typography';
import { Theme } from '../../../../components/Theme';
import useQueryLoading from '../../../../utils/hooks/useQueryLoading';
import { MalwareAnalysesFilter, StixCyberObservableMalwareAnalysesQuery } from './__generated__/StixCyberObservableMalwareAnalysesQuery.graphql';
import ItemIcon from '../../../../components/ItemIcon';
import ItemAuthor from '../../../../components/ItemAuthor';
import FieldOrEmpty from '../../../../components/FieldOrEmpty';
import { useFormatter } from '../../../../components/i18n';
import { MalwareAnalysesOrdering } from '../../analysis/malware_analyses/__generated__/MalwareAnalysesLinesPaginationQuery.graphql';
import { StixCyberObservableMalwareAnalyses_data$key } from './__generated__/StixCyberObservableMalwareAnalyses_data.graphql';

const useStyles = makeStyles<Theme>((theme) => ({
  bodyItem: {
    float: 'left',
    height: 35,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    marginRight: 10,
  },
  item: {
    minHeight: 50,
    maxHeight: 50,
    paddingRight: 0,
  },
  itemIcon: {
    marginRight: 0,
    color: theme.palette.primary.main,
  },
  result_name: {
    width: '50%',
  },
  createdBy: {
    width: '20%',
  },
  submitted: {
    width: '20%',
  },
  result: {
    width: '10%',
  },
  chip: {
    fontSize: 12,
    lineHeight: '12px',
    height: 25,
    marginRight: 7,
    textTransform: 'uppercase',
    borderRadius: '0',
    width: 100,
  },
}));

interface StixCyberObservableMalwareAnalysesComponentProps {
  stixCyberObservableId: string
}

interface StixCyberObservableMalwareAnalysesListProps {
  queryRef: PreloadedQuery<StixCyberObservableMalwareAnalysesQuery>
}

const query = graphql`
  query StixCyberObservableMalwareAnalysesQuery(
    $filters: [MalwareAnalysesFiltering!]
  ) {
    malwareAnalyses(filters: $filters) {
      edges {
        node {
          ... StixCyberObservableMalwareAnalyses_data
        }
      }
    }
  }
`;

const fragment = graphql`
  fragment StixCyberObservableMalwareAnalyses_data on MalwareAnalysis {
    id
    result_name
    submitted
    entity_type
    createdBy {
      ... on Identity {
        name
      }
    }
    result
  }
`;

interface StixCyberObservableMalwareAnalysesListLineProps {
  malwareAnalysisNode: StixCyberObservableMalwareAnalyses_data$key
}

const StixCyberObservableMalwareAnalysesListLine: FunctionComponent<StixCyberObservableMalwareAnalysesListLineProps> = ({ malwareAnalysisNode }) => {
  const classes = useStyles();
  const malwareAnalysis = useFragment(fragment, malwareAnalysisNode);
  const { fd } = useFormatter();

  return (
    <ListItem
      key={malwareAnalysis.id}
      classes={{ root: classes.item }}
      divider={true}
      component={Link}
      to={`/dashboard/analysis/malware_analyses/${malwareAnalysis.id}`}
    >
      <ListItemIcon classes={{ root: classes.itemIcon }}>
        <ItemIcon type={malwareAnalysis.entity_type}/>
      </ListItemIcon>
      <ListItemText
        primary={
          <div>
            <div
              className={classes.bodyItem}
              style={{ width: '30%' }}
            >
              {malwareAnalysis.result_name}
            </div>
            <div
              className={classes.bodyItem}
              style={{ width: '20%' }}
            >
              <ItemAuthor createdBy={malwareAnalysis.createdBy} />

            </div>
            <div
              className={classes.bodyItem}
              style={{ width: '20%' }}
            >
              {fd(malwareAnalysis.submitted)}
            </div>
            <div
              className={classes.bodyItem}
              style={{ width: '20%' }}
            >
              <FieldOrEmpty source={malwareAnalysis.result}>
                <Chip
                    key={malwareAnalysis.result}
                    classes={{ root: classes.chip }}
                    label={malwareAnalysis.result}
                />
              </FieldOrEmpty>
            </div>
          </div>
        }
      />
    </ListItem>
  );
};

const StixCyberObservableMalwareAnalysesList: FunctionComponent<StixCyberObservableMalwareAnalysesListProps> = ({ queryRef }) => {
  const { malwareAnalyses } = usePreloadedQuery<StixCyberObservableMalwareAnalysesQuery>(query, queryRef);

  return (
    <>
      {malwareAnalyses?.edges?.map((malwareAnalysisEdge) => <StixCyberObservableMalwareAnalysesListLine malwareAnalysisNode={malwareAnalysisEdge.node}/>)}
    </>
  );
};

const DummyStixCyberObservableMalwareAnalysesList: FunctionComponent = () => {
  const classes = useStyles();

  return (
    <>{Array(3).fill(0).map((index) => (
      <ListItem
        key={index}
        dense={true}
        divider={true}
      >
        <ListItemIcon classes={{ root: classes.itemIcon }}>
          <Skeleton
            animation="wave"
            variant="circular"
            width={30}
            height={30}
          />
        </ListItemIcon>
        <ListItemText
          primary={
            <Skeleton
              animation="wave"
              variant="rectangular"
              width="90%"
              height={15}
              style={{ marginBottom: 10 }}
            />
          }
          secondary={
            <Skeleton
              animation="wave"
              variant="rectangular"
              width="90%"
              height={15}
            />
          }
        />
      </ListItem>
    ))}</>
  );
};

export const StixCyberObservableMalwareAnalyses: FunctionComponent<StixCyberObservableMalwareAnalysesComponentProps> = ({ stixCyberObservableId }) => {
  // TODO give options the right type (StixCyberObservableMalwareAnalysesQuery$variables) and use the right MalwareAnalysesOrdering
  const options = {
    count: 5,
    orderBy: 'submitted' as MalwareAnalysesOrdering,
    filters: [
      { key: ['sample' as MalwareAnalysesFilter], values: [stixCyberObservableId] },
    ],
  };

  const queryRef = useQueryLoading<StixCyberObservableMalwareAnalysesQuery>(query, options);
  const { t } = useFormatter();

  return (
      <>
      <Typography variant="h3" gutterBottom={true} style={{ float: 'left' }}>
        {t('Malware Analyses run on this observable')}
      </Typography>
      <List style={{ marginTop: 15 }}>
        {queryRef && (
          <React.Suspense fallback={<DummyStixCyberObservableMalwareAnalysesList/>}>

            <StixCyberObservableMalwareAnalysesList queryRef={queryRef} />
          </React.Suspense>
        )}
      </List>
      </>
  );
};
