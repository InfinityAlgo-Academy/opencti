import React, { FunctionComponent } from 'react';
import { graphql, PreloadedQuery, useFragment, usePreloadedQuery } from 'react-relay';
import List from '@mui/material/List';
import ListItemIcon from '@mui/material/ListItemIcon';
import Skeleton from '@mui/material/Skeleton';
import ListItemText from '@mui/material/ListItemText';
import ListItem from '@mui/material/ListItem';
import makeStyles from '@mui/styles/makeStyles';
import { Link } from 'react-router-dom';
import { Theme } from '../../../../components/Theme';
import useQueryLoading from '../../../../utils/hooks/useQueryLoading';
import {
  StixCyberObservableMalwareAnalysesQuery,
  StixCyberObservableMalwareAnalysesQuery$variables,
} from './__generated__/StixCyberObservableMalwareAnalysesQuery.graphql';
import ItemIcon from '../../../../components/ItemIcon';
import { MalwareAnalysesFilter } from './__generated__/SCOMalwareAnalysesQuery.graphql';

const useStyles = makeStyles<Theme>((theme) => ({
  itemIcon: {
    color: theme.palette.primary.main,
  },
  submitted: {
    float: 'left',
    width: '20%',
    height: 20,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
  },
  result_name: {
    float: 'left',
    width: '50%',
    height: 20,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
  },
  created_at: {
    float: 'left',
    height: 20,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
  },
}));

interface StixCyberObservableMalwareAnalysesComponentProps {
  stixCyberObservableId: string
}

interface MalwareAnalysesTrucProps {
  queryRef: PreloadedQuery<StixCyberObservableMalwareAnalysesQuery>
}

const query = graphql`
  query StixCyberObservableMalwareAnalysesQuery(
    $filters: [MalwareAnalysesFiltering!]
  ) {
    malwareAnalyses(filters: $filters) {
      edges {
        node {
          ... StixCyberObservableMalwareAnalyses_data
        }
      }
    }
  }
`;

const fragment = graphql`
  fragment StixCyberObservableMalwareAnalyses_data on MalwareAnalysis {
    id
    result_name
    submitted
    entity_type
    created_at
  }
`;

const StixCyberObservableMalwareAnalysesList: FunctionComponent<MalwareAnalysesTrucProps> = ({ queryRef }) => {
  const { malwareAnalyses } = usePreloadedQuery<StixCyberObservableMalwareAnalysesQuery>(query, queryRef);
  const classes = useStyles(); // TODO

  return (
    malwareAnalyses?.edges?.map((malwareAnalysisEdge) => {
      const malwareAnalysis = useFragment(fragment, malwareAnalysisEdge.node);
      return (
        <ListItem
            key={malwareAnalysis.id}
            classes={{ root: classes.item }}
            divider={true}
            button={true}
            component={Link}
            to={`/dashboard/analysis/malware_analyses/${malwareAnalysis.id}`}
        >
          <ListItemIcon classes={{ root: classes.itemIcon }}>
            <ItemIcon type={malwareAnalysis.entity_type}/>
          </ListItemIcon>
          <ListItemText
              primary={
                <div>
                  <div
                      className={classes.bodyItem}
                      // style={classes.submitted}
                  >
                    {malwareAnalysis.submitted}
                  </div>
                  <div
                      className={classes.bodyItem}
                      // style={classes.result_name}
                  >
                    {malwareAnalysis.result_name}
                  </div>
                  <div
                      className={classes.bodyItem}
                      // style={classes.created_at}
                  >
                    {malwareAnalysis.created_at}
                  </div>
                </div>
              }
          />
        </ListItem>
      );
    })

  );
};

export const StixCyberObservableMalwareAnalyses: FunctionComponent<StixCyberObservableMalwareAnalysesComponentProps> = ({ stixCyberObservableId }) => {
  const classes = useStyles();

  const options: StixCyberObservableMalwareAnalysesQuery$variables = {
    filters: [
      { key: ['sample' as MalwareAnalysesFilter], values: [stixCyberObservableId] },
    ],
  };

  const queryRef = useQueryLoading<StixCyberObservableMalwareAnalysesQuery>(query, options);

  return (
    <List>
      {queryRef && (
        <React.Suspense fallback={
          <>{Array(3).fill(0).map((index) => (
            <ListItem
              key={index}
              dense={true}
              divider={true}
            >
              <ListItemIcon classes={{ root: classes.itemIcon }}>
                <Skeleton
                  animation="wave"
                  variant="circular"
                  width={30}
                  height={30}
                />
              </ListItemIcon>
              <ListItemText
                primary={
                  <Skeleton
                    animation="wave"
                    variant="rectangular"
                    width="90%"
                    height={15}
                    style={{ marginBottom: 10 }}
                  />
                }
                secondary={
                  <Skeleton
                    animation="wave"
                    variant="rectangular"
                    width="90%"
                    height={15}
                  />
                }
              />
            </ListItem>
          ))}</>
        }>
          <StixCyberObservableMalwareAnalysesList queryRef={queryRef}/>
        </React.Suspense>
      )}
    </List>
  );
};
