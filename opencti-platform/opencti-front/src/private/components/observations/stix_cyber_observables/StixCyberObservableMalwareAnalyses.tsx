import React, { FunctionComponent } from 'react';
import { graphql, PreloadedQuery, useFragment, usePreloadedQuery } from 'react-relay';
import List from '@mui/material/List';
import ListItemIcon from '@mui/material/ListItemIcon';
import Skeleton from '@mui/material/Skeleton';
import ListItemText from '@mui/material/ListItemText';
import ListItem from '@mui/material/ListItem';
import makeStyles from '@mui/styles/makeStyles';
import { Link } from 'react-router-dom';
import { FragmentRefs } from 'relay-runtime';
import { Theme } from '../../../../components/Theme';
import useQueryLoading from '../../../../utils/hooks/useQueryLoading';
import {
  StixCyberObservableMalwareAnalysesQuery,
  StixCyberObservableMalwareAnalysesQuery$variables,
} from './__generated__/StixCyberObservableMalwareAnalysesQuery.graphql';
import ItemIcon from '../../../../components/ItemIcon';
import { MalwareAnalysesFilter } from './__generated__/SCOMalwareAnalysesQuery.graphql';
import {
  StixCyberObservableMalwareAnalyses_data$data,
} from './__generated__/StixCyberObservableMalwareAnalyses_data.graphql';

const useStyles = makeStyles<Theme>((theme) => ({
  bodyItem: {
    float: 'left',
    height: 20,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    marginRight: 10,
  },
  itemIcon: {
    color: theme.palette.primary.main,
  },
  result_name: {
    width: '40%',
  },
  createdBy: {
    width: '20%',
  },
  submitted: {
    width: '20%',
  },
  result: {
    width: '10%',
  },
}));

interface StixCyberObservableMalwareAnalysesComponentProps {
  stixCyberObservableId: string
}

interface StixCyberObservableMalwareAnalysesListProps {
  queryRef: PreloadedQuery<StixCyberObservableMalwareAnalysesQuery>
}

const query = graphql`
  query StixCyberObservableMalwareAnalysesQuery(
    $filters: [MalwareAnalysesFiltering!]
  ) {
    malwareAnalyses(filters: $filters) {
      edges {
        node {
          ... StixCyberObservableMalwareAnalyses_data
        }
      }
    }
  }
`;

const fragment = graphql`
  fragment StixCyberObservableMalwareAnalyses_data on MalwareAnalysis {
    id
    result_name
    submitted
    entity_type
    createdBy {
      ... on Identity {
        name
      }
    }
    result
  }
`;

interface StixCyberObservableMalwareAnalysesListLineProps {
  malwareAnalysisNode: FragmentRefs<'StixCyberObservableMalwareAnalyses_data'>
}

const StixCyberObservableMalwareAnalysesListLine: FunctionComponent<StixCyberObservableMalwareAnalysesListLineProps> = ({ malwareAnalysisNode }) => {
  const classes = useStyles();
  const malwareAnalysis = useFragment(fragment, malwareAnalysisNode);

  return (
    <ListItem
      key={malwareAnalysis.id}
      classes={{ root: classes.item }}
      divider={true}
      component={Link}
      to={`/dashboard/analysis/malware_analyses/${malwareAnalysis.id}`}
    >
      <ListItemIcon classes={{ root: classes.itemIcon }}>
        <ItemIcon type={malwareAnalysis.entity_type}/>
      </ListItemIcon>
      <ListItemText
        primary={
          <div>
            <div
              className={classes.bodyItem}
              style={{ width: classes.result_name.width, marginRight: 10 }}
            >
              {malwareAnalysis.result_name}
            </div>
            <div
              className={classes.bodyItem}
              style={{ width: classes.createdBy.width, marginRight: 10 }}
            >
              {malwareAnalysis.createdBy?.name}
            </div>
            <div
              className={classes.bodyItem}
              style={{ width: classes.submitted.width }}
            >
              {malwareAnalysis.submitted}
            </div>
            <div
              className={classes.bodyItem}
              style={{ width: classes.result.width }}
            >
              {malwareAnalysis.result}
            </div>
          </div>
        }
      />
    </ListItem>
  );
};

const StixCyberObservableMalwareAnalysesList: FunctionComponent<StixCyberObservableMalwareAnalysesListProps> = ({ queryRef }) => {
  const { malwareAnalyses } = usePreloadedQuery<StixCyberObservableMalwareAnalysesQuery>(query, queryRef);

  return (
    <>
      {malwareAnalyses?.edges?.map((malwareAnalysisEdge) => <StixCyberObservableMalwareAnalysesListLine malwareAnalysisNode={malwareAnalysisEdge.node}/>)}
    </>
  );
};

const DummyStixCyberObservableMalwareAnalysesList: FunctionComponent = () => {
  const classes = useStyles();

  return (
    <>{Array(3).fill(0).map((index) => (
      <ListItem
        key={index}
        dense={true}
        divider={true}
      >
        <ListItemIcon classes={{ root: classes.itemIcon }}>
          <Skeleton
            animation="wave"
            variant="circular"
            width={30}
            height={30}
          />
        </ListItemIcon>
        <ListItemText
          primary={
            <Skeleton
              animation="wave"
              variant="rectangular"
              width="90%"
              height={15}
              style={{ marginBottom: 10 }}
            />
          }
          secondary={
            <Skeleton
              animation="wave"
              variant="rectangular"
              width="90%"
              height={15}
            />
          }
        />
      </ListItem>
    ))}</>
  );
};

export const StixCyberObservableMalwareAnalyses: FunctionComponent<StixCyberObservableMalwareAnalysesComponentProps> = ({ stixCyberObservableId }) => {
  const options: StixCyberObservableMalwareAnalysesQuery$variables = {
    filters: [
      { key: ['sample' as MalwareAnalysesFilter], values: [stixCyberObservableId] },
    ],
  };

  const queryRef = useQueryLoading<StixCyberObservableMalwareAnalysesQuery>(query, options);

  return (
    <List>
      {queryRef && (
        <React.Suspense fallback={<DummyStixCyberObservableMalwareAnalysesList/>}>
          <StixCyberObservableMalwareAnalysesList queryRef={queryRef}/>
        </React.Suspense>
      )}
    </List>
  );
};
