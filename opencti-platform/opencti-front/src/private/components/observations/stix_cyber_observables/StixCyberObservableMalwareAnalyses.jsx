import React, { Component } from 'react';
import * as PropTypes from 'prop-types';
import { compose } from 'ramda';
import { graphql, QueryRenderer } from 'react-relay';
import { Link } from 'react-router-dom';
import withStyles from '@mui/styles/withStyles';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemIcon from '@mui/material/ListItemIcon';
import ListItemText from '@mui/material/ListItemText';
import Typography from '@mui/material/Typography';
import Skeleton from '@mui/material/Skeleton';
import inject18n from '../../../../components/i18n';
import ItemIcon from '../../../../components/ItemIcon';

const styles = (theme) => ({
  itemHead: {
    paddingLeft: 10,
    textTransform: 'uppercase',
    cursor: 'pointer',
  },
  item: {
    paddingLeft: 10,
    height: 50,
  },
  bodyItem: {
    height: '100%',
    fontSize: 13,
  },
  itemIcon: {
    color: theme.palette.primary.main,
  },
  goIcon: {
    position: 'absolute',
    right: -10,
  },
  inputLabel: {
    float: 'left',
  },
  sortIcon: {
    float: 'left',
    margin: '-5px 0 0 15px',
  },
  createButton: {
    float: 'left',
    marginTop: -15,
  },
});

const inlineStyles = {
  submitted: {
    float: 'left',
    width: '20%',
    height: 20,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
  },
  result_name: {
    float: 'left',
    width: '50%',
    height: 20,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
  },
  created_at: {
    float: 'left',
    height: 20,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
  },
};

const stixCyberObservableMalwareAnalysesQuery = graphql`
  query StixCyberObservableMalwareAnalysesQuery(
    $first: Int
    $orderBy: MalwareAnalysesOrdering
    $orderMode: OrderingMode
#    $filters: [MalwareAnalysesFiltering]
  ) {
    malwareAnalyses(
      first: $first
      orderBy: $orderBy
      orderMode: $orderMode
#      filters: $filters
    ) {
      edges {
        node {
          id
          entity_type
          result_name
          product
          submitted
          createdBy {
            ... on Identity {
              id
              name
              entity_type
            }
          }
          objectMarking {
            edges {
              node {
                id
                definition_type
                definition
                x_opencti_order
                x_opencti_color
              }
            }
          }
        }
      }
    }
  }
`;

class StixCyberObservableMalwareAnalysesComponent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      anchorEl: null,
      displayPromoteStix: false,
      displayCreate: false,
      promotingStix: false,
      deleted: [],
    };
    this.indicatorParams = { first: 200 };
  }

  render() {
    const { t, fd, classes, stixCyberObservable } = this.props;
    const filters = [];
    // TODO Add proper filter
    return (
        <div style={{ marginTop: 20 }}>
          <Typography variant="h3" gutterBottom={true} style={{ float: 'left' }}>
            {t('Malware Analyses run on this observable')}
          </Typography>
          <div className="clearfix" />
          <QueryRenderer
              query={stixCyberObservableMalwareAnalysesQuery}
              variables={{
                first: 8,
                orderBy: 'submitted',
                orderMode: 'desc',
                filters,
              }}
              render={({ props }) => {
                if (props && props.malwareAnalyses) {
                  if (props.malwareAnalyses.edges.length > 0) {
                    return (
                        <List style={{ marginTop: -15 }}>
                            {props.malwareAnalyses.edges.map((malwareAnalysisEdge) => {
                              return (
                                        <ListItem
                                            key={malwareAnalysisEdge.node.id}
                                            classes={{ root: classes.item }}
                                            divider={true}
                                            button={true}
                                            component={Link}
                                            to={`/dashboard/analysis/malware_analyses/${malwareAnalysisEdge.node.id}`}
                                        >
                                            <ListItemIcon classes={{ root: classes.itemIcon }}>
                                                <ItemIcon type={malwareAnalysisEdge.node.entity_type}/>
                                            </ListItemIcon>
                                            <ListItemText
                                                primary={
                                                    <div>
                                                        <div
                                                            className={classes.bodyItem}
                                                            style={inlineStyles.submitted}
                                                        >
                                                            {malwareAnalysisEdge.node.submitted}
                                                        </div>
                                                        <div
                                                            className={classes.bodyItem}
                                                            style={inlineStyles.result_name}
                                                        >
                                                            {malwareAnalysisEdge.node.result_name}
                                                        </div>
                                                        <div
                                                            className={classes.bodyItem}
                                                            style={inlineStyles.created_at}
                                                        >
                                                            {fd(malwareAnalysisEdge.node.created_at)}
                                                        </div>
                                                    </div>
                                                }
                                            />
                                        </ListItem>
                              );
                            })}
                        </List>
                    );
                  }
                  return (
                      <div
                          style={{
                            display: 'table',
                            height: '100%',
                            width: '100%',
                            paddingTop: 15,
                            paddingBottom: 15,
                          }}
                      >
                    <span
                        style={{
                          display: 'table-cell',
                          verticalAlign: 'middle',
                          textAlign: 'center',
                        }}
                    >
                      {t('No reports about this entity.')}
                    </span>
                      </div>
                  );
                }
                return (
                    <List>
                      {Array.from(Array(5), (e, i) => (
                          <ListItem
                              key={i}
                              dense={true}
                              divider={true}
                              button={false}
                          >
                            <ListItemIcon classes={{ root: classes.itemIcon }}>
                              <Skeleton
                                  animation="wave"
                                  variant="circular"
                                  width={30}
                                  height={30}
                              />
                            </ListItemIcon>
                            <ListItemText
                                primary={
                                  <Skeleton
                                      animation="wave"
                                      variant="rectangular"
                                      width="90%"
                                      height={15}
                                      style={{ marginBottom: 10 }}
                                  />
                                }
                                secondary={
                                  <Skeleton
                                      animation="wave"
                                      variant="rectangular"
                                      width="90%"
                                      height={15}
                                  />
                                }
                            />
                          </ListItem>
                      ))}
                    </List>
                );
              }}
              />
        </div>
    );
  }
}

StixCyberObservableMalwareAnalysesComponent.propTypes = {
  stixCyberObservable: PropTypes.object,
  classes: PropTypes.object,
  t: PropTypes.func,
  fd: PropTypes.func,
  history: PropTypes.object,
};

/* const StixCyberObservableMalwareAnalyses = createFragmentContainer(
  StixCyberObservableMalwareAnalysesComponent,
  {
    stixCyberObservable: graphql`
        fragment StixCyberObservableIndicators_stixCyberObservable on StixCyberObservable
        @argumentDefinitions(first: { type: "Int", defaultValue: 200 }) {
          id
          observable_value
          parent_types
          entity_type
          indicators(first: $first) {
            edges {
              node {
                id
                entity_type
                parent_types
                name
                created_at
                updated_at
                pattern_type
              }
            }
          }
        }
      `,
  },
); */

export default compose(
  inject18n,
  withStyles(styles),
)(StixCyberObservableMalwareAnalysesComponent);
