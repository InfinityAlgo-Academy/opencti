import React, { Component } from 'react';
import * as PropTypes from 'prop-types';
import { compose, filter, includes } from 'ramda';
import { createFragmentContainer, graphql } from 'react-relay';
import { Link } from 'react-router-dom';
import withStyles from '@mui/styles/withStyles';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemIcon from '@mui/material/ListItemIcon';
import ListItemText from '@mui/material/ListItemText';
import Typography from '@mui/material/Typography';
import inject18n from '../../../../components/i18n';
import ItemIcon from '../../../../components/ItemIcon';
import ItemPatternType from '../../../../components/ItemPatternType';

const styles = (theme) => ({
  itemHead: {
    paddingLeft: 10,
    textTransform: 'uppercase',
    cursor: 'pointer',
  },
  item: {
    paddingLeft: 10,
    height: 50,
  },
  bodyItem: {
    height: '100%',
    fontSize: 13,
  },
  itemIcon: {
    color: theme.palette.primary.main,
  },
  goIcon: {
    position: 'absolute',
    right: -10,
  },
  inputLabel: {
    float: 'left',
  },
  sortIcon: {
    float: 'left',
    margin: '-5px 0 0 15px',
  },
  createButton: {
    float: 'left',
    marginTop: -15,
  },
});

const inlineStyles = {
  pattern_type: {
    float: 'left',
    width: '20%',
    height: 20,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
  },
  observable_value: {
    float: 'left',
    width: '50%',
    height: 20,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
  },
  created_at: {
    float: 'left',
    height: 20,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
  },
};

class StixCyberObservableMalwareAnalysesComponent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      anchorEl: null,
      displayPromoteStix: false,
      displayCreate: false,
      promotingStix: false,
      deleted: [],
    };
    this.indicatorParams = { first: 200 };
  }

  render() {
    const { t, fd, classes, stixCyberObservable } = this.props;
    return (
        <div style={{ marginTop: 20 }}>
          <Typography variant="h3" gutterBottom={true} style={{ float: 'left' }}>
            {t('Malware Analyses run on this observable')}
          </Typography>
          <div className="clearfix" />
          <List style={{ marginTop: -15 }}>
            {filter(
              (n) => !includes(n.node.id, this.state.deleted),
              stixCyberObservable.indicators.edges,
            ).map((indicatorEdge) => (
                <ListItem
                    key={indicatorEdge.node.id}
                    classes={{ root: classes.item }}
                    divider={true}
                    button={true}
                    component={Link}
                    to={`/dashboard/observations/indicators/${indicatorEdge.node.id}`}
                >
                  <ListItemIcon classes={{ root: classes.itemIcon }}>
                    <ItemIcon type={indicatorEdge.node.entity_type} />
                  </ListItemIcon>
                  <ListItemText
                      primary={
                        <div>
                          <div
                              className={classes.bodyItem}
                              style={inlineStyles.pattern_type}
                          >
                            <ItemPatternType
                                label={indicatorEdge.node.pattern_type}
                                variant="inList"
                            />
                          </div>
                          <div
                              className={classes.bodyItem}
                              style={inlineStyles.observable_value}
                          >
                            {indicatorEdge.node.name}
                          </div>
                          <div
                              className={classes.bodyItem}
                              style={inlineStyles.created_at}
                          >
                            {fd(indicatorEdge.node.created_at)}
                          </div>
                        </div>
                      }
                  />
                </ListItem>
            ))}
          </List>
        </div>
    );
  }
}

StixCyberObservableMalwareAnalysesComponent.propTypes = {
  stixCyberObservable: PropTypes.object,
  classes: PropTypes.object,
  t: PropTypes.func,
  fd: PropTypes.func,
  history: PropTypes.object,
};

const StixCyberObservableMalwareAnalyses = createFragmentContainer(
  StixCyberObservableMalwareAnalysesComponent,
  {
    stixCyberObservable: graphql`
        fragment StixCyberObservableIndicators_stixCyberObservable on StixCyberObservable
        @argumentDefinitions(first: { type: "Int", defaultValue: 200 }) {
          id
          observable_value
          parent_types
          entity_type
          indicators(first: $first) {
            edges {
              node {
                id
                entity_type
                parent_types
                name
                created_at
                updated_at
                pattern_type
              }
            }
          }
        }
      `,
  },
);

export default compose(
  inject18n,
  withStyles(styles),
)(StixCyberObservableMalwareAnalyses);
