import React, { FunctionComponent, useState } from 'react';
import { graphql, PreloadedQuery, usePreloadedQuery } from 'react-relay';
import Typography from '@mui/material/Typography';
import IconButton from '@mui/material/IconButton';
import { Close } from '@mui/icons-material';
import makeStyles from '@mui/styles/makeStyles';
import Box from '@mui/material/Box';
import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import { SubscriptionAvatars } from '../../../../components/Subscription';
import { Theme } from '../../../../components/Theme';
import { useFormatter } from '../../../../components/i18n';
import ErrorNotFound from '../../../../components/ErrorNotFound';
import MalwareAnalysisEditionOverview from './MalwareAnalysisEditionOverview';
import { MalwareAnalysisEditionContainerQuery } from './__generated__/MalwareAnalysisEditionContainerQuery.graphql';
import MalwareAnalysisEditionDetails from './MalwareAnalysisEditionDetails';
import { useIsEnforceReference } from '../../../../utils/hooks/useEntitySettings';

const useStyles = makeStyles<Theme>((theme) => ({
  header: {
    backgroundColor: theme.palette.background.nav,
    padding: '20px 20px 20px 60px',
  },
  closeButton: {
    position: 'absolute',
    top: 12,
    left: 5,
    color: 'inherit',
  },
  importButton: {
    position: 'absolute',
    top: 15,
    right: 20,
  },
  container: {
    padding: '10px 20px 20px 20px',
  },
  appBar: {
    width: '100%',
    zIndex: theme.zIndex.drawer + 1,
    borderBottom: '1px solid #5c5c5c',
  },
  title: {
    float: 'left',
  },
}));

interface MalwareAnalysisEditionContainerProps {
  queryRef: PreloadedQuery<MalwareAnalysisEditionContainerQuery>
  handleClose: () => void,
}
export const malwareAnalysisEditionQuery = graphql`
    query MalwareAnalysisEditionContainerQuery($id: String!) {
        malwareAnalysis(id: $id) {
            ...MalwareAnalysisEditionOverview_malwareAnalysis
            ...MalwareAnalysisEditionDetails_malwareAnalysis
            editContext {
                name
                focusOn
            }
        }
    }
`;
const MalwareAnalysisEditionContainer: FunctionComponent<MalwareAnalysisEditionContainerProps> = ({ queryRef, handleClose }) => {
  const classes = useStyles();
  const { t } = useFormatter();

  const queryData = usePreloadedQuery(malwareAnalysisEditionQuery, queryRef);

  const [currentTab, setCurrentTab] = useState(0);
  const handleChangeTab = (event: React.SyntheticEvent, value: number) => setCurrentTab(value);

  if (queryData.malwareAnalysis === null) {
    return (<ErrorNotFound />);
  }
  return (
        <div>
            <div className={classes.header}>
                <IconButton
                    aria-label="Close"
                    className={classes.closeButton}
                    onClick={handleClose}
                    size="large"
                    color="primary"
                >
                    <Close fontSize="small" color="primary" />
                </IconButton>
                <Typography variant="h6" classes={{ root: classes.title }}>
                    {t('Update a malware analysis')}
                </Typography>
                <SubscriptionAvatars context={queryData.malwareAnalysis.editContext} />
                <div className="clearfix" />
            </div>
            <div className={classes.container}>
                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
                    <Tabs
                        value={currentTab}
                        onChange={handleChangeTab}
                    >
                        <Tab label={t('Overview')} />
                        <Tab label={t('Details')} />
                    </Tabs>
                </Box>
                {currentTab === 0 && (
                    <MalwareAnalysisEditionOverview
                        malwareAnalysisRef={queryData.malwareAnalysis}
                        context={queryData.malwareAnalysis.editContext}
                        enableReferences={useIsEnforceReference('Malware-Analysis')}
                        handleClose={handleClose}
                    />
                )}
                {currentTab === 1 && (
                <MalwareAnalysisEditionDetails
                    malwareAnalysisRef={queryData.malwareAnalysis}
                    context={queryData.malwareAnalysis.editContext}
                    enableReferences={useIsEnforceReference('Malware-Analysis')}
                    handleClose={handleClose}
                />
                )}
            </div>
        </div>
  );
};

export default MalwareAnalysisEditionContainer;
