import makeStyles from '@mui/styles/makeStyles';
import { graphql, useMutation } from 'react-relay';
import * as Yup from 'yup';
import React, { FunctionComponent, useState } from 'react';
import { FormikConfig } from 'formik/dist/types';
import Fab from '@mui/material/Fab';
import { Add, Close } from '@mui/icons-material';
import Drawer from '@mui/material/Drawer';
import IconButton from '@mui/material/IconButton';
import Typography from '@mui/material/Typography';
import { Field, Form, Formik } from 'formik';
import Button from '@mui/material/Button';
import { RecordSourceSelectorProxy } from 'relay-runtime';
import { useFormatter } from '../../../../components/i18n';
import { insertNode } from '../../../../utils/store';
import TextField from '../../../../components/TextField';
import CreatedByField from '../../common/form/CreatedByField';
import ObjectMarkingField from '../../common/form/ObjectMarkingField';
import { Theme } from '../../../../components/Theme';
import {
  MalwareAnalysesLinesPaginationQuery$variables as MalwareAnalysisQueryVariables,
} from './__generated__/MalwareAnalysesLinesPaginationQuery.graphql';
import {
  MalwareAnalysisCreationMutation,
  MalwareAnalysisCreationMutation$variables as MalwareAnalysisMutationVariables,
} from './__generated__/MalwareAnalysisCreationMutation.graphql';
import DateTimePickerField from '../../../../components/DateTimePickerField';
import ObjectLabelField from '../../common/form/ObjectLabelField';
import OpenVocabField from '../../common/form/OpenVocabField';
import { fieldSpacingContainerStyle } from '../../../../utils/field';
import { ExternalReferencesField } from '../../common/form/ExternalReferencesField';
import ObjectAssigneeField from '../../common/form/ObjectAssigneeField';
import ConfidenceField from '../../common/form/ConfidenceField';
import { useSchemaCreationValidation } from '../../../../utils/hooks/useEntitySettings';
import { Option } from '../../common/form/ReferenceField';
import { handleErrorInForm } from '../../../../relay/environment';
import useDefaultValues from '../../../../utils/hooks/useDefaultValues';

const useStyles = makeStyles<Theme>((theme) => ({
  drawerPaper: {
    minHeight: '100vh',
    width: '50%',
    position: 'fixed',
    transition: theme.transitions.create('width', {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.enteringScreen,
    }),
    padding: 0,
  },
  createButton: {
    position: 'fixed',
    bottom: 30,
    right: 30,
  },
  buttons: {
    marginTop: 20,
    textAlign: 'right',
  },
  button: {
    marginLeft: theme.spacing(2),
  },
  header: {
    backgroundColor: theme.palette.background.nav,
    padding: '20px 20px 20px 60px',
  },
  closeButton: {
    position: 'absolute',
    top: 12,
    left: 5,
    color: 'inherit',
  },
  importButton: {
    position: 'absolute',
    top: 15,
    right: 20,
  },
  container: {
    padding: '10px 20px 20px 20px',
  },
}));

const malwareAnalysisMutation = graphql`
    mutation MalwareAnalysisCreationMutation(
        $input: MalwareAnalysisAddInput!
    ) {
        malwareAnalysisAdd(input: $input) {
            ...MalwareAnalysisLine_node
        }
    }
`;

interface MalwareAnalysisAddInput {
  product: string
  result_name: string
  version: string
  createdBy?: Option
  objectLabel: Option[]
  submitted: Date | null
  result: string
  objectMarking: Option[]
  externalReferences: Option[]
  objectAssignee: Option[]
  confidence: number | undefined
}

interface MalwareAnalysisFormProps {
  updater: (store: RecordSourceSelectorProxy, key: string) => void
  onReset?: () => void
  onCompleted?: () => void
  inputValue?: string
  defaultCreatedBy?: Option
  defaultMarkingDefinitions?: Option[]
  defaultConfidence?: number
}

const MALWARE_ANALYSIS_TYPE = 'Malware-Analysis';

export const MalwareAnalysisCreationForm: FunctionComponent<MalwareAnalysisFormProps> = (
  { updater,
    onReset,
    inputValue,
    onCompleted,
    defaultConfidence,
    defaultCreatedBy,
    defaultMarkingDefinitions },
) => {
  const classes = useStyles();
  const { t } = useFormatter();
  const basicShape = {
    result_name: Yup.string().required(t('This field is required')),
    product: Yup.string().required(t('This field is required')),
    submitted: Yup.date().required(t('This field is required'))
      .typeError(t('The value must be a datetime (yyyy-MM-dd hh:mm (a|p)m)')),
    confidence: Yup.number(),
  };
  const malwareAnalysisValidator = useSchemaCreationValidation(MALWARE_ANALYSIS_TYPE, basicShape);
  const [commit] = useMutation<MalwareAnalysisCreationMutation>(malwareAnalysisMutation);
  const onSubmit: FormikConfig<MalwareAnalysisAddInput>['onSubmit'] = (
    values,
    {
      setSubmitting,
      resetForm,
      setErrors,
    },
  ) => {
    const finalValues: MalwareAnalysisMutationVariables['input'] = {
      result_name: values.result_name,
      product: values.product,
      version: values.version,
      createdBy: values.createdBy?.value,
      objectLabel: values.objectLabel.map((v) => v.value),
      submitted: values.submitted,
      result: values.result,
      objectMarking: values.objectMarking.map(({ value }) => value),
      confidence: parseInt(String(values.confidence), 10),
      objectAssignee: values.objectAssignee.map(({ value }) => value),
    };
    commit({
      variables: {
        input: finalValues,
      },
      updater: (store) => {
        if (updater) {
          updater(store, 'malwareAnalysisAdd');
        }
      },
      onError: (error: Error) => {
        handleErrorInForm(error, setErrors);
        setSubmitting(false);
      },
      onCompleted: () => {
        setSubmitting(false);
        resetForm();
        if (onCompleted) {
          onCompleted();
        }
      },
    });
  };

  const initialValues = useDefaultValues<MalwareAnalysisAddInput>(
    MALWARE_ANALYSIS_TYPE,
    {
      result_name: inputValue || '',
      product: '',
      version: '',
      createdBy: defaultCreatedBy,
      objectLabel: [],
      submitted: null,
      result: '',
      objectMarking: defaultMarkingDefinitions ?? [],
      externalReferences: [],
      objectAssignee: [],
      confidence: defaultConfidence,
    },
  );

  return <Formik<MalwareAnalysisAddInput>
        initialValues={initialValues}
        validationSchema={malwareAnalysisValidator}
        onSubmit={onSubmit}
        onReset={onReset}
    >
        {({
          submitForm,
          handleReset,
          isSubmitting,
          setFieldValue,
          values,
        }) => (
            <Form style={{ margin: '20px 0 20px 0' }}>
                <Field
                    component={TextField}
                    variant="standard"
                    name="product"
                    label={t('Product')}
                    fullWidth={true}
                />
                <Field
                    component={TextField}
                    variant="standard"
                    name="result_name"
                    label={t('Report name')}
                    fullWidth={true}
                    style={{ marginTop: 20 }}
                />
                <Field
                    component={TextField}
                    variant="standard"
                    name="version"
                    label={t('Version of the product')}
                    fullWidth={true}
                    style={{ marginTop: 20 }}
                />
                <Field
                    component={DateTimePickerField}
                    name="submitted"
                    TextFieldProps={{
                      label: t('Submission date'),
                      variant: 'standard',
                      fullWidth: true,
                      style: { marginTop: 20 },
                    }}
                />
                <OpenVocabField
                    label={t('Maliciousness')}
                    type="malware-result-ov"
                    name="result"
                    onChange={setFieldValue}
                    multiple={false}
                    containerStyle={fieldSpacingContainerStyle}
                />
                <ConfidenceField
                    containerStyle={fieldSpacingContainerStyle}
                    entityType="Malware-Analysis"
                />
                <ObjectAssigneeField
                    name="objectAssignee"
                    style={{ marginTop: 20, width: '100%' }}
                />
                <CreatedByField
                    name="createdBy"
                    style={{ marginTop: 20, width: '100%' }}
                    setFieldValue={setFieldValue}
                />
                <ObjectLabelField
                    name="objectLabel"
                    style={{ marginTop: 20 }}
                    setFieldValue={setFieldValue}
                    values={values.objectLabel}
                />
                <ObjectMarkingField
                    name="objectMarking"
                    style={{ marginTop: 20, width: '100%' }}
                />
                <ExternalReferencesField
                    name="externalReferences"
                    style={{ marginTop: 20, width: '100%' }}
                    setFieldValue={setFieldValue}
                    values={values.externalReferences}
                />
                <div className={classes.buttons}>
                    <Button
                        variant="contained"
                        onClick={handleReset}
                        disabled={isSubmitting}
                        classes={{ root: classes.button }}
                    >
                        {t('Cancel')}
                    </Button>
                    <Button
                        variant="contained"
                        color="secondary"
                        onClick={submitForm}
                        disabled={isSubmitting}
                        classes={{ root: classes.button }}
                    >
                        {t('Create')}
                    </Button>
                </div>
            </Form>
        )}
    </Formik>;
};

const MalwareAnalysisCreation = ({ paginationOptions }: { paginationOptions: MalwareAnalysisQueryVariables }) => {
  const classes = useStyles();
  const { t } = useFormatter();

  const [open, setOpen] = useState<boolean>(false);
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);
  const updater = (store: RecordSourceSelectorProxy) => insertNode(
    store,
    'Pagination_malwareAnalyses',
    paginationOptions,
    'malwareAnalysisAdd',
  );

  const renderClassic = () => (
        <div>
            <Fab
                onClick={handleOpen}
                color="secondary"
                aria-label="Add"
                className={classes.createButton}
            >
                <Add />
            </Fab>
            <Drawer
                open={open}
                anchor="right"
                elevation={1}
                sx={{ zIndex: 1202 }}
                classes={{ paper: classes.drawerPaper }}
                onClose={handleClose}
            >
                <div className={classes.header}>
                    <IconButton
                        aria-label="Close"
                        className={classes.closeButton}
                        onClick={handleClose}
                        size="large"
                        color="primary"
                    >
                        <Close fontSize="small" color="primary" />
                    </IconButton>
                    <Typography variant="h6">{t('Create a malware analysis')}</Typography>
                </div>
                <div className={classes.container}>
                    <MalwareAnalysisCreationForm updater={updater}
                                               onCompleted={handleClose} onReset={handleClose}/>
                </div>
            </Drawer>
        </div>
  );
  return renderClassic();
};

export default MalwareAnalysisCreation;
