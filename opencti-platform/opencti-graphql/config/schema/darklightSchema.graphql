directive @auth(for: [Capabilities] = [], and: Boolean = false) on OBJECT | FIELD_DEFINITION

directive @constraint(minLength: Int, maxLength: Int, startsWith: String, endsWith: String, notContains: String, pattern: String, format: String, min: Int, max: Int, exclusiveMin: Int, exclusiveMax: Int, multipleOf: Int) on INPUT_FIELD_DEFINITION

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""
Captures identifying information about an account.  The Account class is an
extension to NIST-7693 that was "missing". The relationship with other Account
classes from other ontologies will likely be established here.
"""
interface AccountAsset {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  asset_id: String
  name: String!
  description: String
  locations: [AssetLocation]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
  asset_tag: String
  asset_type: AssetType!
  serial_number: String
  vendor_name: String
  version: String
  release_date: DateTime
  implementation_point: ImplementationPoint!
  operational_status: OperationalStatus!
}

type AckDetails {
  rate: Float
}

"""
Defines identifying information about an assessment or related process that can
be performed. In the assessment plan, this is an intended activity which may be
associated with an assessment task. In the assessment results, this an activity
that was actually performed as part of an assessment.
"""
type Activity implements BasicObject & LifecycleObject & CoreObject & OscalObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies the name for the activity."""
  name: String!

  """Identifies a human-readable description of the activity."""
  description: String!

  """
  Identifies the person or organization responsible for performing a specific role related to the task.
  """
  responsible_roles: [OscalResponsibleParty]
}

"""
Defines identifying information about an actor that produces an observation, a finding, or a risk.
"""
type Actor {
  """
  Identifies a reference to the tool or person based on the associated type.
  """
  actor: PartyOrComponent!

  """Identifies the kind of actor"""
  actor_type: ActorType!

  """
  For a party, this can optionally be used to specify the role the actor was performing.
  """
  role: OscalRole

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection
}

type ActorConnection {
  pageInfo: PageInfo!
  edges: [ActorEdge]
}

type ActorEdge {
  cursor: String!
  node: Actor!
}

enum ActorsFilter {
  actor_type
}

input ActorsFiltering {
  key: ActorsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum ActorsOrdering {
  actor_type
}

"""Defines the types of actors"""
enum ActorType {
  """A reference to a tool component defined with the assessment assets."""
  tool

  """
  A reference to an assessment-platform defined with the assessment assets.
  """
  assessment_platform

  """
  A reference to an assessment-platform defined with the assessment assets.
  """
  party
}

type AppDebugDistribution {
  label: String!
  value: Int
}

type AppDebugStatistics {
  objects: [AppDebugDistribution]
  relationships: [AppDebugDistribution]
}

"""Retrieve the application information version add dependencies"""
type AppInfo {
  """The OpenCTI aplication version"""
  version: String!

  """The OpenCTI api current memory usage"""
  memory: AppMemory

  """The list of OpenCTI software dependencies"""
  dependencies: [DependencyVersion!]!

  """The objects statistics"""
  debugStats: AppDebugStatistics
}

"""
Defines identifying information about an instance of application software.
"""
type ApplicationSoftwareAsset implements BasicObject & LifecycleObject & CoreObject & Asset & ItAsset {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  asset_id: String
  name: String!
  description: String
  locations: [AssetLocation]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
  asset_tag: String
  asset_type: AssetType!
  serial_number: String
  vendor_name: String
  version: String
  release_date: DateTime
  implementation_point: ImplementationPoint!
  operational_status: OperationalStatus!
  function: String
  cpe_identifier: String
  software_identifier: String
  patch_level: String
  installation_id: String
  license_key: String
}

input ApplicationSoftwareAssetAddInput {
  labels: [String]
  asset_id: String
  name: String!
  description: String
  asset_tag: String
  asset_type: AssetType!
  serial_number: String
  vendor_name: String
  version: String
  release_date: DateTime
  implementation_point: ImplementationPoint!
  operational_status: OperationalStatus!
  function: String
  cpe_identifier: String
  software_identifier: String
  patch_level: String
  installation_id: String
  license_key: String
}

"""
NodeJs memory.
https://nodejs.org/api/process.html#process_process_memoryusage
https://nodejs.org/docs/latest-v11.x/api/v8.html#v8_v8_getheapstatistics
"""
type AppMemory {
  rss: Float
  heapTotal: Float
  heapUsed: Float
  external: Float
  arrayBuffers: Float
  total_heap_size: Float
  total_heap_size_executable: Float
  total_physical_size: Float
  total_available_size: Float
  used_heap_size: Float
  heap_size_limit: Float
  malloced_memory: Float
  peak_malloced_memory: Float
  does_zap_garbage: Float
}

type Artifact implements BasicObject & StixObject & StixCoreObject & StixCyberObservable & HashedObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  hashes: [Hash]
  mime_type: String
  payload_bin: String
  url: String
  encryption_algorithm: String
  decryption_key: String
  x_opencti_additional_names: [String]
  importFiles(first: Int): FileConnection
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input ArtifactAddInput {
  hashes: [HashInput]
  mime_type: String
  payload_bin: String
  url: String
  encryption_algorithm: String
  decryption_key: String
  x_opencti_additional_names: [String]
}

"""
Defines the identifying information about the system elements being assessed,
such as components, inventory items, and locations. In the assessment plan, this
identifies a planned assessment subject. In the assessment results this is an
actual assessment subject, and reflects any changes from the plan. exactly what
will be the focus of this assessment. Any subjects not identified in this way
are out-of-scope.
"""
type AssessmentSubject {
  """
  Indicates the type of assessment subject, such as a component, inventory,
  item, location, or party represented by this selection statement.
  """
  subject_type: SubjectType!

  """
  Identifies a human-readable description of the collection of subjects being included in this assessment.
  """
  description: String

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Indicates to include all subjects."""
  include_all: Boolean!

  """Identifies a set of assessment subjects to include"""
  include_subjects: SubjectConnection

  """Identifies a set of assessment subjects to exclude"""
  exclude_subjects: SubjectConnection
}

"""
An abstract interface that defines identifying information about an asset in it generic form as something of value.
"""
interface Asset {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  asset_id: String
  name: String!
  description: String
  locations: [AssetLocation]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
}

type AssetConnection {
  pageInfo: PageInfo!
  edges: [AssetEdge]
}

type AssetEdge {
  cursor: String!
  node: Asset!
}

type AssetLocation implements BasicObject & LifecycleObject & CoreObject & CyioLocation {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
  name: String!
  description: String
  street_address: String
  city: String
  administrative_area: String
  country: String
  postal_code: PostalCode
}

input AssetLocationAddInput {
  labels: [String]
  name: String!
  description: String
  street_address: String
  city: String
  administrative_area: String
  country: String
  postal_code: PostalCode
}

type AssetLocationConnection {
  pageInfo: PageInfo!
  edges: [AssetLocationEdge]
}

type AssetLocationEdge {
  cursor: String!
  node: AssetLocation!
}

enum AssetLocationsFilter {
  created
  modified
  labels
  city
  administrative_area
  country
  postal_code
}

input AssetLocationsFiltering {
  key: AssetLocationsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum AssetLocationsOrdering {
  created
  modified
  labels
  city
  administrative_area
  country
  postal_code
}

enum AssetsFilter {
  created
  modified
  labels
  asset_id
}

input AssetsFiltering {
  key: AssetsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum AssetsOrdering {
  created
  modified
  labels
  asset_id
  name
}

"""Defines the types of assets."""
enum AssetType {
  operating_system
  database
  web_server
  dns_server
  email_server
  directory_server
  pbx
  firewall
  router
  switch
  storage_array
  appliance
  application_software
  network_device
  circuit
  compute_device
  workstation
  server
  network
  service
  software
  physical_device
  system
  web_site
  voip_handset
  voip_router
}

"""
Defines identifying information about an activity to be performed as part of a task.
"""
type AssociatedActivity {
  """
  Identifies a references to an activity defined in the list of activities.
  """
  activity: Activity

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies the person or organization responsible for performing a specific role related to the task.
  """
  responsible_roles: [OscalResponsibleParty]

  """
  Identifies an include/exclude pair starts with processing the include, then removing matching entries in the exclude.
  """
  subject: [AssessmentSubject]

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection
}

type AttackPattern implements BasicObject & StixObject & StixCoreObject & StixDomainObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  name: String!
  description: String
  aliases: [String]
  x_mitre_platforms: [String]
  x_mitre_permissions_required: [String]
  x_mitre_detection: String
  x_mitre_id: String
  killChainPhases: KillChainPhaseConnection
  coursesOfAction: CourseOfActionConnection
  parentAttackPatterns: AttackPatternConnection
  subAttackPatterns: AttackPatternConnection
  isSubAttackPattern: Boolean
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input AttackPatternAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String!
  aliases: [String]
  revoked: Boolean
  lang: String
  confidence: Int
  x_mitre_platforms: [String]
  x_mitre_permissions_required: [String]
  x_mitre_detection: String
  x_mitre_id: String
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  killChainPhases: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type AttackPatternConnection {
  pageInfo: PageInfo!
  edges: [AttackPatternEdge]
}

type AttackPatternEdge {
  cursor: String!
  node: AttackPattern!
}

type AttackPatternEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): AttackPattern
  contextPatch(input: EditContext): AttackPattern
  contextClean: AttackPattern
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): AttackPattern
}

enum AttackPatternsFilter {
  name
  aliases
  created
  modified
  created_at
  updated_at
  x_mitre_id
  createdBy
  markedBy
  labelledBy
  mitigatedBy
  revoked
  status_id
}

input AttackPatternsFiltering {
  key: AttackPatternsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum AttackPatternsOrdering {
  x_mitre_id
  name
  created
  modified
  created_at
  updated_at
  status_id
}

type Attribute {
  id: ID!
  key: String!
  value: String!
}

input AttributeAddInput {
  key: String!
  value: String!
  clientMutationId: String
}

type AttributeConnection {
  pageInfo: PageInfo!
  edges: [AttributeEdge]
}

type AttributeEdge {
  cursor: String!
  node: Attribute!
}

type AttributeEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!): Attribute
}

enum AttributesOrdering {
  value
}

"""
Defines identifying information about a system privilege held by the user.
"""
type AuthorizedPrivilege {
  """Identifies a human readable name for the privilege."""
  name: String!

  """Identifies a summary of the privilege's purpose within the system."""
  description: String

  """
  Identifies one or more functions performed for a given authorized privilege by this user class.
  """
  functions_performed: [String!]
}

input AuthorizedPrivilegeAddInput {
  """Identifies a human readable name for the privilege."""
  name: String!

  """Identifies a summary of the privilege's purpose within the system."""
  description: String

  """
  Identifies one or more functions performed for a given authorized privilege by this user class.
  """
  functions_performed: [String!]
}

type AutonomousSystem implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  number: Int!
  name: String
  rir: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input AutonomousSystemAddInput {
  number: Int!
  name: String
  rir: String
}

"""Defines identifying information about Base64 Content"""
type Base64Content {
  """
  Identifies the name of the file before it was encoded as Base64 to be embedded
  in a resource. This is the name that will be assigned to the file when the
  file is decoded.
  """
  filename: String

  """
  Identifies the media type as defined by the Internet Assigned Numbers Authority (IANA).
  """
  media_type: String

  """Identifies the content that is base64 encoded."""
  value: String
}

input Base64ContentAddInput {
  filename: String
  media_type: String
  value: String
}

interface BasicObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
}

interface BasicRelationship {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  fromRole: String
  toRole: String
  created_at: DateTime!
  updated_at: DateTime!
}

type Campaign implements BasicObject & StixObject & StixCoreObject & StixDomainObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  name: String!
  description: String
  aliases: [String]
  first_seen: DateTime
  last_seen: DateTime
  objective: String
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input CampaignAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String!
  aliases: [String]
  revoked: Boolean
  lang: String
  confidence: Int
  first_seen: DateTime
  last_seen: DateTime
  objective: String
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type CampaignConnection {
  pageInfo: PageInfo!
  edges: [CampaignEdge]
}

type CampaignEdge {
  cursor: String!
  node: Campaign!
}

type CampaignEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Campaign
  contextPatch(input: EditContext): Campaign
  contextClean: Campaign
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Campaign
}

enum CampaignsFilter {
  name
  aliases
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input CampaignsFiltering {
  key: CampaignsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum CampaignsOrdering {
  name
  first_seen
  last_seen
  role_played
  created
  modified
  created_at
  updated_at
  status_id
}

enum Capabilities {
  CONNECTORAPI
  KNOWLEDGE
  KNOWLEDGE_KNUPDATE
  KNOWLEDGE_KNUPDATE_KNDELETE
  KNOWLEDGE_KNUPLOAD
  KNOWLEDGE_KNASKIMPORT
  KNOWLEDGE_KNGETEXPORT
  KNOWLEDGE_KNGETEXPORT_KNASKEXPORT
  KNOWLEDGE_KNENRICHMENT
  EXPLORE
  EXPLORE_EXUPDATE
  EXPLORE_EXUPDATE_EXDELETE
  MODULES
  MODULES_MODMANAGE
  SETTINGS
  SETTINGS_SETACCESSES
  SETTINGS_SETMARKINGS
  SETTINGS_SETLABELS
  TAXIIAPI_SETCOLLECTIONS
}

type Capability implements BasicObject & InternalObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  name: String!
  description: String
  attribute_order: Int
  created_at: DateTime!
  updated_at: DateTime!
  editContext: [EditUserContext]
}

type CapabilityConnection {
  pageInfo: PageInfo!
  edges: [CapabilityEdge]
}

type CapabilityEdge {
  cursor: String!
  node: Capability!
}

"""Defines identifying information about a characterization of risk."""
interface Characterization {
  """Uniquely identifies this object."""
  id: ID!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """Identifies a reference to tool that performed the detection."""
  origins(first: Int): OriginConnection

  """
  Identifies one or more individual characteristic that is part of a larger set produced by the same actor.
  """
  facets(first: Int): FacetConnection
}

type CharacterizationConnection {
  pageInfo: PageInfo!
  edges: [CharacterizationEdge]
}

type CharacterizationEdge {
  cursor: String!
  node: CharacterizationType!
}

enum CharacterizationsFilter {
  created
  modified
}

input CharacterizationsFiltering {
  key: CharacterizationsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum CharacterizationsOrdering {
  created
  modified
}

union CharacterizationType = GenericCharacterization | RiskCharacterization | VulnerabilityCharacterization

"""Defines identifying information about a citation."""
type Citation {
  """Identifies a line of citation text."""
  text: String!

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection
}

input CitationAddInput {
  """Identifies a line of citation text."""
  text: String!

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references: [CyioExternalReferenceAddInput]
}

enum CitiesFilter {
  name
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input CitiesFiltering {
  key: CitiesFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum CitiesOrdering {
  name
  description
  aliases
  created
  modified
  created_at
  updated_at
  objectMarking
  objectLabel
  status_id
}

type City implements BasicObject & StixObject & StixCoreObject & StixDomainObject & Location {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  name: String!
  description: String
  latitude: Float
  longitude: Float
  precision: Float
  x_opencti_aliases: [String]
  country: Country
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input CityAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String
  latitude: Float
  longitude: Float
  precision: Float
  confidence: Int
  revoked: Boolean
  lang: String
  x_opencti_aliases: [String]
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type CityConnection {
  pageInfo: PageInfo!
  edges: [CityEdge]
}

type CityEdge {
  cursor: String!
  node: City!
}

type CityEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): City
  contextPatch(input: EditContext): City
  contextClean: City
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): City
}

type CivicAddress {
  address_type: UsageType
  street_address: String
  city: String
  administrative_area: String
  country: String
  postal_code: PostalCode
}

input CivicAddressAddInput {
  address_type: UsageType
  street_address: String
  city: String
  administrative_area: String
  country: String
  postal_code: PostalCode
}

"""Defines identifying information about an OSCAL component"""
interface Component {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Indicates the type of the component"""
  component_type: ComponentType!

  """Identifies a human-readable name for the component"""
  name: String!

  """
  Identifies a description of the component, including information about its function.
  """
  description: String!

  """
  Identifies a summary of the technological or business purpose of the component.
  """
  purpose: String

  """
  Identifies an organizationally specific identifier that is used to uniquely
  identify a logical or tangible item by the organization that owns the item.
  """
  asset_id: String

  """
  Identifies an asset tag assigned by the organization responsible for maintaining the logical or tangible item.
  """
  asset_tag: String

  """
  Indicates the asset's function, such as Router, Storage Array, DNS Server.
  """
  asset_type: AssetType!

  """Identifies the  model of the component."""
  model: String

  """Identifies the name of the company or organization"""
  vendor_name: String

  """Indicates the version of the component."""
  version: String

  """
  Identifies date the component was released, such as a software release date or policy publication date.
  """
  release_date: DateTime

  """
  Indicates relative placement of component ('internal' or 'external') to the system.
  """
  implementation_point: ImplementationPoint!

  """Identifies whether the asset can be check with an authenticated scan"""
  allows_authenticated_scans: Boolean

  """Identifies whether the asset is publicly accessible"""
  is_publicly_accessible: Boolean

  """Identifies whether the asset is virtualized"""
  is_virtual: Boolean

  """Identifies the network identifier of the asset."""
  network_id: String

  """Identifies the Virtual LAN identifier of the asset."""
  vlan_id: String

  """Identifies The name of the baseline configuration for the asset."""
  baseline_configuration_name: String

  """Identifies the function provided by the asset for the system."""
  function: String

  """Indicates the operational status of the system component."""
  operational_status: OperationalStatus!

  """
  Indicates references to one or more roles with responsibility for performing a function relative to the containing object.
  """
  responsible_roles: [OscalResponsibleParty]

  """
  Indicates the physical location of the asset's hardware (e.g., Data Center ID,
  Cage#, Rack#, or other meaningful location identifiers).
  """
  physical_location: [OscalLocation]
}

input ComponentAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """Indicates the type of the component"""
  component_type: ComponentType!

  """Identifies a human-readable name for the component"""
  name: String!

  """
  Identifies a description of the component, including information about its function.
  """
  description: String!

  """
  Identifies a summary of the technological or business purpose of the component.
  """
  purpose: String

  """
  Identifies an organizationally specific identifier that is used to uniquely
  identify a logical or tangible item by the organization that owns the item.
  """
  asset_id: String

  """
  Identifies an asset tag assigned by the organization responsible for maintaining the logical or tangible item.
  """
  asset_tag: String

  """
  Indicates the asset's function, such as Router, Storage Array, DNS Server.
  """
  asset_type: AssetType!

  """Identifies the  model of the component."""
  model: String

  """Identifies the name of the company or organization"""
  vendor_name: String

  """Indicates the version of the component."""
  version: String

  """
  Identifies date the component was released, such as a software release date or policy publication date.
  """
  release_date: DateTime

  """
  Indicates relative placement of component ('internal' or 'external') to the system.
  """
  implementation_point: ImplementationPoint!

  """Identifies whether the asset can be check with an authenticated scan"""
  allows_authenticated_scans: Boolean

  """Identifies whether the asset is publicly accessible"""
  is_publicly_accessible: Boolean

  """Identifies whether the asset is virtualized"""
  is_virtual: Boolean

  """Identifies the network identifier of the asset."""
  network_id: String

  """Identifies the Virtual LAN identifier of the asset."""
  vlan_id: String

  """Identifies The name of the baseline configuration for the asset."""
  baseline_configuration_name: String

  """Identifies the function provided by the asset for the system."""
  function: String

  """Indicates the operational status of the system component."""
  operational_status: OperationalStatus!
}

type ComponentConnection {
  pageInfo: PageInfo!
  edges: [ComponentEdge]
}

type ComponentEdge {
  cursor: String!
  node: Component!
}

enum ComponentsFilter {
  component_type
  asset_type
  created
  modified
  labels
}

input ComponentsFiltering {
  key: ComponentsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum ComponentsOrdering {
  component_type
  asset_type
  created
  modified
  labels
}

"""Defines the types of components"""
enum ComponentType {
  """Any guideline or recommendation."""
  guidance

  """A physical device."""
  hardware

  """A connection to something outside this system."""
  interconnection

  """A physical or virtual network."""
  network

  """
  A tangible asset used to provide physical protections or countermeasures.
  """
  physical

  """An applicable plan."""
  plan

  """An enforceable policy."""
  policy

  """A list of steps or actions to take to achieve some end result."""
  process_procedure

  """ A service that may provide APIs."""
  service

  """Any software, operating system, or firmware."""
  software

  """Any organizational or industry standard."""
  standard

  """
  An external system, which may be a leveraged system or the other side of an interconnection.
  """
  system

  """The system as a whole."""
  this_system

  """
  An external assessment performed on some other component, that has been validated by a third-party.
  """
  validation
}

union ComponentTypes = HardwareComponent | NetworkComponent | ServiceComponent | SoftwareComponent | SystemComponent

"""Defines identifying information about a network."""
type ComputingDeviceAsset implements BasicObject & LifecycleObject & CoreObject & Asset & ItAsset {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  asset_id: String
  name: String!
  description: String
  locations: [AssetLocation]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
  asset_tag: String
  asset_type: AssetType!
  serial_number: String
  vendor_name: String
  version: String
  release_date: DateTime
  implementation_point: ImplementationPoint!
  operational_status: OperationalStatus!
  cpe_identifier: String
  installation_id: String
  installed_hardware: [ComputingDeviceAsset!]!
  installed_operating_system: OperatingSystemAsset!
  model: String
  motherboard_id: String
  baseline_configuration_name: String
  function: String
  bios_id: String
  connected_to_network: NetworkAsset
  default_gateway: String
  fqdn: String
  hostname: String
  netbios_name: String
  installed_software: [SoftwareAsset!]!
  ip_address: [IpAddress!]!
  mac_address: [MAC!]!
  network_id: String
  vlan_id: String
  uri: URL
  ports: [PortInfo!]!
  is_publicly_accessible: Boolean
  is_scanned: Boolean
  is_virtual: Boolean
}

input ComputingDeviceAssetAddInput {
  labels: [String]
  asset_id: String
  name: String!
  description: String
  asset_tag: String
  asset_type: AssetType!
  serial_number: String
  vendor_name: String
  version: String
  release_date: DateTime
  implementation_point: ImplementationPoint!
  operational_status: OperationalStatus!
  cpe_identifier: String
  installation_id: String
  model: String
  motherboard_id: String
  baseline_configuration_name: String
  function: String
  bios_id: String
  default_gateway: String
  fqdn: String
  hostname: String
  netbios_name: String
  ipv4_address: [IpV4AddressAddInput]!
  ipv6_address: [IpV6AddressAddInput]!
  mac_address: [MAC!]!
  network_id: String
  vlan_id: String
  uri: URL
  ports: [PortInfoAddInput!]!
  is_publicly_accessible: Boolean
  is_scanned: Boolean
  is_virtual: Boolean
}

type ComputingDeviceAssetConnection {
  pageInfo: PageInfo!
  edges: [ComputingDeviceAssetEdge]
}

type ComputingDeviceAssetEdge {
  cursor: String!
  node: ComputingDeviceAsset!
}

enum ComputingDeviceAssetFilter {
  name
  asset_type
  asset_id
  ip_address
  installed_operating_system
  network_id
  labels
}

input ComputingDeviceAssetFiltering {
  key: ComputingDeviceAssetFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum ComputingDeviceAssetOrdering {
  name
  asset_type
  asset_id
  ip_address
  installed_operating_system
  network_id
  labels
}

type Connector implements BasicObject & InternalObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  name: String!
  active: Boolean
  auto: Boolean
  only_contextual: Boolean
  connector_type: String
  connector_scope: [String!]
  connector_state: String
  connector_state_reset: Boolean
  connector_user: User
  updated_at: DateTime
  created_at: DateTime
  config: ConnectorConfig
  works(status: String): [Work]
}

type ConnectorConfig {
  connection: RabbitMQConnection!
  listen: String!
  listen_exchange: String!
  push: String!
  push_exchange: String!
}

enum ConnectorType {
  EXTERNAL_IMPORT
  INTERNAL_IMPORT_FILE
  INTERNAL_ENRICHMENT
  INTERNAL_EXPORT_FILE
  STREAM
}

scalar ConstraintNumber

scalar ConstraintString

type ContactInfo {
  email_addresses: [EmailAddress]
  telephone_numbers: [TelephoneNumber]
}

interface Container {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  objects(first: Int, after: ID, orderBy: StixObjectOrStixRelationshipsOrdering, orderMode: OrderingMode, filters: [StixObjectOrStixRelationshipsFiltering], filterMode: FilterMode, search: String, types: [String], all: Boolean): StixObjectOrStixRelationshipConnection
}

type ContainerConnection {
  pageInfo: PageInfo!
  edges: [ContainerEdge]
}

type ContainerEdge {
  cursor: String!
  node: Container!
}

type ContainerEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Container
  contextPatch(input: EditContext): Container
  contextClean: Container
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Container
}

enum ContainersFilter {
  entity_type
  attribute_abstract
  report_types
  content
  authors
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  objectContains
  status_id
}

input ContainersFiltering {
  key: ContainersFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum ContainersOrdering {
  name
  published
  created
  modified
  created_at
  updated_at
  createdBy
  status_id
}

type ContextData {
  id: String!
  entity_type: String!
  from_id: String
  to_id: String
  message: String!
  commit: String
}

"""Defines the identifying information about a Core object"""
interface CoreObject {
  labels: [String]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
}

enum CountriesFilter {
  created
  modified
  created_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input CountriesFiltering {
  key: CountriesFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum CountriesOrdering {
  name
  description
  created
  modified
  created_at
  updated_at
  status_id
}

type Country implements BasicObject & StixObject & StixCoreObject & StixDomainObject & Location {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  name: String!
  description: String
  latitude: Float
  longitude: Float
  precision: Float
  x_opencti_aliases: [String]
  region: Region
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input CountryAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String
  latitude: Float
  longitude: Float
  precision: Float
  confidence: Int
  revoked: Boolean
  lang: String
  x_opencti_aliases: [String]
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type CountryConnection {
  pageInfo: PageInfo!
  edges: [CountryEdge]
}

type CountryEdge {
  cursor: String!
  node: Country!
}

type CountryEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Country
  contextPatch(input: EditContext): Country
  contextClean: Country
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Country
}

type CourseOfAction implements BasicObject & StixObject & StixCoreObject & StixDomainObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  name: String!
  description: String
  x_opencti_aliases: [String]
  x_mitre_id: String
  x_opencti_threat_hunting: String
  x_opencti_log_sources: [String]
  attackPatterns: AttackPatternConnection
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input CourseOfActionAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String!
  x_opencti_aliases: [String]
  x_mitre_id: String
  confidence: Int
  revoked: Boolean
  lang: String
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type CourseOfActionConnection {
  pageInfo: PageInfo!
  edges: [CourseOfActionEdge]
}

type CourseOfActionEdge {
  cursor: String!
  node: CourseOfAction!
}

type CourseOfActionEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): CourseOfAction
  contextPatch(input: EditContext): CourseOfAction
  contextClean: CourseOfAction
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): CourseOfAction
}

enum CoursesOfActionFilter {
  name
  aliases
  created
  modified
  created_at
  createdBy
  markedBy
  labelledBy
  mitigatedBy
  status_id
}

input CoursesOfActionFiltering {
  key: CoursesOfActionFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum CoursesOfActionOrdering {
  name
  created
  modified
  created_at
  updated_at
  status_id
}

type CyioExternalReference implements BasicObject & LifecycleObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Identities the date and time at which the object was originally created.
  """
  created: DateTime!

  """Identifies the date and time at which the object was last modified."""
  modified: DateTime!
  source_name: String!
  description: String
  url: URL
  hashes: [HashInfo]
  external_id: String
  reference_purpose: ReferencePurposeType
  media_type: String
}

input CyioExternalReferenceAddInput {
  source_name: String!
  description: String
  url: URL
  hashes: [HashInfoAddInput]
  reference_purpose: ReferencePurposeType
  media_type: String
}

type CyioExternalReferenceConnection {
  pageInfo: PageInfo!
  edges: [CyioExternalReferenceEdge]
}

type CyioExternalReferenceEdge {
  cursor: String!
  node: CyioExternalReference!
}

enum CyioExternalReferencesFilter {
  url
  source_name
  external_id
}

input CyioExternalReferencesFiltering {
  key: CyioExternalReferencesFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum CyioExternalReferencesOrdering {
  source_name
  url
  hash
  external_id
  created
  modified
}

interface CyioIdentity {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
  name: String!
  description: String
}

interface CyioLocation {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
  name: String!
  description: String
}

input CyioLocationAddInput {
  labels: [String]
  location_type: CyioLocationType
  name: String!
  description: String
}

enum CyioLocationType {
  geo_location
  city
  country
  region
  civic_address
}

type CyioNote implements BasicObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  external_references(first: Int): CyioExternalReferenceConnection
  abstract: String
  content: String!
  authors: [String]
}

input CyioNoteAddInput {
  abstract: String
  content: String!
  authors: [String]
}

type CyioNoteConnection {
  pageInfo: PageInfo!
  edges: [CyioNoteEdge]
}

type CyioNoteEdge {
  cursor: String!
  node: CyioNote!
}

enum CyioNotesFilter {
  abstract
  authors
  created
  modified
  labels
}

input CyioNotesFiltering {
  key: CyioNotesFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum CyioNotesOrdering {
  created
  modified
  labels
}

"""
An abstract interface that defines identifying information about an instance of data.
"""
interface DataAsset {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  asset_id: String
  name: String!
  description: String
  locations: [AssetLocation]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
}

type DataConnection {
  pageInfo: PageInfo!
  edges: [DataEdge]
}

type DataEdge {
  cursor: String!
  node: DataAsset!
}

scalar Date

"""
Defines identifying information about an Event Timing that occurs within a date range.
"""
type DateRangeTiming {
  """Identifies the specified date that the task must occur on or after."""
  start_date: DateTime!

  """identifies the specific date that the task must occur on or before."""
  end_date: DateTime
}

input DateRangeTimingAddInput {
  """Identifies the specified date that the task must occur on or after."""
  start_date: DateTime!

  """identifies the specific date that the task must occur on or before."""
  end_date: DateTime
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum DatumFilter {
  created
  modified
  labels
  asset_id
}

input DatumFiltering {
  key: DatumFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum DatumOrdering {
  created
  modified
  labels
  asset_id
  name
}

"""Dependency information containing the name and the deployed version."""
type DependencyVersion {
  name: String!
  version: String!
}

type Directory implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  path: String!
  path_enc: String
  ctime: DateTime
  mtime: DateTime
  atime: DateTime
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input DirectoryAddInput {
  path: String!
  path_enc: String
  ctime: DateTime
  mtime: DateTime
  atime: DateTime
}

type Distribution {
  label: String!
  entity: StixObjectOrStixRelationship
  value: Int
}

type DocsMetrics {
  count: String
}

"""
An abstract interface that defines identifying information about a documentary asset, such as policies, procedures.
"""
interface DocumentaryAsset {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  asset_id: String
  name: String!
  description: String
  locations: [AssetLocation]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
  release_date: DateTime!
}

type DocumentaryAssetConnection {
  pageInfo: PageInfo!
  edges: [DocumentaryAssetEdge]
}

type DocumentaryAssetEdge {
  cursor: String!
  node: Asset!
}

enum DocumentaryAssetsFilter {
  created
  modified
  labels
  asset_id
  release_date
}

input DocumentaryAssetsFiltering {
  key: DocumentaryAssetsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum DocumentaryAssetsOrdering {
  created
  modified
  labels
  asset_id
  name
  release_date
}

type DomainName implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  observable_value: String!
  x_opencti_score: Int
  x_opencti_description: String
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  value: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input DomainNameAddInput {
  value: String!
}

input EditContext {
  focusOn: String
}

input EditInput {
  key: String!
  value: [String]!
  operation: EditOperation
}

enum EditOperation {
  add
  replace
  remove
}

type EditUserContext {
  name: String!
  focusOn: String
}

type ElasticSearchMetrics {
  docs: DocsMetrics
  search: SearchMetrics
  get: GetMetrics
  indexing: IndexingMetrics
}

type EmailAddr implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  value: String
  display_name: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input EmailAddrAddInput {
  value: String
  display_name: String
}

"""
A field whose value conforms to the standard internet email address format as
specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

type EmailMessage implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  is_multipart: Boolean
  attribute_date: DateTime
  content_type: String
  message_id: String
  subject: String
  received_lines: [String]
  body: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input EmailMessageAddInput {
  is_multipart: Boolean
  attribute_date: DateTime
  content_type: String
  message_id: String
  subject: String
  received_lines: [String]
  body: String
}

type EmailMimePartType implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  body: String
  content_type: String
  content_disposition: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input EmailMimePartTypeAddInput {
  body: String
  content_type: String
  content_disposition: String
}

"""Defines the type of remediation tracking entry. Can be multi-valued."""
enum EntryType {
  """
  Contacted vendor to determine the status of a pending fix to a known vulnerability.
  """
  vendor_check_in

  """Information related to the current state of response to this risk."""
  status_update

  """A significant step in the response plan has been achieved."""
  milestone_complete

  """
  An activity was completed that reduces the likelihood or impact of this risk.
  """
  mitigation

  """
  An activity was completed that eliminates the likelihood or impact of this risk.
  """
  remediated

  """The risk is no longer applicable to the system."""
  closed

  """A deviation request was made to the authorizing official."""
  dr_submission

  """A previously submitted deviation request has been modified."""
  dr_updated

  """The authorizing official approved the deviation."""
  dr_approved

  """The authorizing official rejected the deviation."""
  dr_rejected
}

union EventTiming = DateRangeTiming | OnDateTiming

"""
Defines identifying information about evidence relevant to this observation.
"""
type Evidence {
  """Identifies a resolvable URL reference to the relevant evidence."""
  href: URL

  """Identifies a human-readable description of the evidence."""
  description: String

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection
}

"""Defines the maturity levels of an exploit."""
enum ExploitMaturity {
  """No exploit code is available, or an exploit is theoretical."""
  unproven

  """
  Proof-of-concept exploit code is available, or an attack demonstration is not practical for most systems.
  """
  proof_of_concept

  """
  Functional exploit code is available. The code works in most situations where the vulnerability exists.
  """
  functional

  """
  Functional autonomous code exists, or no exploit is required (manual trigger) and details are widely available.
  """
  high

  """Insufficient information to definitely know."""
  not_defined
}

type ExternalReference implements BasicObject & StixObject & StixMetaObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  created: DateTime
  modified: DateTime
  source_name: String!
  description: String
  url: String
  hash: String
  external_id: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
}

input ExternalReferenceAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  source_name: String!
  description: String
  url: String
  hash: String
  external_id: String
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type ExternalReferenceConnection {
  pageInfo: PageInfo!
  edges: [ExternalReferenceEdge]
}

type ExternalReferenceEdge {
  cursor: String!
  node: ExternalReference!
}

type ExternalReferenceEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!): ExternalReference
  contextPatch(input: EditContext): ExternalReference
  contextClean: ExternalReference
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(fromId: String!, relationship_type: String!): ExternalReference
  askEnrichment(connectorId: ID!): Work
  importPush(file: Upload!): File
}

enum ExternalReferencesFilter {
  url
  usedBy
  source_name
  external_id
}

input ExternalReferencesFiltering {
  key: ExternalReferencesFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum ExternalReferencesOrdering {
  source_name
  url
  hash
  external_id
  created
  modified
  created_at
  updated_at
}

"""Defines identifying information about a facet."""
type Facet {
  """Uniquely identifies this object."""
  id: ID!

  """
  Indicates if the facet is 'initial' as first identified, or 'adjusted'
  indicating that the value has be changed after some adjustments have been made
  (e.g., to identify residual risk).
  """
  risk_state: RiskState!

  """Identifies the name of the risk metric within the specified system."""
  name: String!

  """
  Specifies the naming system under which this risk metric is organized, which
  allows for the same names to be used in different systems controlled by
  different parties.
  """
  source_system: URL!

  """Indicates the value of the facet."""
  value: String!

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection
}

input FacetAddInput {
  """
  Indicates if the facet is 'initial' as first identified, or 'adjusted'
  indicating that the value has be changed after some adjustments have been made
  (e.g., to identify residual risk).
  """
  risk_state: RiskState!

  """Identifies the name of the risk metric within the specified system."""
  name: String!

  """
  Specifies the naming system under which this risk metric is organized, which
  allows for the same names to be used in different systems controlled by
  different parties.
  """
  source_system: URL!

  """Indicates the value of the facet."""
  value: String!
}

type FacetConnection {
  pageInfo: PageInfo!
  edges: [FacetEdge]
}

type FacetEdge {
  cursor: String!
  node: Facet!
}

enum FacetsFilter {
  risk_state
  name
  source_system
}

input FacetsFiltering {
  key: FacetsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum FacetsOrdering {
  risk_state
  name
  source_system
}

enum FamilyType {
  windows
  linux
  macOS
  other
}

type File {
  id: ID!
  name: String!
  size: Int
  lastModified: DateTime
  lastModifiedSinceMin: Int
  metaData: FileMetadata
  uploadStatus: State!
  works: [Work]
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]
}

type FileEdge {
  cursor: String!
  node: File!
}

type FileMetadata {
  encoding: String
  mimetype: String
  messages: [WorkMessage]
  errors: [WorkMessage]
  list_filters: String
}

enum FilterMode {
  and
  or
}

"""Defines identifying information about the target of a finding."""
type FindingTarget {
  """Identifies a name for this objective status."""
  name: String

  """
  Identifies a human-readable description of the assessor's conclusions
  regarding the degree to which an objective is satisfied.
  """
  description: String

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies whether the objective is satisfied or not within a given system.
  """
  objective_status_state: ObjectiveStatusState!

  """Identifies the reason the objective was given it's status."""
  objective_status_reason: ObjectiveStatusReason

  """Identifies an explanation as to why the objective was not satisfied."""
  objective_status_explanation: String

  """Indicates the degree to which the given control was implemented."""
  implementation_status: ImplementationStatus

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection
}

"""
Defines identifying information about a Generic characterization of risk.
"""
type GenericCharacterization implements Characterization {
  """Uniquely identifies this object."""
  id: ID!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """Identifies a reference to tool that performed the detection."""
  origins(first: Int): OriginConnection

  """
  Identifies one or more individual characteristic that is part of a larger set produced by the same actor.
  """
  facets(first: Int): FacetConnection!
}

input GenericCharacterizationAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]
}

type GetMetrics {
  total: String
}

type Group implements InternalObject & BasicObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  name: String!
  default_assignation: Boolean
  auto_new_marking: Boolean
  description: String
  members: UserConnection
  created_at: DateTime
  updated_at: DateTime
  allowed_marking: [MarkingDefinition]
  editContext: [EditUserContext]
}

input GroupAddInput {
  name: String!
  description: String
  clientMutationId: String
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]
}

type GroupEdge {
  cursor: String!
  node: Group!
}

type GroupEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!): Group
  contextPatch(input: EditContext): Group
  contextClean: Group
  relationAdd(input: InternalRelationshipAddInput): InternalRelationship
  relationDelete(fromId: String, toId: String, relationship_type: String!): Group
}

enum GroupsOrdering {
  name
  default_assignation
  auto_new_marking
  created_at
  updated_at
}

interface HardwareAsset {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  asset_id: String
  name: String!
  description: String
  locations: [AssetLocation]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
  asset_tag: String
  asset_type: AssetType!
  serial_number: String
  vendor_name: String
  version: String
  release_date: DateTime
  implementation_point: ImplementationPoint!
  operational_status: OperationalStatus!
  cpe_identifier: String
  installation_id: String
  installed_hardware: [ComputingDeviceAsset!]!
  installed_operating_system: OperatingSystemAsset!
  model: String
  motherboard_id: String
  baseline_configuration_name: String
  function: String
}

type HardwareAssetConnection {
  pageInfo: PageInfo!
  edges: [HardwareAssetEdge]
}

type HardwareAssetEdge {
  cursor: String!
  node: HardwareAsset!
}

enum HardwareAssetsFilter {
  created
  modified
  labels
  asset_id
  name
  asset_tag
  asset_type
  serial_number
  vendor_name
  version
  release_date
  implementation_point
  operational_status
  cpe_identifier
  installation_id
  model
  motherboard_id
  baseline_configuration_name
}

input HardwareAssetsFiltering {
  key: HardwareAssetsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum HardwareAssetsOrdering {
  created
  modified
  labels
  asset_id
  name
  asset_tag
  asset_type
  serial_number
  vendor_name
  version
  release_date
  implementation_point
  operational_status
  cpe_identifier
  installation_id
  model
  motherboard_id
  baseline_configuration_name
}

"""Defines identifying information about an OSCAL hardware component"""
type HardwareComponent implements BasicObject & LifecycleObject & CoreObject & OscalObject & Component {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Indicates the type of the component"""
  component_type: ComponentType!

  """Identifies a human-readable name for the component"""
  name: String!

  """
  Identifies a description of the component, including information about its function.
  """
  description: String!

  """
  Identifies a summary of the technological or business purpose of the component.
  """
  purpose: String

  """
  Identifies an organizationally specific identifier that is used to uniquely
  identify a logical or tangible item by the organization that owns the item.
  """
  asset_id: String

  """
  Identifies an asset tag assigned by the organization responsible for maintaining the logical or tangible item.
  """
  asset_tag: String

  """
  Indicates the asset's function, such as Router, Storage Array, DNS Server.
  """
  asset_type: AssetType!

  """Identifies the  model of the component."""
  model: String

  """Identifies the name of the company or organization"""
  vendor_name: String

  """Indicates the version of the component."""
  version: String

  """
  Identifies date the component was released, such as a software release date or policy publication date.
  """
  release_date: DateTime

  """
  Indicates relative placement of component ('internal' or 'external') to the system.
  """
  implementation_point: ImplementationPoint!

  """Identifies whether the asset can be check with an authenticated scan"""
  allows_authenticated_scans: Boolean

  """Identifies whether the asset is publicly accessible"""
  is_publicly_accessible: Boolean

  """Identifies whether the asset is virtualized"""
  is_virtual: Boolean

  """Identifies the network identifier of the asset."""
  network_id: String

  """Identifies the Virtual LAN identifier of the asset."""
  vlan_id: String

  """Identifies The name of the baseline configuration for the asset."""
  baseline_configuration_name: String

  """Identifies the function provided by the asset for the system."""
  function: String

  """Indicates the operational status of the system component."""
  operational_status: OperationalStatus!

  """
  Indicates references to one or more roles with responsibility for performing a function relative to the containing object.
  """
  responsible_roles: [OscalResponsibleParty]

  """
  Indicates the physical location of the asset's hardware (e.g., Data Center ID,
  Cage#, Rack#, or other meaningful location identifiers).
  """
  physical_location: [OscalLocation]

  """Identifies the CPE identifier for a hardware device"""
  cpe_identifier: String

  """Identifies the identifier for the installation"""
  installation_id: String
}

input HardwareComponentAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """Indicates the type of the component"""
  component_type: ComponentType!

  """Identifies a human-readable name for the component"""
  name: String!

  """
  Identifies a description of the component, including information about its function.
  """
  description: String!

  """
  Identifies a summary of the technological or business purpose of the component.
  """
  purpose: String

  """
  Identifies an organizationally specific identifier that is used to uniquely
  identify a logical or tangible item by the organization that owns the item.
  """
  asset_id: String

  """
  Identifies an asset tag assigned by the organization responsible for maintaining the logical or tangible item.
  """
  asset_tag: String

  """
  Indicates the asset's function, such as Router, Storage Array, DNS Server.
  """
  asset_type: AssetType!

  """Identifies the  model of the component."""
  model: String

  """Identifies the name of the company or organization"""
  vendor_name: String

  """Indicates the version of the component."""
  version: String

  """
  Identifies date the component was released, such as a software release date or policy publication date.
  """
  release_date: DateTime

  """
  Indicates relative placement of component ('internal' or 'external') to the system.
  """
  implementation_point: ImplementationPoint!

  """Identifies whether the asset can be check with an authenticated scan"""
  allows_authenticated_scans: Boolean

  """Identifies whether the asset is publicly accessible"""
  is_publicly_accessible: Boolean

  """Identifies whether the asset is virtualized"""
  is_virtual: Boolean

  """Identifies the network identifier of the asset."""
  network_id: String

  """Identifies the Virtual LAN identifier of the asset."""
  vlan_id: String

  """Identifies The name of the baseline configuration for the asset."""
  baseline_configuration_name: String

  """Identifies the function provided by the asset for the system."""
  function: String

  """Indicates the operational status of the system component."""
  operational_status: OperationalStatus!

  """Identifies the CPE identifier for a hardware device"""
  cpe_identifier: String

  """Identifies the identifier for the installation"""
  installation_id: String
}

type HardwareComponentConnection {
  pageInfo: PageInfo!
  edges: [HardwareComponentEdge]
}

type HardwareComponentEdge {
  cursor: String!
  node: HardwareComponent!
}

enum HardwareComponentsFilter {
  component_type
  asset_type
  created
  modified
  labels
}

input HardwareComponentsFiltering {
  key: HardwareComponentsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum HardwareComponentsOrdering {
  component_type
  asset_type
  created
  modified
  labels
}

type Hash {
  algorithm: String!
  hash: String
}

enum HashAlgorithm {
  """The SHA-224 algorithm as defined by NIST FIPS 180-4."""
  SHA_224

  """The SHA-256 algorithm as defined by NIST FIPS 180-4."""
  SHA_256

  """The SHA-384 algorithm as defined by NIST FIPS 180-4."""
  SHA_384

  """The SHA-512 algorithm as defined by NIST FIPS 180-4."""
  SHA_512

  """The SHA3-224 algorithm as defined by NIST FIPS 202."""
  SHA3_224

  """The SHA3-256 algorithm as defined by NIST FIPS 202."""
  SHA3_256

  """The SHA3-384 algorithm as defined by NIST FIPS 202."""
  SHA3_384

  """The SHA3-512 algorithm as defined by NIST FIPS 202."""
  SHA3_512
}

interface HashedObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  hashes: [Hash]
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

type HashInfo {
  algorithm: HashAlgorithm!
  value: String!
}

input HashInfoAddInput {
  algorithm: HashAlgorithm!
  value: String!
}

input HashInput {
  algorithm: String!
  hash: String!
}

enum IdentitiesFilter {
  entity_type
  identity_class
  name
  x_opencti_aliases
  confidence
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input IdentitiesFiltering {
  key: IdentitiesFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum IdentitiesOrdering {
  name
  created
  modified
  created_at
  updated_at
  status_id
}

interface Identity {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  identity_class: String!
  name: String!
  description: String
  roles: [String]
  contact_information: String
  x_opencti_aliases: [String]
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input IdentityAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  type: IdentityType!
  name: String!
  description: String!
  contact_information: String
  roles: [String]
  x_opencti_aliases: [String]
  confidence: Int
  revoked: Boolean
  lang: String
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
  update: Boolean
}

type IdentityConnection {
  pageInfo: PageInfo!
  edges: [IdentityEdge]
}

type IdentityEdge {
  cursor: String!
  node: Identity!
}

type IdentityEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Identity
  contextPatch(input: EditContext): Identity
  contextClean: Identity
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Identity
}

enum IdentityType {
  Sector
  Organization
  Individual
  System
}

enum ImplementationPoint {
  internal
  external
}

"""
Identifies the implementation status of the control or control objective.
"""
enum ImplementationStatus {
  """The control is fully implemented."""
  implemented

  """The control is partially implemented."""
  partial

  """
  There is a plan for implementing the control as explained in the remarks.
  """
  planned

  """
  There is a plan for implementing the control as explained in the remarks.
  """
  alternative

  """
  This control does not apply to this system as justified in the remarks.
  """
  not_applicable
}

type Incident implements BasicObject & StixObject & StixCoreObject & StixDomainObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  name: String!
  description: String
  aliases: [String]
  first_seen: DateTime
  last_seen: DateTime
  objective: String
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input IncidentAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String!
  confidence: Int
  revoked: Boolean
  lang: String
  objective: String
  first_seen: DateTime
  last_seen: DateTime
  aliases: [String]
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type IncidentConnection {
  pageInfo: PageInfo!
  edges: [IncidentEdge]
}

type IncidentEdge {
  cursor: String!
  node: Incident!
}

type IncidentEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Incident
  contextPatch(input: EditContext): Incident
  contextClean: Incident
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Incident
}

enum IncidentsFilter {
  name
  aliases
  created
  modified
  created_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input IncidentsFiltering {
  key: IncidentsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum IncidentsOrdering {
  name
  first_seen
  last_seen
  created
  modified
  created_at
  updated_at
  status_id
}

type IndexingMetrics {
  index_total: String
  delete_total: String
}

type Indicator implements BasicObject & StixObject & StixCoreObject & StixDomainObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  pattern_type: String
  pattern_version: String
  pattern: String
  name: String!
  description: String
  indicator_types: [String]
  valid_from: DateTime
  valid_until: DateTime
  x_opencti_score: Int
  x_opencti_detection: Boolean
  x_opencti_main_observable_type: String
  x_mitre_platforms: [String]
  killChainPhases: KillChainPhaseConnection
  observables: StixCyberObservableConnection
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input IndicatorAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  pattern_type: String!
  pattern_version: String
  pattern: String!
  name: String!
  description: String
  indicator_types: [String]
  valid_from: DateTime
  valid_until: DateTime
  confidence: Int
  revoked: Boolean
  lang: String
  x_opencti_score: Int
  x_opencti_detection: Boolean
  x_opencti_main_observable_type: String
  x_mitre_platforms: [String]
  killChainPhases: [String]
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type IndicatorConnection {
  pageInfo: PageInfo!
  edges: [IndicatorEdge]
}

type IndicatorEdge {
  cursor: String!
  node: Indicator!
}

type IndicatorEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Indicator
  contextPatch(input: EditContext): Indicator
  contextClean: Indicator
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Indicator
}

enum IndicatorsFilter {
  name
  pattern_type
  pattern_version
  pattern
  x_opencti_main_observable_type
  x_opencti_score
  x_opencti_detection
  valid_from
  valid_until
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  basedOn
  indicates
  status_id
  sightedBy
}

input IndicatorsFiltering {
  key: IndicatorsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum IndicatorsOrdering {
  pattern_type
  pattern_version
  pattern
  name
  indicator_types
  valid_from
  valid_until
  x_opencti_score
  x_opencti_detection
  confidence
  created
  modified
  created_at
  updated_at
  status_id
}

type Individual implements BasicObject & StixObject & StixCoreObject & StixDomainObject & Identity {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  identity_class: String!
  name: String!
  description: String
  contact_information: String
  roles: [String]
  x_opencti_aliases: [String]
  x_opencti_firstname: String
  x_opencti_lastname: String
  organizations: OrganizationConnection
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input IndividualAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String!
  contact_information: String
  roles: [String]
  x_opencti_aliases: [String]
  x_opencti_firstname: String
  x_opencti_lastname: String
  confidence: Int
  revoked: Boolean
  lang: String
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type IndividualConnection {
  pageInfo: PageInfo!
  edges: [IndividualEdge]
}

type IndividualEdge {
  cursor: String!
  node: Individual!
}

type IndividualEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Individual
  contextPatch(input: EditContext): Individual
  contextClean: Individual
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Individual
}

enum IndividualsFilter {
  name
  aliases
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input IndividualsFiltering {
  key: IndividualsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum IndividualsOrdering {
  name
  confidence
  firstname
  lastname
  created
  modified
  status_id
}

type Inference {
  rule: Rule!
  explanation: [StixObjectOrStixRelationship]!
  attributes: [InferenceAttribute]
}

type InferenceAttribute {
  field: String!
  value: String!
}

type Infrastructure implements BasicObject & StixObject & StixCoreObject & StixDomainObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  name: String!
  aliases: [String]
  description: String
  infrastructure_types: [String]
  first_seen: DateTime
  last_seen: DateTime
  killChainPhases: KillChainPhaseConnection
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input InfrastructureAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String
  aliases: [String]
  infrastructure_types: [String]
  first_seen: DateTime
  last_seen: DateTime
  confidence: Int
  revoked: Boolean
  lang: String
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  killChainPhases: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type InfrastructureConnection {
  pageInfo: PageInfo!
  edges: [InfrastructureEdge]
}

type InfrastructureEdge {
  cursor: String!
  node: Infrastructure!
}

type InfrastructureEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Infrastructure
  contextPatch(input: EditContext): Infrastructure
  contextClean: Infrastructure
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Infrastructure
}

enum InfrastructuresFilter {
  name
  aliases
  infrastructure_types
  first_seen
  last_seen
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input InfrastructuresFiltering {
  key: InfrastructuresFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum InfrastructuresOrdering {
  name
  infrastructure_types
  first_seen
  last_seen
  created
  modified
  created_at
  updated_at
  status_id
}

interface InternalObject {
  id: ID!
  entity_type: String!
}

type InternalRelationship implements BasicRelationship {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  fromRole: String
  toRole: String
  created_at: DateTime!
  updated_at: DateTime!
  from: InternalObject
  to: InternalObject
}

input InternalRelationshipAddInput {
  relationship_type: String!
  fromId: ID
  toId: ID
}

type IntrusionSet implements BasicObject & StixObject & StixCoreObject & StixDomainObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  name: String!
  description: String
  aliases: [String]
  first_seen: DateTime
  last_seen: DateTime
  goals: [String]
  resource_level: String
  primary_motivation: String
  secondary_motivations: [String]
  locations: LocationConnection
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input IntrusionSetAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String!
  aliases: [String]
  first_seen: DateTime
  last_seen: DateTime
  goals: [String]
  resource_level: String
  primary_motivation: String
  secondary_motivations: [String]
  confidence: Int
  revoked: Boolean
  lang: String
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type IntrusionSetConnection {
  pageInfo: PageInfo!
  edges: [IntrusionSetEdge]
}

type IntrusionSetEdge {
  cursor: String!
  node: IntrusionSet!
}

type IntrusionSetEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): IntrusionSet
  contextPatch(input: EditContext): IntrusionSet
  contextClean: IntrusionSet
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): IntrusionSet
}

enum IntrusionSetsFilter {
  name
  aliases
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input IntrusionSetsFiltering {
  key: IntrusionSetsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum IntrusionSetsOrdering {
  name
  created
  modified
  created_at
  updated_at
  status_id
}

"""
Defines identifying information about a single managed inventory item within the system.
"""
interface InventoryItem {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """
  Indicates the asset's function, such as Router, Storage Array, DNS Server.
  """
  asset_type: AssetType!

  """
  Identifies an organizationally specific identifier that is used to uniquely
  identify a logical or tangible item by the organization that owns the item.
  """
  asset_id: String

  """
  Identifies an asset tag assigned by the organization responsible for maintaining the logical or tangible item.
  """
  asset_tag: String

  """Indicates the serial number for the asset."""
  serial_number: String

  """
  Identifies a description of the component, including information about its function.
  """
  description: String!

  """Identifies the  model of the component."""
  model: String

  """Identifies the name of the company or organization"""
  vendor_name: String

  """Identifies whether the asset can be check with an authenticated scan"""
  allows_authenticated_scans: Boolean

  """Identifies whether the asset is publicly accessible"""
  is_publicly_accessible: Boolean

  """Indicates if the asset is subjected to network scans"""
  is_scanned: Boolean

  """Identifies whether the asset is virtualized"""
  is_virtual: Boolean

  """Indicates the Internet Protocol v4 Addresses of the asset"""
  ipv4_address: [IpV4Address!]

  """Indicates the Internet Protocol v4 Addresses of the asset"""
  ipv6_address: [IpV6Address!]

  """Indicates the media access control (MAC) address for the asset."""
  mac_address: [MAC!]

  """Indicates the full-qualified domain name (FQDN) of the asset."""
  fqdn: String

  """Indicates the NetBIOS name for the asset."""
  netbios_name: String

  """Indicates the Uniform Resource Identifier (URI) for the asset."""
  uri: URL

  """Identifies the network identifier of the asset."""
  network_id: String

  """Identifies the Virtual LAN identifier of the asset."""
  vlan_id: String

  """Identifies The name of the baseline configuration for the asset."""
  baseline_configuration_name: String

  """Identifies the function provided by the asset for the system."""
  function: String

  """
  Identifies one or more references to a set of organizations or persons that
  have responsibility for performing a referenced role in the context of the
  containing object.
  """
  responsible_parties: [OscalResponsibleParty]

  """
  Indicates the physical location of the asset's hardware (e.g., Data Center ID,
  Cage#, Rack#, or other meaningful location identifiers).
  """
  physical_location: [OscalLocation]

  """
  Identifies the set of components that are implemented in a given system inventory item.
  """
  implemented_components: [Component]
}

input InventoryItemAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Indicates the asset's function, such as Router, Storage Array, DNS Server.
  """
  asset_type: AssetType!

  """
  Identifies an organizationally specific identifier that is used to uniquely
  identify a logical or tangible item by the organization that owns the item.
  """
  asset_id: String

  """
  Identifies an asset tag assigned by the organization responsible for maintaining the logical or tangible item.
  """
  asset_tag: String

  """Indicates the serial number for the asset."""
  serial_number: String

  """
  Identifies a description of the component, including information about its function.
  """
  description: String!

  """Identifies the  model of the component."""
  model: String

  """Identifies the name of the company or organization"""
  vendor_name: String

  """Identifies whether the asset can be check with an authenticated scan"""
  allows_authenticated_scans: Boolean

  """Identifies whether the asset is publicly accessible"""
  is_publicly_accessible: Boolean

  """Indicates if the asset is subjected to network scans"""
  is_scanned: Boolean

  """Identifies whether the asset is virtualized"""
  is_virtual: Boolean

  """Indicates the Internet Protocol v4 Addresses of the asset"""
  ipv4_address: [IpV4AddressAddInput!]

  """Indicates the Internet Protocol v4 Addresses of the asset"""
  ipv6_address: [IpV6AddressAddInput!]

  """Indicates the media access control (MAC) address for the asset."""
  mac_address: [MAC!]

  """Indicates the full-qualified domain name (FQDN) of the asset."""
  fqdn: String

  """Indicates the NetBIOS name for the asset."""
  netbios_name: String

  """Indicates the Uniform Resource Identifier (URI) for the asset."""
  uri: URL

  """Identifies the network identifier of the asset."""
  network_id: String

  """Identifies the Virtual LAN identifier of the asset."""
  vlan_id: String

  """Identifies The name of the baseline configuration for the asset."""
  baseline_configuration_name: String

  """Identifies the function provided by the asset for the system."""
  function: String
}

type InventoryItemConnection {
  pageInfo: PageInfo!
  edges: [InventoryItemEdge]
}

type InventoryItemEdge {
  cursor: String!
  node: InventoryItem!
}

enum InventoryItemFilter {
  asset_type
  created
  modified
  labels
}

input InventoryItemsFiltering {
  key: InventoryItemFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum InventoryItemsOrdering {
  asset_type
  created
  modified
  labels
}

union IpAddress = IpV4Address | IpV6Address

type IpAddressRange {
  starting_ip_address: IpAddress!
  ending_ip_address: IpAddress!
}

"""
A field whose value is a IPv4 address: https://en.wikipedia.org/wiki/IPv4.
"""
scalar IPv4

type IPv4Addr implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  value: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input IPv4AddrAddInput {
  value: String
  belongsTo: [String]
  resolvesTo: [String]
}

type IpV4Address implements BasicObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  ip_address_value: IPv4!
}

input IpV4AddressAddInput {
  ip_address_value: IPv4!
}

input IpV4AddressRangeAddInput {
  starting_ip_address: IpV4AddressAddInput!
  ending_ip_address: IpV4AddressAddInput!
}

"""
A field whose value is a IPv6 address: https://en.wikipedia.org/wiki/IPv6.
"""
scalar IPv6

type IPv6Addr implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  value: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input IPv6AddrAddInput {
  value: String
}

type IpV6Address implements BasicObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  ip_address_value: IPv6!
}

input IpV6AddressAddInput {
  ip_address_value: IPv6!
}

input IpV6AddressRangeAddInput {
  starting_ip_address: IpV6AddressAddInput!
  ending_ip_address: IpV6AddressAddInput!
}

"""
An abstract interface that defines identifying information about an asset that
is technology-based, such as hardware, software, and networking.
"""
interface ItAsset {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  asset_id: String
  name: String!
  description: String
  locations: [AssetLocation]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
  asset_tag: String
  asset_type: AssetType!
  serial_number: String
  vendor_name: String
  version: String
  release_date: DateTime
  implementation_point: ImplementationPoint!
  operational_status: OperationalStatus!
}

type ItAssetConnection {
  pageInfo: PageInfo!
  edges: [ItAssetEdge]
}

type ItAssetEdge {
  cursor: String!
  node: ItAsset!
}

enum ItAssetsFilter {
  created
  modified
  labels
  asset_id
  asset_tag
  asset_type
  serial_number
  vendor_name
  version
  release_date
  implementation_point
  operational_status
}

input ItAssetsFiltering {
  key: ItAssetsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum ItAssetsOrdering {
  created
  modified
  labels
  asset_id
  name
  asset_tag
  asset_type
  serial_number
  vendor_name
  version
  release_date
  implementation_point
  operational_status
}

type KillChainPhase implements BasicObject & StixObject & StixMetaObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  created: DateTime
  modified: DateTime
  kill_chain_name: String!
  phase_name: String!
  x_opencti_order: Int
  editContext: [EditUserContext]
}

input KillChainPhaseAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  kill_chain_name: String!
  phase_name: String!
  x_opencti_order: Int!
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type KillChainPhaseConnection {
  pageInfo: PageInfo!
  edges: [KillChainPhaseEdge]
}

type KillChainPhaseEdge {
  cursor: String!
  node: KillChainPhase!
}

type KillChainPhaseEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!): KillChainPhase
  contextPatch(input: EditContext): KillChainPhase
  contextClean: KillChainPhase
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): KillChainPhase
}

enum KillChainPhasesFilter {
  kill_chain_name
  phase_name
}

input KillChainPhasesFiltering {
  key: KillChainPhasesFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum KillChainPhasesOrdering {
  x_opencti_order
  kill_chain_name
  phase_name
  created
  modified
  created_at
  updated_at
}

type Label implements BasicObject & StixObject & StixMetaObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  created: DateTime
  modified: DateTime
  value: String
  color: String
  toStix: String
  editContext: [EditUserContext]
}

input LabelAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  value: String!
  color: String
  created: DateTime
  modified: DateTime
  clientMutationId: String
}

type LabelConnection {
  pageInfo: PageInfo!
  edges: [LabelEdge]
}

type LabelEdge {
  cursor: String!
  node: Label!
}

type LabelEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!): Label
  contextPatch(input: EditContext): Label
  contextClean: Label
}

enum LabelsFilter {
  value
  markedBy
}

input LabelsFiltering {
  key: LabelsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum LabelsOrdering {
  value
  color
  created
  modified
  created_at
  updated_at
}

"""
A field whose value is a valid decimal degrees latitude number (53.471): https://en.wikipedia.org/wiki/Latitude
"""
scalar Latitude

"""Identifies the identifying information about a lifecycle object"""
interface LifecycleObject {
  """
  Identities the date and time at which the object was originally created.
  """
  created: DateTime!

  """Identifies the date and time at which the object was last modified."""
  modified: DateTime!
}

type ListTask implements Task {
  id: ID!
  type: TaskType
  initiator: User
  actions: [TaskAction]
  created_at: DateTime
  last_execution_date: DateTime
  completed: Boolean
  task_expected_number: Int
  task_processed_number: Int
  errors: [TaskError]
  task_ids: [ID!]
}

input ListTaskAddInput {
  ids: [ID!]
  actions: [TaskActionInput]!
}

interface Location {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  name: String!
  description: String
  latitude: Float
  longitude: Float
  precision: Float
  x_opencti_aliases: [String]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input LocationAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  type: LocationType!
  name: String!
  description: String
  latitude: Float
  longitude: Float
  precision: Float
  x_opencti_aliases: [String]
  confidence: Int
  revoked: Boolean
  lang: String
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
  update: Boolean
}

type LocationConnection {
  pageInfo: PageInfo!
  edges: [LocationEdge]
}

type LocationEdge {
  cursor: String!
  node: Location!
}

type LocationEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Location
  contextPatch(input: EditContext): Location
  contextClean: Location
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Location
}

enum LocationsFilter {
  entity_type
  name
  x_opencti_aliases
  confidence
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input LocationsFiltering {
  key: LocationsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum LocationsOrdering {
  name
  latitude
  longitude
  created
  modified
  created_at
  updated_at
  status_id
}

enum LocationType {
  City
  Country
  Region
  Position
}

type Log {
  id: ID!
  event_type: String!
  timestamp: DateTime!
  user_id: String!
  user: User
  context_data: ContextData
}

type LogConnection {
  pageInfo: PageInfo!
  edges: [LogEdge]
}

type LogEdge {
  cursor: String!
  node: Log!
}

enum LogEntriesFilter {
  created
  modified
  labels
}

input LogEntriesFiltering {
  key: LogEntriesFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum LogEntriesOrdering {
  event_start
  event_end
  labels
  entry_type
}

"""
Defines identifying information about a risk log entry of all risk-related tasks taken.
"""
type LogEntry implements BasicObject & LifecycleObject & CoreObject & OscalObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies the type of remediation tracking entry."""
  entry_type: [EntryType!]!

  """Identifies the name for the risk log entry."""
  name: String!

  """
  Identifies a human-readable description of of what was done regarding the risk.
  """
  description: String!

  """Identifies the start date and time of the event."""
  event_start: DateTime!

  """
  Identifies the end date and time of the event. If the event is a point in
  time, the start and end will be the same date and time.
  """
  event_end: DateTime

  """Used to indicate who created a log entry in what role."""
  logged_by: [PartyOrComponent]

  """
  Identifies a change in risk status made resulting from the task described by
  this risk log entry. This allows the risk's status history to be captured as a
  sequence of risk log entries.
  """
  status_change: RiskStatus

  """Identifies an individual risk response that this log entry is for."""
  related_responses(first: Int): RiskResponseConnection
}

"""
Defines identifying information about a risk log entry of all risk-related tasks taken.
"""
input LogEntryAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """Identifies the type of remediation tracking entry."""
  entry_type: [EntryType!]!

  """Identifies the name for the risk log entry."""
  name: String!

  """
  Identifies a human-readable description of of what was done regarding the risk.
  """
  description: String!

  """Identifies the start date and time of the event."""
  event_start: DateTime!

  """
  Identifies the end date and time of the event. If the event is a point in
  time, the start and end will be the same date and time.
  """
  event_end: DateTime

  """Used to indicate the person created a log entry in what role."""
  logged_by_person: [OscalPersonAddInput]

  """Used to indicate the organization created a log entry in what role."""
  logged_by_organization: [OscalOrganizationAddInput]

  """
  Identifies a change in risk status made resulting from the task described by
  this risk log entry. This allows the risk's status history to be captured as a
  sequence of risk log entries.
  """
  status_change: RiskStatus
}

type LogEntryConnection {
  pageInfo: PageInfo!
  edges: [LogEntryEdge]
}

type LogEntryEdge {
  cursor: String!
  node: LogEntry!
}

enum LogsFilter {
  event_type
  entity_id
  connection_id
  user_id
  applicant_id
}

input LogsFiltering {
  key: LogsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum LogsOrdering {
  event
  timestamp
}

type LogsWorkerConfig {
  elasticsearch_url: [String]!
  elasticsearch_proxy: String
  elasticsearch_index: String!
  elasticsearch_username: String
  elasticsearch_password: String
  elasticsearch_api_key: String
  elasticsearch_ssl_reject_unauthorized: Boolean
}

"""
A field whose value is a valid decimal degrees longitude number (53.471): https://en.wikipedia.org/wiki/Longitude
"""
scalar Longitude

"""
A field whose value is a IEEE 802 48-bit MAC address: https://en.wikipedia.org/wiki/MAC_address.
"""
scalar MAC

type MacAddr implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  value: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input MacAddrAddInput {
  value: String
}

type Malware implements BasicObject & StixObject & StixCoreObject & StixDomainObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  name: String!
  description: String
  aliases: [String]
  malware_types: [String]
  is_family: Boolean
  first_seen: DateTime
  last_seen: DateTime
  architecture_execution_envs: [String]
  implementation_languages: [String]
  capabilities: [String]
  killChainPhases: KillChainPhaseConnection
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input MalwareAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String!
  malware_types: [String]
  aliases: [String]
  is_family: Boolean
  first_seen: DateTime
  last_seen: DateTime
  architecture_execution_envs: [String]
  implementation_languages: [String]
  capabilities: [String]
  confidence: Int
  revoked: Boolean
  lang: String
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  killChainPhases: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type MalwareConnection {
  pageInfo: PageInfo!
  edges: [MalwareEdge]
}

type MalwareEdge {
  cursor: String!
  node: Malware!
}

type MalwareEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Malware
  contextPatch(input: EditContext): Malware
  contextClean: Malware
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Malware
}

enum MalwaresFilter {
  name
  aliases
  malware_types
  first_seen
  last_seen
  is_family
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input MalwaresFiltering {
  key: MalwaresFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum MalwaresOrdering {
  name
  malware_types
  first_seen
  last_seen
  created
  modified
  created_at
  updated_at
  objectMarking
  objectLabel
  status_id
}

type MarkingDefinition implements BasicObject & StixObject & StixMetaObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  created: DateTime
  modified: DateTime
  definition_type: String
  definition: String
  x_opencti_order: Int!
  x_opencti_color: String
  toStix: String
  editContext: [EditUserContext]
}

input MarkingDefinitionAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  definition_type: String!
  definition: String!
  x_opencti_order: Int!
  x_opencti_color: String
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type MarkingDefinitionConnection {
  pageInfo: PageInfo!
  edges: [MarkingDefinitionEdge]
}

type MarkingDefinitionEdge {
  cursor: String!
  node: MarkingDefinition!
}

type MarkingDefinitionEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!): MarkingDefinition
  contextPatch(input: EditContext): MarkingDefinition
  contextClean: MarkingDefinition
}

enum MarkingDefinitionsFilter {
  definition
  definition_type
  markedBy
}

input MarkingDefinitionsFiltering {
  key: MarkingDefinitionsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum MarkingDefinitionsOrdering {
  definition_type
  definition
  x_opencti_order
  x_opencti_color
  created
  modified
  created_at
  updated_at
}

type MessagesStats {
  ack: String
  ack_details: AckDetails
}

"""Defined the types of methods for making an observation."""
enum MethodTypes {
  """An inspection was performed."""
  EXAMINE

  """An interview was performed."""
  INTERVIEW

  """A manual or automated test was performed."""
  TEST
}

"""Defines identifying information about a mitigation factor."""
type MitigatingFactor implements BasicObject & LifecycleObject & CoreObject & OscalObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies a human-readable description of this mitigating factor."""
  description: String

  """
  Identifies a reference to one or more subjects of the observations.  The
  subject indicates what was observed, who was interviewed, or what was tested or inspected.
  """
  subjects: SubjectConnection
}

"""Defines identifying information about an OSCAL Model."""
interface Model {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies the name given to the document."""
  name: String!

  """Identifies the date and time the document was published."""
  published: DateTime

  """Identifies the date and time the document as last modified."""
  last_modified: DateTime!

  """Identifies the current version of the document."""
  version: String!

  """Identifies the OSCAL model version the document was authored against."""
  oscal_version: String!

  """Identifies a list of revisions to the containing document."""
  revisions: [Revision]

  """Identifies references to previous versions of this document."""
  document_ids: [ID]

  """
  Identifies one or more references to a function assumed or expected to be assumed by a party in a specific situation.
  """
  roles(first: Int): OscalRoleConnection

  """Identifies one or more references to a location."""
  locations(first: Int): OscalLocationConnection

  """
  Identifies one or more references to a responsible entity which is either a person or an organization.
  """
  parties(first: Int): OscalPartyConnection

  """
  Identifies one or more references to a set of organizations or persons that
  have responsibility for performing a referenced role in the context of the
  containing object.
  """
  responsible_parties(first: Int): OscalResponsiblePartyConnection
  resources(first: Int): OscalResourceConnection
}

type Module {
  id: ID!
  enable: Boolean!
}

type Mutation {
  deleteImport(fileName: String): Boolean
  uploadImport(file: Upload!): File
  askJobImport(fileName: ID!, connectorId: String, bypassEntityId: String): File
  synchronizerAdd(input: SynchronizerAddInput): Synchronizer
  synchronizerEdit(id: ID!): SynchronizerEditMutations
  synchronizerStart(id: ID!): Synchronizer
  synchronizerStop(id: ID!): Synchronizer
  synchronizerTest(input: SynchronizerAddInput): String
  workAdd(connectorId: String!, friendlyName: String): Work!
  workEdit(id: ID!): WorkEditMutations
  workDelete(connectorId: String!): Boolean
  deleteTask(id: ID!): ID!
  listTaskAdd(input: ListTaskAddInput): Task!
  queryTaskAdd(input: QueryTaskAddInput): Task!
  ruleSetActivation(id: ID!, enable: Boolean!): Rule!
  ruleManagerClean(eventId: ID): RuleManager!
  token(input: UserLoginInput): String
  settingsEdit(id: ID!): SettingsEditMutations
  subTypeEdit(id: ID!): SubTypeEditMutations
  groupAdd(input: GroupAddInput): Group
  groupEdit(id: ID!): GroupEditMutations
  userAdd(input: UserAddInput): User
  userEdit(id: ID!): UserEditMutations
  meTokenRenew: User
  meEdit(input: [EditInput]!): User
  bookmarkAdd(id: ID!, type: String!): StixDomainObject
  bookmarkDelete(id: ID!): ID
  logout: ID
  roleAdd(input: RoleAddInput): Role
  sessionKill(id: ID!): ID
  userSessionsKill(id: ID!): [ID]
  roleEdit(id: ID!): RoleEditMutations
  pingConnector(id: ID!, state: String): Connector
  registerConnector(input: RegisterConnectorInput): Connector
  resetStateConnector(id: ID!): Connector
  deleteConnector(id: ID!): ID!
  attributeAdd(input: AttributeAddInput): Attribute
  attributeEdit(id: ID!): AttributeEditMutations
  workspaceAdd(input: WorkspaceAddInput): Workspace
  workspaceEdit(id: ID!): WorkspaceEditMutations
  taxiiCollectionAdd(input: TaxiiCollectionAddInput): TaxiiCollection
  taxiiCollectionEdit(id: ID!): TaxiiCollectionEditMutations
  streamCollectionAdd(input: StreamCollectionAddInput): StreamCollection
  streamCollectionEdit(id: ID!): StreamCollectionEditMutations
  userSubscriptionAdd(input: UserSubscriptionAddInput): UserSubscription
  userSubscriptionEdit(id: ID!): UserSubscriptionEditMutations
  stixEdit(id: ID!): StixEditMutations
  markingDefinitionAdd(input: MarkingDefinitionAddInput): MarkingDefinition
  markingDefinitionEdit(id: ID!): MarkingDefinitionEditMutations
  labelAdd(input: LabelAddInput): Label
  labelEdit(id: ID!): LabelEditMutations
  externalReferenceAdd(input: ExternalReferenceAddInput): ExternalReference
  externalReferenceEdit(id: ID!): ExternalReferenceEditMutations
  killChainPhaseAdd(input: KillChainPhaseAddInput): KillChainPhase
  killChainPhaseEdit(id: ID!): KillChainPhaseEditMutations
  stixCoreObjectEdit(id: ID!): StixCoreObjectEditMutations
  stixDomainObjectAdd(input: StixDomainObjectAddInput): StixDomainObject
  stixDomainObjectEdit(id: ID!): StixDomainObjectEditMutations
  stixDomainObjectsExportAsk(type: String!, format: String!, exportType: String!, maxMarkingDefinition: String, context: String, search: String, orderBy: StixDomainObjectsOrdering, orderMode: OrderingMode, filters: [StixDomainObjectsFiltering], filterMode: FilterMode): FileConnection
  stixDomainObjectsDelete(id: [ID]!): [ID]!
  stixDomainObjectsExportPush(type: String!, file: Upload!, listFilters: String): Boolean
  attackPatternAdd(input: AttackPatternAddInput): AttackPattern
  attackPatternEdit(id: ID!): AttackPatternEditMutations
  campaignAdd(input: CampaignAddInput): Campaign
  campaignEdit(id: ID!): CampaignEditMutations
  containerEdit(id: ID!): ContainerEditMutations
  noteAdd(input: NoteAddInput): Note
  noteEdit(id: ID!): NoteEditMutations
  observedDataAdd(input: ObservedDataAddInput): ObservedData
  observedDataEdit(id: ID!): ObservedDataEditMutations
  opinionAdd(input: OpinionAddInput): Opinion
  opinionEdit(id: ID!): OpinionEditMutations
  reportAdd(input: ReportAddInput): Report
  reportEdit(id: ID!): ReportEditMutations
  courseOfActionAdd(input: CourseOfActionAddInput): CourseOfAction
  courseOfActionEdit(id: ID!): CourseOfActionEditMutations
  identityAdd(input: IdentityAddInput): Identity
  identityEdit(id: ID!): IdentityEditMutations
  individualAdd(input: IndividualAddInput): Individual
  individualEdit(id: ID!): IndividualEditMutations
  organizationAdd(input: OrganizationAddInput): Organization
  organizationEdit(id: ID!): OrganizationEditMutations
  sectorAdd(input: SectorAddInput): Sector
  sectorEdit(id: ID!): SectorEditMutations
  systemAdd(input: SystemAddInput): System
  systemEdit(id: ID!): SystemEditMutations
  indicatorAdd(input: IndicatorAddInput): Indicator
  indicatorEdit(id: ID!): IndicatorEditMutations
  infrastructureAdd(input: InfrastructureAddInput): Infrastructure
  infrastructureEdit(id: ID!): InfrastructureEditMutations
  intrusionSetAdd(input: IntrusionSetAddInput): IntrusionSet
  intrusionSetEdit(id: ID!): IntrusionSetEditMutations
  locationAdd(input: LocationAddInput): Location
  locationEdit(id: ID!): LocationEditMutations
  cityAdd(input: CityAddInput): City
  cityEdit(id: ID!): CityEditMutations
  countryAdd(input: CountryAddInput): Country
  countryEdit(id: ID!): CountryEditMutations
  regionAdd(input: RegionAddInput): Region
  regionEdit(id: ID!): RegionEditMutations
  positionAdd(input: PositionAddInput): Position
  positionEdit(id: ID!): PositionEditMutations
  malwareAdd(input: MalwareAddInput): Malware
  malwareEdit(id: ID!): MalwareEditMutations
  threatActorAdd(input: ThreatActorAddInput): ThreatActor
  threatActorEdit(id: ID!): ThreatActorEditMutations
  toolAdd(input: ToolAddInput): Tool
  toolEdit(id: ID!): ToolEditMutations
  vulnerabilityAdd(input: VulnerabilityAddInput): Vulnerability
  vulnerabilityEdit(id: ID!): VulnerabilityEditMutations
  incidentAdd(input: IncidentAddInput): Incident
  incidentEdit(id: ID!): IncidentEditMutations
  stixCyberObservableAdd(type: String!, stix_id: String, x_opencti_score: Int, x_opencti_description: String, createIndicator: Boolean, createdBy: String, objectMarking: [String], objectLabel: [String], externalReferences: [String], clientMutationId: String, update: Boolean, AutonomousSystem: AutonomousSystemAddInput, Directory: DirectoryAddInput, DomainName: DomainNameAddInput, EmailAddr: EmailAddrAddInput, EmailMessage: EmailMessageAddInput, EmailMimePartType: EmailMimePartTypeAddInput, Artifact: ArtifactAddInput, StixFile: StixFileAddInput, X509Certificate: X509CertificateAddInput, IPv4Addr: IPv4AddrAddInput, IPv6Addr: IPv6AddrAddInput, MacAddr: MacAddrAddInput, Mutex: MutexAddInput, NetworkTraffic: NetworkTrafficAddInput, Process: ProcessAddInput, Software: SoftwareAddInput, Url: UrlAddInput, UserAccount: UserAccountAddInput, WindowsRegistryKey: WindowsRegistryKeyAddInput, WindowsRegistryValueType: WindowsRegistryValueTypeAddInput, X509V3ExtensionsType: X509V3ExtensionsTypeAddInput, XOpenCTICryptographicKey: XOpenCTICryptographicKeyAddInput, XOpenCTICryptocurrencyWallet: XOpenCTICryptocurrencyWalletAddInput, XOpenCTIHostname: XOpenCTIHostnameAddInput, XOpenCTIText: XOpenCTITextAddInput, XOpenCTIUserAgent: XOpenCTIUserAgentAddInput): StixCyberObservable
  stixCyberObservableEdit(id: ID!): StixCyberObservableEditMutations
  stixCyberObservablesExportAsk(format: String!, exportType: String!, maxMarkingDefinition: String, context: String, types: [String], search: String, orderBy: StixCyberObservablesOrdering, orderMode: OrderingMode, filters: [StixCyberObservablesFiltering], filterMode: FilterMode): FileConnection
  stixCyberObservablesExportPush(file: Upload!, listFilters: String): Boolean
  artifactImport(file: Upload!, x_opencti_description: String, createdBy: String, objectMarking: [String], objectLabel: [String]): Artifact
  stixCoreRelationshipAdd(input: StixCoreRelationshipAddInput, reversedReturn: Boolean): StixCoreRelationship
  stixCoreRelationshipEdit(id: ID!): StixCoreRelationshipEditMutations
  stixCoreRelationshipDelete(fromId: String!, toId: String!, relationship_type: String!): Boolean!
  stixCyberObservableRelationshipAdd(input: StixCyberObservableRelationshipAddInput): StixCyberObservableRelationship
  stixCyberObservableRelationshipEdit(id: ID!): StixCyberObservableRelationshipEditMutations
  stixSightingRelationshipAdd(input: StixSightingRelationshipAddInput): StixSightingRelationship
  stixSightingRelationshipEdit(id: ID!): StixSightingRelationshipEditMutations
  addReference(input: ReferenceAddInput): Boolean
  removeReference(input: ReferenceAddInput): Boolean
  createCyioNote(input: CyioNoteAddInput): CyioNote
  deleteCyioNote(id: ID!): String!
  editCyioNote(id: ID!, input: [EditInput]!, commitMessage: String): CyioNote
  createAssetLocation(input: AssetLocationAddInput): AssetLocation
  deleteAssetLocation(id: ID!): String!
  editAssetLocation(id: ID!, input: [EditInput]!, commitMessage: String): AssetLocation
  addComputingDeviceAsset(input: ComputingDeviceAssetAddInput): ComputingDeviceAsset
  deleteComputingDeviceAsset(id: ID!): String!
  editComputingDeviceAsset(id: ID!, input: [EditInput]!, commitMessage: String): ComputingDeviceAsset
  createNetworkAsset(input: NetworkAssetAddInput): NetworkAsset
  deleteNetworkAsset(id: ID!): String!
  editNetworkAsset(id: ID!, input: [EditInput]!, commitMessage: String): NetworkAsset
  createSoftwareAsset(input: SoftwareAssetAddInput): SoftwareAsset
  deleteSoftwareAsset(id: ID!): String!
  editSoftwareAsset(id: ID!, input: [EditInput]!, commitMessage: String): SoftwareAsset
  createOperatingSystemAsset(input: OperatingSystemAssetAddInput): OperatingSystemAsset
  deleteOperatingSystemAsset(id: ID!): String!
  editOperatingSystemAsset(id: ID!, input: [EditInput]!, commitMessage: String): OperatingSystemAsset
  createApplicationSoftwareAsset(input: OperatingSystemAssetAddInput): ApplicationSoftwareAsset
  deleteApplicationSoftwareAsset(id: ID!): String!
  editApplicationSoftwareAsset(id: ID!, input: [EditInput]!, commitMessage: String): ApplicationSoftwareAsset
  createBase64Content(input: Base64ContentAddInput): Base64Content
  deleteBase64Content(id: ID!): String!
  editBase64Content(id: ID!, input: [EditInput]!, commitMessage: String): Base64Content
  createCitation(input: CitationAddInput): Citation
  deleteCitation(id: ID!): String!
  editCitation(id: ID!, input: [EditInput]!, commitMessage: String): Citation
  createOscalLocation(input: OscalLocationAddInput): OscalLocation
  deleteOscalLocation(id: ID!): String!
  editOscalLocation(id: ID!, input: [EditInput]!, commitMessage: String): OscalLocation
  createOscalOrganization(input: OscalOrganizationAddInput): OscalOrganization
  deleteOscalOrganization(id: ID!): String!
  editOscalOrganization(id: ID!, input: [EditInput]!, commitMessage: String): OscalOrganization
  createOscalPerson(input: OscalPersonAddInput): OscalPerson
  deleteOscalPerson(id: ID!): String!
  editOscalPerson(id: ID!, input: [EditInput]!, commitMessage: String): OscalPerson
  createOscalRelationship(input: OscalRelationshipAddInput): OscalRelationship
  deleteOscalRelationship(id: ID!): String!
  editOscalRelationship(id: ID!, input: [EditInput]!, commitMessage: String): OscalRelationship
  createOscalResource(input: OscalResourceAddInput): OscalResource
  deleteOscalResource(id: ID!): String!
  editOscalResource(id: ID!, input: [EditInput]!, commitMessage: String): OscalResource
  createOscalResponsibleParty(input: OscalResponsiblePartyAddInput): OscalResponsibleParty
  deleteOscalResponsibleParty(id: ID!): String!
  editOscalResponsibleParty(id: ID!, input: [EditInput]!, commitMessage: String): OscalResponsibleParty
  createOscalRole(input: OscalRoleAddInput): OscalRole
  deleteOscalRole(id: ID!): String!
  editOscalRole(id: ID!, input: [EditInput]!, commitMessage: String): OscalRole
  createOscalUser(input: OscalUserAddInput): OscalUser
  deleteOscalUser(id: ID!): String!
  editOscalUser(id: ID!, input: [EditInput]!, commitMessage: String): OscalUser
  createFacet(input: FacetAddInput): Facet
  deleteFacet(id: ID!): String!
  editFacet(id: ID!, input: [EditInput]!, commitMessage: String): Facet
  createGenericCharacterization(input: GenericCharacterizationAddInput): GenericCharacterization
  deleteGenericCharacterization(id: ID!): String!
  editGenericCharacterization(id: ID!, input: [EditInput]!, commitMessage: String): GenericCharacterization
  createLogEntry(input: LogEntryAddInput): LogEntry
  deleteLogEntry(id: ID!): String!
  editLogEntry(id: ID!, input: [EditInput]!, commitMessage: String): LogEntry
  createRemediationTask(input: RemediationTaskAddInput): RemediationTask
  deleteRemediationTask(id: ID!): String!
  editRemediation(id: ID!, input: [EditInput]!, commitMessage: String): RemediationTask
  createRisk(input: RiskAddInput): Risk
  deleteRisk(id: ID!): String!
  editRisk(id: ID!, input: [EditInput]!, commitMessage: String): Risk
  createRiskCharacterization(input: RiskCharacterizationAddInput): RiskCharacterization
  deleteRiskCharacterization(id: ID!): String!
  editRiskCharacterization(id: ID!, input: [EditInput]!, commitMessage: String): RiskCharacterization
  createRiskResponse(input: RiskResponseAddInput): RiskResponse
  deleteRiskResponse(id: ID!): String!
  editRiskResponse(id: ID!, input: [EditInput]!, commitMessage: String): RiskResponse
  createSubject(input: SubjectAddInput): Subject
  deleteSubject(id: ID!): String!
  editSubject(id: ID!, input: [EditInput]!, commitMessage: String): Subject
  createVulnerabilityCharacterization(input: VulnerabilityCharacterizationAddInput): VulnerabilityCharacterization
  deleteVulnerabilityCharacterization(id: ID!): String!
  editVulnerabilityCharacterization(id: ID!, input: [EditInput]!, commitMessage: String): VulnerabilityCharacterization
  createComponent(input: ComponentAddInput): Component
  deleteComponent(id: ID!): String!
  editComponent(id: ID!, input: [EditInput]!, commitMessage: String): Component
  createHardwareComponent(input: HardwareComponentAddInput): HardwareComponent
  deleteHardwareComponent(id: ID!): String!
  editHardwareComponent(id: ID!, input: [EditInput]!, commitMessage: String): HardwareComponent
  createNetworkComponent(input: NetworkComponentAddInput): NetworkComponent
  deleteNetworkComponent(id: ID!): String!
  editNetworkComponent(id: ID!, input: [EditInput]!, commitMessage: String): NetworkComponent
  createServiceComponent(input: HardwareComponentAddInput): ServiceComponent
  deleteServiceComponent(id: ID!): String!
  editServiceComponent(id: ID!, input: [EditInput]!, commitMessage: String): ServiceComponent
  createSoftwareComponent(input: SoftwareComponentAddInput): SoftwareComponent
  deleteSoftwareComponent(id: ID!): String!
  editSoftwareComponent(id: ID!, input: [EditInput]!, commitMessage: String): SoftwareComponent
  createSystemComponent(input: SystemComponentAddInput): SystemComponent
  deleteSystemComponent(id: ID!): String!
  editSystemComponent(id: ID!, input: [EditInput]!, commitMessage: String): SystemComponent
  createInventoryItem(input: InventoryItemAddInput): InventoryItem
  deleteInventoryItem(id: ID!): String!
  editInventory(id: ID!, input: [EditInput]!, commitMessage: String): InventoryItem
  createPOAM(input: POAMAddInput): POAM
  deletePOAM(id: ID!): String!
  editPOAM(id: ID!, input: [EditInput]!, commitMessage: String): POAM
  createPOAMItem(input: POAMItemAddInput): POAMItem
  deletePOAMItem(id: ID!): String!
  editPOAMItem(id: ID!, input: [EditInput]!, commitMessage: String): POAMItem
}

type Mutex implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  name: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input MutexAddInput {
  name: String
}

"""Defines identifying information about a network."""
type NetworkAsset implements BasicObject & LifecycleObject & CoreObject & Asset & ItAsset {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  asset_id: String
  name: String!
  description: String
  locations: [AssetLocation]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
  asset_tag: String
  asset_type: AssetType!
  serial_number: String
  vendor_name: String
  version: String
  release_date: DateTime
  implementation_point: ImplementationPoint!
  operational_status: OperationalStatus!
  network_id: String!
  network_name: String!
  network_address_range: IpAddressRange
}

input NetworkAssetAddInput {
  labels: [String]
  asset_id: String
  name: String!
  description: String
  asset_tag: String
  asset_type: AssetType!
  serial_number: String
  vendor_name: String
  version: String
  release_date: DateTime
  implementation_point: ImplementationPoint!
  operational_status: OperationalStatus!
  network_id: String!
  network_name: String!
  network_ipv4_address_range: IpV4AddressRangeAddInput
  network_ipv6_address_range: IpV6AddressRangeAddInput
}

type NetworkAssetConnection {
  pageInfo: PageInfo!
  edges: [NetworkAssetEdge]
}

type NetworkAssetEdge {
  cursor: String!
  node: NetworkAsset!
}

enum NetworkAssetFilter {
  name
  asset_type
  asset_id
  ip_address
  installed_operating_system
  network_id
  labels
}

input NetworkAssetFiltering {
  key: NetworkAssetFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum NetworkAssetOrdering {
  name
  asset_type
  asset_id
  ip_address
  installed_operating_system
  network_id
  labels
}

"""Defines network protocols"""
enum NetworkAssetProtocol {
  TCP
  UDP
  ICMP
  TLS
  SSL
  DHCP
  DNS
  HTTP
  HTTPS
  NFS
  POP3
  SMTP
  SNMP
  FTP
  NTP
  IRC
  Telnet
  SSH
  TFTP
  IMAP
  ARP
  NetBIOS
  SOAP
  IP
  IPSEC
  IPX
  NAT
  OSPF
  RDP
  RIP
  RPC
  SPX
  SMB
  SOCKS
}

type NetworkComponent implements BasicObject & LifecycleObject & CoreObject & OscalObject & Component {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Indicates the type of the component"""
  component_type: ComponentType!

  """Identifies a human-readable name for the component"""
  name: String!

  """
  Identifies a description of the component, including information about its function.
  """
  description: String!

  """
  Identifies a summary of the technological or business purpose of the component.
  """
  purpose: String

  """
  Identifies an organizationally specific identifier that is used to uniquely
  identify a logical or tangible item by the organization that owns the item.
  """
  asset_id: String

  """
  Identifies an asset tag assigned by the organization responsible for maintaining the logical or tangible item.
  """
  asset_tag: String

  """
  Indicates the asset's function, such as Router, Storage Array, DNS Server.
  """
  asset_type: AssetType!

  """Identifies the  model of the component."""
  model: String

  """Identifies the name of the company or organization"""
  vendor_name: String

  """Indicates the version of the component."""
  version: String

  """
  Identifies date the component was released, such as a software release date or policy publication date.
  """
  release_date: DateTime

  """
  Indicates relative placement of component ('internal' or 'external') to the system.
  """
  implementation_point: ImplementationPoint!

  """Identifies whether the asset can be check with an authenticated scan"""
  allows_authenticated_scans: Boolean

  """Identifies whether the asset is publicly accessible"""
  is_publicly_accessible: Boolean

  """Identifies whether the asset is virtualized"""
  is_virtual: Boolean

  """Identifies the network identifier of the asset."""
  network_id: String

  """Identifies the Virtual LAN identifier of the asset."""
  vlan_id: String

  """Identifies The name of the baseline configuration for the asset."""
  baseline_configuration_name: String

  """Identifies the function provided by the asset for the system."""
  function: String

  """Indicates the operational status of the system component."""
  operational_status: OperationalStatus!

  """
  Indicates references to one or more roles with responsibility for performing a function relative to the containing object.
  """
  responsible_roles: [OscalResponsibleParty]

  """
  Indicates the physical location of the asset's hardware (e.g., Data Center ID,
  Cage#, Rack#, or other meaningful location identifiers).
  """
  physical_location: [OscalLocation]

  """Indicates the name assigned to the network"""
  network_name: String!

  """Indicate the IP address range of the network"""
  network_address_range: IpAddressRange
}

input NetworkComponentAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """Indicates the type of the component"""
  component_type: ComponentType!

  """Identifies a human-readable name for the component"""
  name: String!

  """
  Identifies a description of the component, including information about its function.
  """
  description: String!

  """
  Identifies a summary of the technological or business purpose of the component.
  """
  purpose: String

  """
  Identifies an organizationally specific identifier that is used to uniquely
  identify a logical or tangible item by the organization that owns the item.
  """
  asset_id: String

  """
  Identifies an asset tag assigned by the organization responsible for maintaining the logical or tangible item.
  """
  asset_tag: String

  """
  Indicates the asset's function, such as Router, Storage Array, DNS Server.
  """
  asset_type: AssetType!

  """Identifies the  model of the component."""
  model: String

  """Identifies the name of the company or organization"""
  vendor_name: String

  """Indicates the version of the component."""
  version: String

  """
  Identifies date the component was released, such as a software release date or policy publication date.
  """
  release_date: DateTime

  """
  Indicates relative placement of component ('internal' or 'external') to the system.
  """
  implementation_point: ImplementationPoint!

  """Identifies whether the asset can be check with an authenticated scan"""
  allows_authenticated_scans: Boolean

  """Identifies whether the asset is publicly accessible"""
  is_publicly_accessible: Boolean

  """Identifies whether the asset is virtualized"""
  is_virtual: Boolean

  """Identifies the network identifier of the asset."""
  network_id: String

  """Identifies the Virtual LAN identifier of the asset."""
  vlan_id: String

  """Identifies The name of the baseline configuration for the asset."""
  baseline_configuration_name: String

  """Identifies the function provided by the asset for the system."""
  function: String

  """Indicates the operational status of the system component."""
  operational_status: OperationalStatus!

  """Indicates the name assigned to the network"""
  network_name: String!

  """Indicates the IPv4 address range of the network"""
  network_ipv4_address_range: IpV4AddressRangeAddInput

  """Indicates the IPv6 address range of the network"""
  network_ipv6_address_range: IpV6AddressRangeAddInput
}

type NetworkComponentConnection {
  pageInfo: PageInfo!
  edges: [NetworkComponentEdge]
}

type NetworkComponentEdge {
  cursor: String!
  node: NetworkComponent!
}

enum NetworkComponentsFilter {
  component_type
  asset_type
  created
  modified
  labels
  network_name
  network_id
}

input NetworkComponentsFiltering {
  key: NetworkComponentsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum NetworkComponentsOrdering {
  component_type
  asset_type
  created
  modified
  labels
  network_name
  network_id
}

type NetworkTraffic implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  extensions: String
  start: DateTime
  end: DateTime
  is_active: Boolean
  src_port: Int
  dst_port: Int
  protocols: [String]
  src_byte_count: Int
  dst_byte_count: Int
  src_packets: Int
  dst_packets: Int
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input NetworkTrafficAddInput {
  extensions: String
  start: DateTime
  end: DateTime
  is_active: Boolean
  src_port: Int
  dst_port: Int
  protocols: [String]
  src_byte_count: Int
  dst_byte_count: Int
  src_packets: Int
  dst_packets: Int
}

scalar NonNegativeInt

type Note implements BasicObject & StixObject & StixCoreObject & StixDomainObject & Container {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  objects(first: Int, after: ID, orderBy: StixObjectOrStixRelationshipsOrdering, orderMode: OrderingMode, filters: [StixObjectOrStixRelationshipsFiltering], filterMode: FilterMode, search: String, types: [String], all: Boolean): StixObjectOrStixRelationshipConnection
  attribute_abstract: String
  content: String!
  authors: [String]
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input NoteAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  attribute_abstract: String
  content: String!
  authors: [String]
  revoked: Boolean
  lang: String
  confidence: Int
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  objects: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type NoteConnection {
  pageInfo: PageInfo!
  edges: [NoteEdge]
}

type NoteEdge {
  cursor: String!
  node: Note!
}

type NoteEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Note
  contextPatch(input: EditContext): Note
  contextClean: Note
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Note
}

enum NotesFilter {
  attribute_abstract
  content
  authors
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  objectContains
  status_id
}

input NotesFiltering {
  key: NotesFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum NotesOrdering {
  attribute_abstract
  created
  modified
  created_at
  updated_at
  createdBy
  status_id
}

type Number {
  total: Int!
  count: Int!
}

"""Defines the reasons for the objective status"""
enum ObjectiveStatusReason {
  """The target system or system component satisfied all the conditions."""
  pass

  """
  The target system or system component did not satisfy all the conditions.
  """
  fail

  """
  The target system or system component did not satisfy all the conditions.
  """
  other
}

"""Defines the states of the objective status"""
enum ObjectiveStatusState {
  """The objective has been completely satisfied"""
  satisfied

  """
  The objective has not been completely satisfied, but may be partially satisfied
  """
  not_satisfied
}

type ObjectTotals {
  channels: String
  consumers: String
  queues: String
}

"""Defines identifying information about an observation."""
type Observation implements BasicObject & LifecycleObject & CoreObject & OscalObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies the name for the observation."""
  name: String!

  """Identifies a human-readable description of the assessment observation."""
  description: String!

  """Identifies how the observation was made."""
  methods: MethodTypes!

  """
  Identifies the nature of the observation. More than one may be used to further qualify and enable filtering.
  """
  observation_types: [ObservationType]

  """
  Identifies one or more sources of the finding, such as a tool, interviewed person, or activity.
  """
  origins(first: Int): OriginConnection

  """
  Identifies a reference to one or more subjects of the observations.  The
  subject indicates what was observed, who was interviewed, or what was tested or inspected.
  """
  subjects: SubjectConnection

  """Identifies relevant evidence collected as part of this observation."""
  relevant_evidence: [Evidence]

  """
  Identifies a Date/time stamp identifying when the finding information was collected.
  """
  collected: DateTime!

  """
  Identifies Date/time identifying when the finding information is out-of-date
  and no longer valid. Typically used with continuous assessment scenarios.
  """
  expires: DateTime
}

type ObservationConnection {
  pageInfo: PageInfo!
  edges: [ObservationEdge]
}

type ObservationEdge {
  cursor: String!
  node: Observation!
}

enum ObservationsFilter {
  created
  modified
  labels
  method
  observation_types
  collected
  expires
}

input ObservationsFiltering {
  key: ObservationsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum ObservationsOrdering {
  created
  modified
  labels
  name
  methods
  observation_types
  collected
  expires
}

"""Defines the types of observations"""
enum ObservationType {
  """
  Identifies the nature of the observation. More than one may be used to further qualify and enable filtering.
  """
  ssp_statement_issue

  """An observation about the status of a the associated control objective."""
  control_objective

  """A mitigating factor was identified."""
  mitigation

  """
  An assessment finding. Used for observations made by tools, penetration testing, and other means.
  """
  finding

  """
  An observation from a past assessment, which was converted to OSCAL at a later date.
  """
  historic
}

type ObservedData implements BasicObject & StixObject & StixCoreObject & StixDomainObject & Container {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  objects(first: Int, after: ID, orderBy: StixObjectOrStixRelationshipsOrdering, orderMode: OrderingMode, filters: [StixObjectOrStixRelationshipsFiltering], filterMode: FilterMode, search: String, types: [String], all: Boolean): StixObjectOrStixRelationshipConnection
  first_observed: DateTime!
  last_observed: DateTime!
  number_observed: Int!
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input ObservedDataAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  first_observed: DateTime
  last_observed: DateTime
  number_observed: Int
  revoked: Boolean
  lang: String
  confidence: Int
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  objects: [String]!
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type ObservedDataConnection {
  pageInfo: PageInfo!
  edges: [ObservedDataEdge]
}

type ObservedDataEdge {
  cursor: String!
  node: ObservedData!
}

type ObservedDataEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): ObservedData
  contextPatch(input: EditContext): ObservedData
  contextClean: ObservedData
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): ObservedData
}

enum ObservedDatasFilter {
  first_observed
  last_observed
  number_observed
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  objectContains
  status_id
}

input ObservedDatasFiltering {
  key: ObservedDatasFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum ObservedDatasOrdering {
  first_observed
  last_observed
  number_observed
  created
  modified
  created_at
  updated_at
  createdBy
  status_id
}

"""
Defines identifying information about an Event Timing that occur on a specific date.
"""
type OnDateTiming {
  """Identifies the date that the task must occur on."""
  on_date: DateTime!
}

input OnDateTimingAddInput {
  on_date: DateTime!
}

"""
Defines identifying information about an instance of operating system software.
"""
type OperatingSystemAsset implements BasicObject & LifecycleObject & CoreObject & Asset & ItAsset {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  asset_id: String
  name: String!
  description: String
  locations: [AssetLocation]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
  asset_tag: String
  asset_type: AssetType!
  serial_number: String
  vendor_name: String
  version: String
  release_date: DateTime
  implementation_point: ImplementationPoint!
  operational_status: OperationalStatus!
  function: String
  cpe_identifier: String
  software_identifier: String
  patch_level: String
  installation_id: String
  license_key: String
  family: FamilyType
}

input OperatingSystemAssetAddInput {
  labels: [String]
  asset_id: String
  name: String!
  description: String
  asset_tag: String
  asset_type: AssetType!
  serial_number: String
  vendor_name: String
  version: String
  release_date: DateTime
  implementation_point: ImplementationPoint!
  operational_status: OperationalStatus!
  function: String
  cpe_identifier: String
  software_identifier: String
  patch_level: String
  installation_id: String
  license_key: String
  family: FamilyType
}

enum OperationalStatus {
  operational
  under_development
  under_major_modification
  disposition
  other
}

type Opinion implements BasicObject & StixObject & StixCoreObject & StixDomainObject & Container {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  objects(first: Int, after: ID, orderBy: StixObjectOrStixRelationshipsOrdering, orderMode: OrderingMode, filters: [StixObjectOrStixRelationshipsFiltering], filterMode: FilterMode, search: String, types: [String], all: Boolean): StixObjectOrStixRelationshipConnection
  explanation: String
  authors: [String]
  opinion: String!
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input OpinionAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  opinion: String!
  explanation: String
  authors: [String]
  revoked: Boolean
  lang: String
  confidence: Int
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  objects: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type OpinionConnection {
  pageInfo: PageInfo!
  edges: [OpinionEdge]
}

type OpinionEdge {
  cursor: String!
  node: Opinion!
}

type OpinionEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Opinion
  contextPatch(input: EditContext): Opinion
  contextClean: Opinion
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Opinion
}

enum OpinionsFilter {
  explanation
  authors
  opinion
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  objectContains
  status_id
}

input OpinionsFiltering {
  key: OpinionsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum OpinionsOrdering {
  opinion
  created
  modified
  created_at
  updated_at
  createdBy
  status_id
}

enum OrderingMode {
  asc
  desc
}

type Organization implements BasicObject & StixObject & StixCoreObject & StixDomainObject & Identity {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  identity_class: String!
  name: String!
  description: String
  contact_information: String
  roles: [String]
  x_opencti_aliases: [String]
  x_opencti_organization_type: String
  x_opencti_reliability: OrganizationReliability
  sectors: SectorConnection
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input OrganizationAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String!
  contact_information: String
  roles: [String]
  x_opencti_aliases: [String]
  confidence: Int
  revoked: Boolean
  lang: String
  x_opencti_organization_type: String
  x_opencti_reliability: OrganizationReliability
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type OrganizationConnection {
  pageInfo: PageInfo!
  edges: [OrganizationEdge]
}

type OrganizationEdge {
  cursor: String!
  node: Organization!
}

type OrganizationEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Organization
  contextPatch(input: EditContext): Organization
  contextClean: Organization
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Organization
}

union OrganizationOrIndividual = Organization | Individual

enum OrganizationReliability {
  A
  B
  C
  D
  E
  F
}

enum OrganizationsFilter {
  name
  aliases
  x_opencti_organization_type
  x_opencti_reliability
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input OrganizationsFiltering {
  key: OrganizationsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum OrganizationsOrdering {
  name
  confidence
  created
  modified
  x_opencti_organization_type
  status_id
}

"""
Defines identifying information about the source of the finding, such as a tool, interviewed person, or activity.
"""
type Origin {
  """Uniquely identifies this object."""
  id: ID!

  """
  Identifies one or more actors that produces an observation, a finding, or a
  risk. One or more actor type can be used to specify a person that is using a tool.
  """
  origin_actors: [Actor!]!

  """
  Identifies one or more task for which the containing object is a consequence of.
  """
  related_tasks(first: Int): RemediationTaskConnection
}

input OriginAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]
}

type OriginConnection {
  pageInfo: PageInfo!
  edges: [OriginEdge]
}

type OriginEdge {
  cursor: String!
  node: Origin!
}

enum OriginsFilter {
  created
  modified
  labels
  method
  observation_types
  collected
  expires
}

input OriginsFiltering {
  key: OriginsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum OriginsOrdering {
  created
  modified
  labels
  name
  methods
  observation_types
  collected
  expires
}

"""Defines identifying information about a location."""
type OscalLocation implements BasicObject & LifecycleObject & CoreObject & OscalObject & CyioLocation {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies the name given to the location."""
  name: String!

  """Identifies a brief description of the location."""
  description: String

  """Identifies the type of the location."""
  location_type: OscalLocationType

  """Identifies the purpose of the location."""
  location_class: OscalLocationClass

  """Identifies a postal addresses for the location."""
  address: CivicAddress

  """Identifies one or more email addresses for the location."""
  email_addresses: EmailAddress

  """
  Identifies one or more telephone numbers used to contact the the location.
  """
  telephone_numbers: [TelephoneNumber]

  """
  Identifies one or more uniform resource locator (URL) for a web site or Internet presence associated with the location.
  """
  urls: [URL]
}

input OscalLocationAddInput {
  labels: [String]
  name: String!
  description: String
  location_type: OscalLocationType
  location_class: OscalLocationClass
  address: [CivicAddressAddInput]
  email_addresses: EmailAddress
  telephone_numbers: [TelephoneNumberAddInput]
  urls: [URL]
}

"""Characterizes the purpose of the location."""
enum OscalLocationClass {
  """The location is a data-center used for normal operations."""
  primary

  """The location is a data-center used for fail-over or backup operations."""
  alternate
}

type OscalLocationConnection {
  pageInfo: PageInfo!
  edges: [OscalLocationEdge]
}

type OscalLocationEdge {
  cursor: String!
  node: OscalLocation!
}

enum OscalLocationsFilter {
  created
  modified
  labels
}

input OscalLocationsFiltering {
  key: OscalLocationsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum OscalLocationsOrdering {
  created
  modified
  labels
}

"""Characterizes the kind of location."""
enum OscalLocationType {
  """A location that contains computing assets."""
  data_center
}

"""Defines the identifying information about an OSCAL object."""
interface OscalObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection
}

"""Defines identifying information about an OSCAL Organization"""
type OscalOrganization implements BasicObject & LifecycleObject & CoreObject & OscalObject & CyioIdentity & OscalParty {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies the name given to the party."""
  name: String!

  """Identifies a brief description of the Party."""
  description: String

  """Identifies the kind of party the object describes."""
  party_type: PartyType!

  """
  Identifies a short common name, abbreviation, or acronym for the party.
  """
  short_name: String

  """
  Identifies one or more external identifiers for a person or organization using
  a designated scheme. e.g. an Open Researcher and Contributor ID (ORCID).
  """
  external_ids(first: Int): CyioExternalReferenceConnection

  """Identifies a postal addresses for the location."""
  address: CivicAddress

  """Identifies one or more email addresses for the location."""
  email_addresses: EmailAddress

  """
  Identifies one or more telephone numbers used to contact the the location.
  """
  telephone_numbers: [TelephoneNumber]

  """Identifies one or more references to a location."""
  locations: [OscalLocation]

  """Identifies that the party object is a member of the organization."""
  member_of_organizations: [OscalOrganization]

  """Identifies a mail stop associated with the party."""
  mail_stop: String

  """Identifies the name or number of the party's office."""
  office: String
}

input OscalOrganizationAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """Identifies the name given to the party."""
  name: String!

  """Identifies a brief description of the Party."""
  description: String

  """Identifies the kind of party the object describes."""
  party_type: PartyType!

  """
  Identifies a short common name, abbreviation, or acronym for the party.
  """
  short_name: String

  """Identifies a postal addresses for the location."""
  address: CivicAddressAddInput

  """Identifies one or more email addresses for the location."""
  email_addresses: EmailAddress

  """
  Identifies one or more telephone numbers used to contact the the location.
  """
  telephone_numbers: [TelephoneNumberAddInput]

  """Identifies a mail stop associated with the party."""
  mail_stop: String

  """Identifies the name or number of the party's office."""
  office: String
}

type OscalOrganizationConnection {
  pageInfo: PageInfo!
  edges: [OscalOrganizationEdge]
}

type OscalOrganizationEdge {
  cursor: String!
  node: OscalOrganization!
}

enum OscalOrganizationsFilter {
  created
  modified
  labels
}

input OscalOrganizationsFiltering {
  key: OscalOrganizationsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum OscalOrganizationsOrdering {
  created
  modified
  labels
}

enum OscalPartiesFilter {
  created
  modified
  labels
}

input OscalPartiesFiltering {
  key: OscalPartiesFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum OscalPartiesOrdering {
  created
  modified
  labels
}

"""Defines identifying information about a Party in OSCAL"""
interface OscalParty {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies the name given to the party."""
  name: String!

  """Identifies a brief description of the Party."""
  description: String

  """Identifies the kind of party the object describes."""
  party_type: PartyType!

  """
  Identifies a short common name, abbreviation, or acronym for the party.
  """
  short_name: String

  """
  Identifies one or more external identifiers for a person or organization using
  a designated scheme. e.g. an Open Researcher and Contributor ID (ORCID).
  """
  external_ids(first: Int): CyioExternalReferenceConnection

  """Identifies a postal addresses for the location."""
  address: CivicAddress

  """Identifies one or more email addresses for the location."""
  email_addresses: EmailAddress

  """
  Identifies one or more telephone numbers used to contact the the location.
  """
  telephone_numbers: [TelephoneNumber]

  """Identifies one or more references to a location."""
  locations: [OscalLocation]

  """Identifies that the party object is a member of the organization."""
  member_of_organizations: [OscalOrganization]

  """Identifies a mail stop associated with the party."""
  mail_stop: String

  """Identifies the  name or number of the party's office."""
  office: String
}

type OscalPartyConnection {
  pageInfo: PageInfo!
  edges: [OscalPartyEdge]
}

type OscalPartyEdge {
  cursor: String!
  node: OscalParty!
}

"""Defines identifying information about a Person in OSCAL"""
type OscalPerson implements BasicObject & LifecycleObject & CoreObject & OscalObject & CyioIdentity & OscalParty {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies the name given to the party."""
  name: String!

  """Identifies a brief description of the Party."""
  description: String

  """Identifies the kind of party the object describes."""
  party_type: PartyType!

  """
  Identifies a short common name, abbreviation, or acronym for the party.
  """
  short_name: String

  """
  Identifies one or more external identifiers for a person or organization using
  a designated scheme. e.g. an Open Researcher and Contributor ID (ORCID).
  """
  external_ids(first: Int): CyioExternalReferenceConnection

  """Identifies a postal addresses for the location."""
  address: CivicAddress

  """Identifies one or more email addresses for the location."""
  email_addresses: EmailAddress

  """
  Identifies one or more telephone numbers used to contact the the location.
  """
  telephone_numbers: [TelephoneNumber]

  """Identifies one or more references to a location."""
  locations: [OscalLocation]

  """Identifies that the party object is a member of the organization."""
  member_of_organizations: [OscalOrganization]

  """Identifies a mail stop associated with the party."""
  mail_stop: String

  """Identifies the name or number of the party's office."""
  office: String

  """Identifies the formal job title of a person."""
  job_title: String
}

input OscalPersonAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """Identifies the name given to the party."""
  name: String!

  """Identifies a brief description of the Party."""
  description: String

  """Identifies the kind of party the object describes."""
  party_type: PartyType!

  """
  Identifies a short common name, abbreviation, or acronym for the party.
  """
  short_name: String

  """Identifies a postal addresses for the location."""
  address: CivicAddressAddInput

  """Identifies one or more email addresses for the location."""
  email_addresses: EmailAddress

  """
  Identifies one or more telephone numbers used to contact the the location.
  """
  telephone_numbers: [TelephoneNumberAddInput]
  mail_stop: String

  """Identifies the name or number of the party's office."""
  office: String

  """Identifies the formal job title of a person."""
  job_title: String
}

type OscalPersonConnection {
  pageInfo: PageInfo!
  edges: [OscalPersonEdge]
}

type OscalPersonEdge {
  cursor: String!
  node: OscalPerson!
}

enum OscalPersonOrdering {
  created
  modified
  labels
}

enum OscalPersonsFilter {
  created
  modified
  labels
}

input OscalPersonsFiltering {
  key: OscalPersonsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

"""Defines identifying information about a relationship in OSCAL"""
type OscalRelationship {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies the type of the relationship"""
  relationship_type: String!

  """Identifies a human-readable description about the relationship"""
  description: String

  """Identifies the source of the relationship"""
  source: ID

  """Identifies the target of the relationship"""
  target: ID

  """
  Indicates the time and date when the relationship was first established
  """
  valid_from: DateTime

  """Indicates the time and date when the relationship was terminated."""
  valid_until: DateTime

  """Identifies the level of confidence in the assertion."""
  confidence: PositiveInt
}

input OscalRelationshipAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """Identifies the type of the relationship"""
  relationship_type: String!

  """Identifies a human-readable description about the relationship"""
  description: String

  """Identifies the source of the relationship"""
  source: ID

  """Identifies the target of the relationship"""
  target: ID

  """
  Indicates the time and date when the relationship was first established
  """
  valid_from: DateTime

  """Indicates the time and date when the relationship was terminated."""
  valid_until: DateTime

  """Identifies the level of confidence in the assertion."""
  confidence: PositiveInt
}

type OscalRelationshipConnection {
  pageInfo: PageInfo!
  edges: [OscalRelationshipEdge]
}

type OscalRelationshipEdge {
  cursor: String!
  node: OscalRelationship!
}

enum OscalRelationshipsFilter {
  source
  target
  created
  modified
  confidence
}

input OscalRelationshipsFiltering {
  key: OscalRelationshipsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum OscalRelationshipsOrdering {
  relationship_type
  created
  modified
  confidence
  valid_from
  valid_until
}

"""Defines identifying information about a resource in OSCAL"""
type OscalResource implements BasicObject & LifecycleObject & CoreObject & OscalObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies the type of resource represented."""
  resource_type: ResourceType!

  """Identifies the version number of a published document."""
  version: String

  """Identifies the publication date of a published document."""
  published: DateTime

  """Identifies the name given to the party."""
  name: String!

  """Identifies a brief description of the Party."""
  description: String

  """Identifies references to previous versions of this document."""
  document_ids: [OscalObject]

  """
  Identifies a citation consisting of end note text and optional structured bibliographic data.
  """
  citations: [Citation]

  """
  identifies one or more references to an external resource with an optional hash for verification and change detection.
  """
  rlinks(first: Int): CyioExternalReferenceConnection

  """Identifies the base64 encoded content."""
  base64: Base64Content
}

input OscalResourceAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """Identifies the type of resource represented."""
  resource_type: ResourceType!

  """Identifies the version number of a published document."""
  version: String

  """Identifies the publication date of a published document."""
  published: DateTime

  """Identifies the name given to the party."""
  name: String!

  """Identifies a brief description of the Party."""
  description: String

  """Identifies references to previous versions of this document."""
  document_ids: [ID]

  """
  Identifies a citation consisting of end note text and optional structured bibliographic data.
  """
  citations: [CitationAddInput]

  """Identifies the base64 encoded content."""
  base64: Base64ContentAddInput
}

type OscalResourceConnection {
  pageInfo: PageInfo!
  edges: [OscalResourceEdge]
}

type OscalResourceEdge {
  cursor: String!
  node: OscalResource!
}

enum OscalResourcesFilter {
  created
  modified
  resource_type
  version
  published
  name
}

input OscalResourcesFiltering {
  key: OscalResourcesFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum OscalResourcesOrdering {
  created
  modified
  resource_type
  version
  published
  name
}

enum OscalResponsiblePartiesFilter {
  created
  modified
  labels
}

input OscalResponsiblePartiesFiltering {
  key: OscalResponsiblePartiesFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum OscalResponsiblePartiesOrdering {
  created
  modified
  labels
}

"""Defines identifying information about a Responsible Party in OSCAL"""
type OscalResponsibleParty implements OscalObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies a reference to the role that the party is responsible for."""
  role: OscalRole!

  """
  Identifies one or more references to the parties that are responsible for performing the associated role.
  """
  parties: [OscalParty]
}

input OscalResponsiblePartyAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """Identifies a reference to the role that the party is responsible for."""
  role: OscalRoleAddInput!

  """
  Identifies one or more references to the parties that are responsible for performing the associated role.
  """
  organization: [OscalOrganizationAddInput]
  person: [OscalPersonAddInput]
}

type OscalResponsiblePartyConnection {
  pageInfo: PageInfo!
  edges: [OscalResponsiblePartyEdge]
}

type OscalResponsiblePartyEdge {
  cursor: String!
  node: OscalResponsibleParty!
}

"""
Defines identifying information about a function assumed or expected to be assumed by a party in a specific situation.
"""
type OscalRole implements BasicObject & LifecycleObject & CoreObject & OscalObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies the unique identifier for a specific role instance."""
  role_identifier: RoleType!

  """Identifies the name given to the role."""
  name: String!

  """Identifies a short common name, abbreviation, or acronym for the role."""
  short_name: String

  """
  Identifies a summary of the role's purpose and associated responsibilities.
  """
  description: String
}

input OscalRoleAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """Identifies the unique identifier for a specific role instance."""
  role_identifier: RoleType!

  """Identifies the name given to the role."""
  name: String!

  """Identifies a short common name, abbreviation, or acronym for the role."""
  short_name: String

  """
  Identifies a summary of the role's purpose and associated responsibilities.
  """
  description: String
}

type OscalRoleConnection {
  pageInfo: PageInfo!
  edges: [OscalRoleEdge]
}

type OscalRoleEdge {
  cursor: String!
  node: OscalRole!
}

enum OscalRolesFilter {
  created
  modified
  labels
}

input OscalRolesFiltering {
  key: OscalRolesFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum OscalRolesOrdering {
  created
  modified
  labels
}

"""
Defines identifying information about a type of user that interacts with the system based on an associated role.
"""
type OscalUser implements BasicObject & LifecycleObject & CoreObject & OscalObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """
  Identifies type of user, such as internal, external, or general-public.
  """
  user_type: UserType

  """
  Identifies a name given to the user, which may be used by a tool for display and navigation.
  """
  name: String

  """Identifies a short common name, abbreviation, or acronym for the user."""
  short_name: String

  """Identifies a summary of the user's purpose within the system."""
  description: String

  """Identifies one or more references to the roles served by the user."""
  roles: [OscalRole]

  """
  Identifies a specific system privilege held by the user, along with an
  associated description and/or rationale for the privilege.
  """
  authorized_privileges: [AuthorizedPrivilege!]

  """
  Identifies the user's privilege level within the system, such as privileged, non-privileged, no-logical-access.
  """
  privilege_level: PrivilegeLevel!
}

input OscalUserAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies type of user, such as internal, external, or general-public.
  """
  user_type: UserType

  """
  Identifies a name given to the user, which may be used by a tool for display and navigation.
  """
  name: String

  """Identifies a short common name, abbreviation, or acronym for the user."""
  short_name: String

  """Identifies a summary of the user's purpose within the system."""
  description: String

  """
  Identifies a specific system privilege held by the user, along with an
  associated description and/or rationale for the privilege.
  """
  authorized_privileges: [AuthorizedPrivilegeAddInput]

  """
  Identifies the user's privilege level within the system, such as privileged, non-privileged, no-logical-access.
  """
  privilege_level: PrivilegeLevel!
}

type OscalUserConnection {
  pageInfo: PageInfo!
  edges: [OscalUserEdge]
}

type OscalUserEdge {
  cursor: String!
  node: OscalUser!
}

enum OscalUsersFilter {
  created
  modified
  labels
  user_type
  privilege_level
}

input OscalUsersFiltering {
  key: OscalUsersFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum OscalUsersOrdering {
  created
  modified
  labels
  user_type
  privilege_level
}

type OverviewMetrics {
  node: String
  object_totals: ObjectTotals
  queue_totals: QueueTotals
  message_stats: MessagesStats
}

type PageInfo {
  startCursor: String!
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  globalCount: Int!
}

union PartyOrComponent = OscalPerson | OscalOrganization | HardwareComponent | NetworkComponent | ServiceComponent | SoftwareComponent | SystemComponent

"""Characterizes the type of the party."""
enum PartyType {
  """Indicates the party is a person"""
  person

  """Indicates the party is an organization"""
  organization
}

union PartyTypes = OscalPerson | OscalOrganization

"""
A field whose value conforms to the standard E.164 format as specified in:
https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

type POAM implements BasicObject & LifecycleObject & CoreObject & OscalObject & Model {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies the name given to the document."""
  name: String!

  """Identifies the date and time the document was published."""
  published: DateTime

  """Identifies the date and time the document as last modified."""
  last_modified: DateTime!

  """Identifies the current version of the document."""
  version: String!

  """Identifies the OSCAL model version the document was authored against."""
  oscal_version: String!

  """Identifies a list of revisions to the containing document."""
  revisions: [Revision]

  """Identifies references to previous versions of this document."""
  document_ids: [ID]

  """
  Identifies one or more references to a function assumed or expected to be assumed by a party in a specific situation.
  """
  roles(first: Int): OscalRoleConnection

  """Identifies one or more references to a location."""
  locations(first: Int): OscalLocationConnection

  """
  Identifies one or more references to a responsible entity which is either a person or an organization.
  """
  parties(first: Int): OscalPartyConnection

  """
  Identifies one or more references to a set of organizations or persons that
  have responsibility for performing a referenced role in the context of the
  containing object.
  """
  responsible_parties(first: Int): OscalResponsiblePartyConnection
  system_id: String

  """
  Identifies the identification system from which the provided identifier was assigned.
  """
  system_identifier_type: String!

  """
  Identifies components and inventory-items to be defined within the POA&M for
  circumstances where no OSCAL-based SSP exists, or is not delivered with the POA&M.
  """
  local_definitions: POAMLocalDefinition

  """Identifies one or more individual observations."""
  observations(first: Int): ObservationConnection

  """Identifies one or more individual observations."""
  risks(first: Int): RiskConnection

  """
  Identifies one ore more POAM Items that bind a specific Risk to the associated Observations.
  """
  poam_items(first: Int): POAMItemConnection

  """Identifies one or more Resources that are associated with this POAM."""
  resources(first: Int): OscalResourceConnection
}

input POAMAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """Identifies the name given to the document."""
  name: String!

  """Identifies the date and time the document was published."""
  published: DateTime

  """Identifies the date and time the document as last modified."""
  last_modified: DateTime!

  """Identifies the current version of the document."""
  version: String!

  """Identifies the OSCAL model version the document was authored against."""
  oscal_version: String!

  """Identifies a list of revisions to the containing document."""
  revisions: [RevisionAddInput]

  """Identifies references to previous versions of this document."""
  document_ids: [ID]
  system_id: String

  """
  Identifies the identification system from which the provided identifier was assigned.
  """
  system_identifier_type: String!
}

"""Defines identifying information about a POAM Item"""
type POAMItem implements BasicObject & LifecycleObject & CoreObject & OscalObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies the name for this POA&M item."""
  name: String!

  """Identifies a human-readable description of the POA&M item."""
  description: String!

  """
  Identifies one or more sources of the finding, such as a tool, interviewed person, or activity.
  """
  origins: [Origin]

  """
  Relates the finding to a set of referenced observations that were used to determine the finding.
  """
  related_observations(first: Int): ObservationConnection

  """
  Relates the finding to a set of referenced risks that were used to determine the finding.
  """
  related_risks(first: Int): RiskConnection

  """Indicates the risk has been excepted"""
  accepted_risk: Boolean
}

input POAMItemAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """Identifies the name for this POA&M item."""
  name: String!

  """Identifies a human-readable description of the POA&M item."""
  description: String!

  """Indicates the risk has been excepted"""
  accepted_risk: Boolean
}

type POAMItemConnection {
  pageInfo: PageInfo!
  edges: [POAMItemEdge]
}

type POAMItemEdge {
  cursor: String!
  node: POAMItem!
}

enum POAMItemsFilter {
  name
  created
  modified
  labels
  accepted_risk
}

input POAMItemsFiltering {
  key: POAMItemsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum POAMItemsOrdering {
  name
  created
  modified
  labels
  accepted_risk
}

type POAMLocalDefinition {
  components(first: Int): ComponentConnection
  inventory_items(first: Int): InventoryItemConnection
  notes(first: Int): CyioNoteConnection
}

"""
A field whose value is a valid TCP port within the range of 0 to 65535:
https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_ports
"""
scalar Port

"""Defines identifying information about a network port."""
type PortInfo {
  port_number: Port
  protocols: [NetworkAssetProtocol]
}

input PortInfoAddInput {
  port_number: Port
  protocols: [NetworkAssetProtocol]
}

union PortRange = PortInfo | StartEndPortRange

type Position implements BasicObject & StixObject & StixCoreObject & StixDomainObject & Location {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  name: String!
  description: String
  latitude: Float
  longitude: Float
  precision: Float
  x_opencti_aliases: [String]
  street_address: String
  postal_code: String
  city: City
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input PositionAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String
  latitude: Float
  longitude: Float
  precision: Float
  street_address: String
  postal_code: String
  confidence: Int
  revoked: Boolean
  lang: String
  x_opencti_aliases: [String]
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type PositionConnection {
  pageInfo: PageInfo!
  edges: [PositionEdge]
}

type PositionEdge {
  cursor: String!
  node: Position!
}

type PositionEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Position
  contextPatch(input: EditContext): Position
  contextClean: Position
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Position
}

enum PositionsFilter {
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input PositionsFiltering {
  key: PositionsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum PositionsOrdering {
  name
  postal_address
  postal_code
  created
  modified
  created_at
  updated_at
  status_id
}

"""Integers that will have a value greater than 0."""
scalar PositiveInt

"""
A field whose value conforms to the standard postal code formats for United
States, United Kingdom, Germany, Canada, France, Italy, Australia, Netherlands,
Spain, Denmark, Sweden, Belgium, India, Austria, Portugal, Switzerland or Luxembourg.
"""
scalar PostalCode

"""Characterizes the type level of privileges"""
enum PrivilegeLevel {
  """
  This role has elevated access to the system, such as a group or system administrator.
  """
  privileged

  """
  This role has typical user-level access to the system without elevated access.
  """
  non_privileged

  """
  This role has no access to the system, such as a manager who approves access as part of a process.
  """
  no_logical_access
}

type Process implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  extensions: String
  is_hidden: Boolean
  pid: Int
  created_time: DateTime
  cwd: String
  command_line: String
  environment_variables: [String]
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input ProcessAddInput {
  extensions: String
  is_hidden: Boolean
  pid: Int
  created_time: DateTime
  cwd: String
  command_line: String
  environment_variables: [String]
}

type Provider {
  name: String!
  type: String
  strategy: String
  provider: String
}

type Query {
  platform_theme: String
  about: AppInfo
  logsWorkerConfig: LogsWorkerConfig
  rabbitMQMetrics(prefix: String): RabbitMQMetrics
  elasticSearchMetrics: ElasticSearchMetrics
  logs(first: Int, after: ID, orderBy: LogsOrdering, orderMode: OrderingMode, filters: [LogsFiltering], filterMode: FilterMode, search: String): LogConnection
  logsTimeSeries(userId: String, field: String!, operation: StatsOperation!, startDate: DateTime!, endDate: DateTime!, interval: String!): [TimeSeries]
  subType(id: String!): SubType
  subTypes(first: Int, after: ID, orderBy: SubTypesOrdering, orderMode: OrderingMode, type: String, includeParents: Boolean, search: String): SubTypeConnection
  importFiles(first: Int): FileConnection
  settings: Settings
  group(id: String!): Group
  groups(first: Int, after: ID, orderBy: GroupsOrdering, orderMode: OrderingMode, search: String): GroupConnection
  roles(first: Int, after: ID, orderBy: RolesOrdering, orderMode: OrderingMode, search: String): RoleConnection
  me: User
  user(id: String!): User
  users(first: Int, after: ID, orderBy: UsersOrdering, orderMode: OrderingMode, filters: [UsersFiltering], filterMode: FilterMode, search: String, toStix: Boolean): UserConnection
  sessions: [UserSession]
  role(id: String!): Role
  capabilities(first: Int): CapabilityConnection
  connector(id: String!): Connector
  connectors: [Connector]
  connectorsForExport: [Connector]
  connectorsForImport: [Connector]
  work(id: ID!): Work
  works(first: Int, after: ID, orderBy: WorksOrdering, orderMode: OrderingMode, search: String, filters: [WorksFiltering], filterMode: FilterMode): WorkConnection
  attribute(id: String): Attribute
  attributes(first: Int, after: ID, orderBy: AttributesOrdering, orderMode: OrderingMode, key: String, elementType: String, fieldKey: String, search: String): AttributeConnection
  workspace(id: String): Workspace
  workspaces(first: Int, after: ID, orderBy: WorkspacesOrdering, orderMode: OrderingMode, filters: [WorkspacesFiltering], filterMode: FilterMode, search: String): WorkspaceConnection
  taxiiCollection(id: String!): TaxiiCollection
  taxiiCollections(first: Int, after: ID, orderBy: TaxiiCollectionOrdering, orderMode: OrderingMode, search: String): TaxiiCollectionConnection
  streamCollection(id: String!): StreamCollection
  streamCollections(first: Int, after: ID, orderBy: StreamCollectionOrdering, orderMode: OrderingMode, search: String): StreamCollectionConnection
  userSubscription(id: String!): UserSubscription
  userSubscriptions(first: Int, after: ID, orderBy: UserSubscriptionOrdering, orderMode: OrderingMode, search: String): UserSubscriptionConnection
  statusTemplate(id: String!): StatusTemplate
  statusTemplates(first: Int, after: ID, orderBy: StatusTemplateOrdering, orderMode: OrderingMode): StatusTemplateConnection
  status(id: String!): Status
  statuses(first: Int, after: ID, orderBy: StatusOrdering, orderMode: OrderingMode, filters: [StatusesFiltering], filterMode: FilterMode, search: String): StatusConnection
  task(id: String!): Task
  tasks(first: Int, after: ID, orderBy: TasksOrdering, orderMode: OrderingMode, filters: [TasksFiltering], filterMode: FilterMode, search: String): TaskConnection
  rule(id: String!): Rule
  rules: [Rule]
  ruleManagerInfo: RuleManager
  synchronizer(id: String!): Synchronizer
  synchronizers(first: Int, after: ID, orderBy: SynchronizersOrdering, orderMode: OrderingMode, search: String): SynchronizerConnection
  markingDefinition(id: String!): MarkingDefinition
  markingDefinitions(first: Int, after: ID, orderBy: MarkingDefinitionsOrdering, orderMode: OrderingMode, filters: [MarkingDefinitionsFiltering], filterMode: FilterMode, search: String, toStix: Boolean): MarkingDefinitionConnection
  label(id: String!): Label
  labels(first: Int, after: ID, orderBy: LabelsOrdering, orderMode: OrderingMode, filters: [LabelsFiltering], filterMode: FilterMode, search: String): LabelConnection
  externalReference(id: String!): ExternalReference
  externalReferences(first: Int, after: ID, orderBy: ExternalReferencesOrdering, orderMode: OrderingMode, filters: [ExternalReferencesFiltering], filterMode: FilterMode, search: String): ExternalReferenceConnection
  killChainPhase(id: String!): KillChainPhase
  killChainPhases(first: Int, after: ID, orderBy: KillChainPhasesOrdering, orderMode: OrderingMode, filters: [KillChainPhasesFiltering], filterMode: FilterMode, search: String): KillChainPhaseConnection
  stixCoreObjectRaw(id: String!): String
  stixCoreObject(id: String!): StixCoreObject
  stixCoreObjects(first: Int, after: ID, types: [String], orderBy: StixCoreObjectsOrdering, orderMode: OrderingMode, filters: [StixCoreObjectsFiltering], filterMode: FilterMode, search: String): StixCoreObjectConnection
  stixDomainObject(id: String!): StixDomainObject
  stixDomainObjects(first: Int, after: ID, types: [String], orderBy: StixDomainObjectsOrdering, orderMode: OrderingMode, filters: [StixDomainObjectsFiltering], filterMode: FilterMode, search: String): StixDomainObjectConnection
  bookmarks(first: Int, after: ID, types: [String]): StixDomainObjectConnection
  stixDomainObjectsExportFiles(first: Int, type: String!): FileConnection
  stixDomainObjectsTimeSeries(type: String, authorId: String, field: String!, operation: StatsOperation!, startDate: DateTime!, endDate: DateTime!, interval: String!): [TimeSeries]
  stixDomainObjectsNumber(types: [String], endDate: DateTime): Number
  stixDomainObjectsDistribution(objectId: String, relationship_type: String!, toTypes: [String], field: String!, operation: StatsOperation!, limit: Int, order: String): [Distribution]
  attackPattern(id: String): AttackPattern
  attackPatterns(first: Int, after: ID, orderBy: AttackPatternsOrdering, orderMode: OrderingMode, filters: [AttackPatternsFiltering], filterMode: FilterMode, search: String, toStix: Boolean): AttackPatternConnection
  campaign(id: String): Campaign
  campaigns(first: Int, after: ID, orderBy: CampaignsOrdering, orderMode: OrderingMode, filters: [CampaignsFiltering], filterMode: FilterMode, search: String, toStix: Boolean): CampaignConnection
  campaignsTimeSeries(objectId: String, field: String!, operation: StatsOperation!, startDate: DateTime!, endDate: DateTime!, interval: String!, relationship_type: String): [TimeSeries]
  container(id: String): Container
  containers(first: Int, after: ID, orderBy: ContainersOrdering, orderMode: OrderingMode, filters: [ContainersFiltering], filterMode: FilterMode, search: String, toStix: Boolean): ContainerConnection
  containersObjectsOfObject(id: String!, types: [String], filters: [ContainersFiltering], filterMode: FilterMode, search: String): StixObjectOrStixRelationshipConnection
  note(id: String): Note
  notes(first: Int, after: ID, orderBy: NotesOrdering, orderMode: OrderingMode, filters: [NotesFiltering], filterMode: FilterMode, search: String, toStix: Boolean): NoteConnection
  notesTimeSeries(objectId: String, authorId: String, field: String!, operation: StatsOperation!, startDate: DateTime!, endDate: DateTime!, interval: String!): [TimeSeries]
  notesNumber(objectId: String, endDate: DateTime): Number
  notesDistribution(objectId: String, field: String!, operation: StatsOperation!, limit: Int, order: String): [Distribution]
  noteContainsStixObjectOrStixRelationship(id: String!, stixObjectOrStixRelationshipId: String!): Boolean
  observedData(id: String): ObservedData
  observedDatas(first: Int, after: ID, orderBy: ObservedDatasOrdering, orderMode: OrderingMode, filters: [ObservedDatasFiltering], filterMode: FilterMode, search: String, toStix: Boolean): ObservedDataConnection
  observedDatasTimeSeries(objectId: String, authorId: String, field: String!, operation: StatsOperation!, startDate: DateTime!, endDate: DateTime!, interval: String!): [TimeSeries]
  observedDatasNumber(objectId: String, endDate: DateTime): Number
  observedDatasDistribution(objectId: String, field: String!, operation: StatsOperation!, limit: Int, order: String): [Distribution]
  observedDataContainsStixObjectOrStixRelationship(id: String!, stixObjectOrStixRelationshipId: String!): Boolean
  opinion(id: String): Opinion
  opinions(first: Int, after: ID, orderBy: OpinionsOrdering, orderMode: OrderingMode, filters: [OpinionsFiltering], filterMode: FilterMode, search: String, toStix: Boolean): OpinionConnection
  opinionsTimeSeries(objectId: String, authorId: String, field: String!, operation: StatsOperation!, startDate: DateTime!, endDate: DateTime!, interval: String!): [TimeSeries]
  opinionsNumber(objectId: String, endDate: DateTime): Number
  opinionsDistribution(objectId: String, field: String!, operation: StatsOperation!, limit: Int, order: String): [Distribution]
  opinionContainsStixObjectOrStixRelationship(id: String!, stixObjectOrStixRelationshipId: String!): Boolean
  myOpinion(id: String!): Opinion
  report(id: String): Report
  reports(first: Int, after: ID, orderBy: ReportsOrdering, orderMode: OrderingMode, filters: [ReportsFiltering], filterMode: FilterMode, search: String, toStix: Boolean): ReportConnection
  reportsTimeSeries(objectId: String, authorId: String, reportType: String, field: String!, operation: StatsOperation!, startDate: DateTime!, endDate: DateTime!, interval: String!): [TimeSeries]
  reportsNumber(reportType: String, objectId: String, authorId: String, endDate: DateTime): Number
  reportsDistribution(objectId: String, authorId: String, field: String!, operation: StatsOperation!, limit: Int, order: String, startDate: DateTime, endDate: DateTime): [Distribution]
  reportContainsStixObjectOrStixRelationship(id: String!, stixObjectOrStixRelationshipId: String!): Boolean
  courseOfAction(id: String): CourseOfAction
  coursesOfAction(first: Int, after: ID, orderBy: CoursesOfActionOrdering, orderMode: OrderingMode, filters: [CoursesOfActionFiltering], filterMode: FilterMode, search: String, toStix: Boolean): CourseOfActionConnection
  identity(id: String!): Identity
  identities(first: Int, after: ID, types: [String], orderBy: IdentitiesOrdering, orderMode: OrderingMode, search: String, filters: [IdentitiesFiltering], filterMode: FilterMode, toStix: Boolean): IdentityConnection
  individual(id: String!): Individual
  individuals(first: Int, after: ID, orderBy: IndividualsOrdering, orderMode: OrderingMode, filters: [IndividualsFiltering], filterMode: FilterMode, search: String, toStix: Boolean): IndividualConnection
  organization(id: String): Organization
  organizations(first: Int, after: ID, orderBy: OrganizationsOrdering, orderMode: OrderingMode, filters: [OrganizationsFiltering], filterMode: FilterMode, search: String, toStix: Boolean): OrganizationConnection
  sector(id: String): Sector
  sectors(first: Int, after: ID, orderBy: SectorsOrdering, orderMode: OrderingMode, filters: [SectorsFiltering], filterMode: FilterMode, search: String, toStix: Boolean): SectorConnection
  system(id: String): System
  systems(first: Int, after: ID, orderBy: SystemsOrdering, orderMode: OrderingMode, filters: [SystemsFiltering], filterMode: FilterMode, search: String, toStix: Boolean): SystemConnection
  indicator(id: String!): Indicator
  indicators(first: Int, after: ID, orderBy: IndicatorsOrdering, orderMode: OrderingMode, filters: [IndicatorsFiltering], filterMode: FilterMode, search: String): IndicatorConnection
  indicatorsTimeSeries(objectId: String, pattern_type: String, field: String!, operation: StatsOperation!, startDate: DateTime!, endDate: DateTime!, interval: String!): [TimeSeries]
  indicatorsNumber(pattern_type: String, objectId: String, endDate: DateTime): Number
  indicatorsDistribution(objectId: String, field: String!, operation: StatsOperation!, limit: Int, order: String, startDate: DateTime, endDate: DateTime): [Distribution]
  infrastructure(id: String!): Infrastructure
  infrastructures(first: Int, after: ID, orderBy: InfrastructuresOrdering, orderMode: OrderingMode, filters: [InfrastructuresFiltering], filterMode: FilterMode, search: String): InfrastructureConnection
  intrusionSet(id: String): IntrusionSet
  intrusionSets(first: Int, after: ID, orderBy: IntrusionSetsOrdering, orderMode: OrderingMode, filters: [IntrusionSetsFiltering], filterMode: FilterMode, search: String, toStix: Boolean): IntrusionSetConnection
  location(id: String!): Location
  locations(first: Int, after: ID, types: [String], orderBy: LocationsOrdering, orderMode: OrderingMode, search: String, filters: [LocationsFiltering], filterMode: FilterMode, toStix: Boolean): LocationConnection
  city(id: String): City
  cities(first: Int, after: ID, orderBy: CitiesOrdering, orderMode: OrderingMode, filters: [CitiesFiltering], filterMode: FilterMode, search: String, toStix: Boolean): CityConnection
  country(id: String): Country
  countries(first: Int, after: ID, orderBy: CountriesOrdering, orderMode: OrderingMode, filters: [CountriesFiltering], filterMode: FilterMode, search: String, toStix: Boolean): CountryConnection
  region(id: String!): Region
  regions(first: Int, after: ID, orderBy: RegionsOrdering, orderMode: OrderingMode, filters: [RegionsFiltering], filterMode: FilterMode, search: String, toStix: Boolean): RegionConnection
  position(id: String!): Position
  positions(first: Int, after: ID, orderBy: PositionsOrdering, orderMode: OrderingMode, filters: [PositionsFiltering], filterMode: FilterMode, search: String, toStix: Boolean): PositionConnection
  malware(id: String): Malware
  malwares(first: Int, after: ID, orderBy: MalwaresOrdering, orderMode: OrderingMode, filters: [MalwaresFiltering], filterMode: FilterMode, search: String, toStix: Boolean): MalwareConnection
  threatActor(id: String): ThreatActor
  threatActors(first: Int, after: ID, orderBy: ThreatActorsOrdering, orderMode: OrderingMode, filters: [ThreatActorsFiltering], filterMode: FilterMode, search: String, toStix: Boolean): ThreatActorConnection
  tool(id: String): Tool
  tools(first: Int, after: ID, orderBy: ToolsOrdering, orderMode: OrderingMode, filters: [ToolsFiltering], filterMode: FilterMode, search: String, toStix: Boolean): ToolConnection
  vulnerability(id: String): Vulnerability
  vulnerabilities(first: Int, after: ID, orderBy: VulnerabilitiesOrdering, orderMode: OrderingMode, filters: [VulnerabilitiesFiltering], filterMode: FilterMode, search: String, toStix: Boolean): VulnerabilityConnection
  incident(id: String): Incident
  incidents(first: Int, after: ID, orderBy: IncidentsOrdering, orderMode: OrderingMode, filters: [IncidentsFiltering], filterMode: FilterMode, search: String, toStix: Boolean): IncidentConnection
  incidentsTimeSeries(objectId: String, field: String!, operation: StatsOperation!, startDate: DateTime!, endDate: DateTime!, interval: String!, relationship_type: String): [TimeSeries]
  stixCyberObservable(id: String!): StixCyberObservable
  stixCyberObservables(first: Int, after: ID, types: [String], orderBy: StixCyberObservablesOrdering, orderMode: OrderingMode, filters: [StixCyberObservablesFiltering], filterMode: FilterMode, search: String, toStix: Boolean): StixCyberObservableConnection
  stixCyberObservablesExportFiles(first: Int, context: String): FileConnection
  stixCyberObservablesNumber(types: [String], authorId: String, endDate: DateTime): Number
  stixCyberObservablesTimeSeries(type: String): [TimeSeries]
  stixCyberObservablesDistribution(objectId: String, field: String!, operation: String!): [Distribution]
  stixMetaRelationship(id: String): StixMetaRelationship
  stixMetaRelationships(first: Int, after: ID, orderBy: StixMetaRelationshipsOrdering, orderMode: OrderingMode, elementId: String, elementWithTargetTypes: [String], fromId: String, fromRole: String, fromTypes: [String], toId: String, toRole: String, toTypes: [String], relationship_type: [String], startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, startDate: DateTime, endDate: DateTime, confidences: [Int], search: String, filters: [StixMetaRelationshipsFiltering], filterMode: FilterMode, stix: Boolean): StixMetaRelationshipConnection
  stixMetaRelationshipsDistribution(field: String!, operation: StatsOperation!, relationship_type: String, toTypes: [String], startDate: DateTime, endDate: DateTime, limit: Int, order: String): [Distribution]
  stixMetaRelationshipsNumber(type: String, fromId: String, endDate: DateTime): Number
  stixRelationship(id: String): StixRelationship
  stixRelationships(first: Int, after: ID, orderBy: StixRelationshipsOrdering, orderMode: OrderingMode, elementId: String, elementWithTargetTypes: [String], fromId: String, fromRole: String, fromTypes: [String], toId: String, toRole: String, toTypes: [String], relationship_type: [String], startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, startDate: DateTime, endDate: DateTime, confidences: [Int], search: String, filters: [StixRelationshipsFiltering], filterMode: FilterMode, stix: Boolean): StixRelationshipConnection
  stixCoreRelationship(id: String): StixCoreRelationship
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, elementId: String, elementWithTargetTypes: [String], fromId: String, fromRole: String, fromTypes: [String], toId: String, toRole: String, toTypes: [String], relationship_type: [String], startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, startDate: DateTime, endDate: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode, stix: Boolean): StixCoreRelationshipConnection
  stixCoreRelationshipsTimeSeries(fromId: String, relationship_type: String, toTypes: [String], field: String!, operation: StatsOperation!, startDate: DateTime!, endDate: DateTime!, interval: String!): [TimeSeries]
  stixCoreRelationshipsDistribution(fromId: String, field: String!, operation: StatsOperation!, relationship_type: String, toTypes: [String], isTo: Boolean, noDirection: Boolean, startDate: DateTime, endDate: DateTime, dateAttribute: String, limit: Int, order: String): [Distribution]
  stixCoreRelationshipsNumber(type: String, fromId: String, authorId: String, toTypes: [String], noDirection: Boolean, endDate: DateTime): Number
  stixSightingRelationship(id: String): StixSightingRelationship
  stixSightingRelationships(first: Int, after: ID, orderBy: StixSightingRelationshipsOrdering, orderMode: OrderingMode, elementId: String, fromId: String, toId: String, fromTypes: [String], toTypes: [String], firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, search: String, filters: [StixSightingRelationshipsFiltering], filterMode: FilterMode, toStix: Boolean): StixSightingRelationshipConnection
  stixSightingRelationshipsTimeSeries(fromId: String, field: String!, operation: StatsOperation!, startDate: DateTime!, endDate: DateTime!, interval: String!): [TimeSeries]
  stixSightingRelationshipsDistribution(fromId: String!, field: String!, operation: StatsOperation!, toTypes: [String], startDate: DateTime, endDate: DateTime, limit: Int, order: String): [Distribution]
  stixSightingRelationshipsNumber(fromId: String, endDate: DateTime): Number
  stixCyberObservableRelationship(id: String): StixCyberObservableRelationship
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, elementId: String, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode, toStix: Boolean): StixCyberObservableRelationshipConnection
  stixCyberObservableRelationshipsTimeSeries(fromId: String, field: String!, operation: StatsOperation!, startDate: DateTime!, endDate: DateTime!, interval: String!): [TimeSeries]
  stixCyberObservableRelationshipsDistribution(fromId: String!, field: String!, operation: StatsOperation!, toTypes: [String], startDate: DateTime, endDate: DateTime, limit: Int, order: String): [Distribution]
  stixCyberObservableRelationshipsNumber(fromId: String, endDate: DateTime): Number
  stixObjectOrStixRelationship(id: String!): StixObjectOrStixRelationship
  stixCoreObjectOrStixCoreRelationship(id: String!): StixCoreObjectOrStixCoreRelationship
  cyioNote(id: ID!): CyioNote
  cyioNoteList(first: Int, offset: Int, orderedBy: CyioNotesOrdering, orderMode: OrderingMode, filters: [CyioNotesFiltering], filterMode: FilterMode, search: String): CyioNoteConnection
  asset(id: ID!): Asset
  assetList(first: Int, offset: Int, orderedBy: AssetsOrdering, orderMode: OrderingMode, filters: [AssetsFiltering], filterMode: FilterMode, search: String): AssetConnection
  assetLocation(id: ID!): AssetLocation
  assetLocationList(first: Int, offset: Int, orderedBy: AssetLocationsOrdering, orderMode: OrderingMode, filters: [AssetLocationsFiltering], filterMode: FilterMode, search: String): AssetLocationConnection
  data(id: ID!): DataAsset
  dataList(first: Int, offset: Int, orderedBy: DatumOrdering, orderMode: OrderingMode, filters: [DatumFiltering], filterMode: FilterMode, search: String): DataConnection
  documentaryAsset(id: ID!): DocumentaryAsset
  documentaryAssetList(first: Int, offset: Int, orderedBy: DocumentaryAssetsOrdering, orderMode: OrderingMode, filters: [DocumentaryAssetsFiltering], filterMode: FilterMode, search: String): DocumentaryAssetConnection
  itAsset(id: ID!): ItAsset
  itAssetList(first: Int, offset: Int, orderedBy: ItAssetsOrdering, orderMode: OrderingMode, filters: [ItAssetsFiltering], filterMode: FilterMode, search: String): ItAssetConnection
  hardware(id: ID!): HardwareAsset
  hardwareList(first: Int, offset: Int, orderedBy: HardwareAssetsOrdering, orderMode: OrderingMode, filters: [HardwareAssetsFiltering], filterMode: FilterMode, search: String): HardwareAssetConnection
  computingDeviceAssetList(first: Int, offset: Int, orderedBy: ComputingDeviceAssetOrdering, orderMode: OrderingMode, filters: [ComputingDeviceAssetFiltering], filterMode: FilterMode, search: String): ComputingDeviceAssetConnection
  computingDeviceAsset(id: ID!): ComputingDeviceAsset
  networkAssetList(first: Int, offset: Int, orderedBy: NetworkAssetOrdering, orderMode: OrderingMode, filters: [NetworkAssetFiltering], filterMode: FilterMode, search: String): NetworkAssetConnection
  networkAsset(id: ID!): NetworkAsset
  softwareAssetList(first: Int, offset: Int, orderedBy: SoftwareAssetOrdering, orderMode: OrderingMode, filters: [SoftwareAssetFiltering], filterMode: FilterMode, search: String): SoftwareAssetConnection
  softwareAsset(id: ID!): SoftwareAsset
  oscalLocation(id: ID!): OscalLocation
  oscalLocationList(first: Int, offset: Int, orderedBy: OscalLocationsOrdering, orderMode: OrderingMode, filters: [OscalLocationsFiltering], filterMode: FilterMode, search: String): OscalLocationConnection
  oscalOrganization(id: ID!): OscalOrganization
  oscalOrganizationList(first: Int, offset: Int, orderedBy: OscalOrganizationsOrdering, orderMode: OrderingMode, filters: [OscalOrganizationsFiltering], filterMode: FilterMode, search: String): OscalOrganizationConnection
  oscalParty(id: ID!): OscalParty
  oscalPartyList(first: Int, offset: Int, orderedBy: OscalPartiesOrdering, orderMode: OrderingMode, filters: [OscalPartiesFiltering], filterMode: FilterMode, search: String): OscalPartyConnection
  oscalRelationship(id: ID!): OscalRelationship
  oscalRelationshipList(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection
  oscalResource(id: ID!): OscalResource
  oscalResourceList(first: Int, offset: Int, orderedBy: OscalResourcesOrdering, orderMode: OrderingMode, filters: [OscalResourcesFiltering], filterMode: FilterMode, search: String): OscalResourceConnection
  oscalResponsibleParty(id: ID!): OscalResponsibleParty
  oscalResponsiblePartyList(first: Int, offset: Int, orderedBy: OscalResponsiblePartiesOrdering, orderMode: OrderingMode, filters: [OscalResponsiblePartiesFiltering], filterMode: FilterMode, search: String): OscalResponsiblePartyConnection
  oscalRole(id: ID!): OscalRole
  oscalRoleList(first: Int, offset: Int, orderedBy: OscalRolesOrdering, orderMode: OrderingMode, filters: [OscalRolesFiltering], filterMode: FilterMode, search: String): OscalRoleConnection
  oscalUser(id: ID!): OscalUser
  oscalUserList(first: Int, offset: Int, orderedBy: OscalUsersOrdering, orderMode: OrderingMode, filters: [OscalUsersFiltering], filterMode: FilterMode, search: String): OscalUserConnection
  characterization(id: ID!): Characterization
  characterizationList(first: Int, offset: Int, orderedBy: CharacterizationsOrdering, orderMode: OrderingMode, filters: [CharacterizationsFiltering], filterMode: FilterMode, search: String): CharacterizationConnection
  facet(id: ID!): Facet
  facetList(first: Int, offset: Int, orderedBy: FacetsOrdering, orderMode: OrderingMode, filters: [FacetsFiltering], filterMode: FilterMode, search: String): FacetConnection
  logEntry(id: ID!): LogEntry
  logEntryList(first: Int, offset: Int, orderedBy: LogEntriesOrdering, orderMode: OrderingMode, filters: [LogEntriesFiltering], filterMode: FilterMode, search: String): LogEntryConnection
  observation(id: ID!): Observation
  observationList(first: Int, offset: Int, orderedBy: ObservationsOrdering, orderMode: OrderingMode, filters: [ObservationsFiltering], filterMode: FilterMode, search: String): ObservationConnection
  origin(id: ID!): Origin
  originList(first: Int, offset: Int, orderedBy: OriginsOrdering, orderMode: OrderingMode, filters: [OriginsFiltering], filterMode: FilterMode, search: String): OriginConnection
  remediationTask(id: ID!): RemediationTask
  remediationTaskList(first: Int, offset: Int, orderedBy: RemediationTasksOrdering, orderMode: OrderingMode, filters: [RemediationTasksFiltering], filterMode: FilterMode, search: String): RemediationTaskConnection
  requiredAsset(id: ID!): RequiredAsset
  requiredAssetList(first: Int, offset: Int, orderedBy: RequiredAssetsOrdering, orderMode: OrderingMode, filters: [RequiredAssetsFiltering], filterMode: FilterMode, search: String): RequiredAssetConnection
  risk(id: ID!): Risk
  riskList(first: Int, offset: Int, orderedBy: RisksOrdering, orderMode: OrderingMode, filters: [RisksFiltering], filterMode: FilterMode, search: String): RiskConnection
  riskCharacterization(id: ID!): RiskCharacterization
  riskCharacterizationList(first: Int, offset: Int, orderedBy: RiskCharacterizationsOrdering, orderMode: OrderingMode, filters: [RiskCharacterizationsFiltering], filterMode: FilterMode, search: String): RiskCharacterizationConnection
  riskResponse(id: ID!): RiskResponse
  riskResponseList(first: Int, offset: Int, orderedBy: RiskResponsesOrdering, orderMode: OrderingMode, filters: [RiskResponsesFiltering], filterMode: FilterMode, search: String): RiskResponseConnection
  subject(id: ID!): Subject
  subjectList(first: Int, offset: Int, orderedBy: SubjectsOrdering, orderMode: OrderingMode, filters: [SubjectsFiltering], filterMode: FilterMode, search: String): SubjectConnection
  component(id: ID!): Component
  componentList(first: Int, offset: Int, orderedBy: ComponentsOrdering, orderMode: OrderingMode, filters: [ComponentsFiltering], filterMode: FilterMode, search: String): ComponentConnection
  hardwareComponent(id: ID!): HardwareComponent
  hardwareComponentList(first: Int, offset: Int, orderedBy: HardwareComponentsOrdering, orderMode: OrderingMode, filters: [HardwareComponentsFiltering], filterMode: FilterMode, search: String): HardwareComponentConnection
  networkComponent(id: ID!): NetworkComponent
  networkComponentList(first: Int, offset: Int, orderedBy: NetworkComponentsOrdering, orderMode: OrderingMode, filters: [NetworkComponentsFiltering], filterMode: FilterMode, search: String): NetworkComponentConnection
  serviceComponent(id: ID!): ServiceComponent
  serviceComponentList(first: Int, offset: Int, orderedBy: ServiceComponentsOrdering, orderMode: OrderingMode, filters: [ServiceComponentsFiltering], filterMode: FilterMode, search: String): ServiceComponentConnection
  softwareComponent(id: ID!): SoftwareComponent
  softwareComponentList(first: Int, offset: Int, orderedBy: SoftwareComponentsOrdering, orderMode: OrderingMode, filters: [SoftwareComponentsFiltering], filterMode: FilterMode, search: String): SoftwareComponentConnection
  systemComponent(id: ID!): SystemComponent
  systemComponentList(first: Int, offset: Int, orderedBy: SystemComponentsOrdering, orderMode: OrderingMode, filters: [SystemComponentsFiltering], filterMode: FilterMode, search: String): SystemComponentConnection
  inventoryItem(id: ID!): InventoryItem
  inventoryItemList(first: Int, offset: Int, orderedBy: InventoryItemsOrdering, orderMode: OrderingMode, filters: [InventoryItemsFiltering], filterMode: FilterMode, search: String): InventoryItemConnection
  poam(id: ID): POAM
  poamItem(id: ID): POAMItem
  poamItems(first: Int, offset: Int, orderedBy: POAMItemsOrdering, orderMode: OrderingMode, filters: [POAMItemsFiltering], filterMode: FilterMode, search: String): POAMItemConnection
}

type QueryTask implements Task {
  id: ID!
  type: TaskType
  initiator: User
  actions: [TaskAction]
  created_at: DateTime
  last_execution_date: DateTime
  completed: Boolean
  task_expected_number: Int
  task_processed_number: Int
  errors: [TaskError]
  task_filters: String!
}

input QueryTaskAddInput {
  filters: String!
  actions: [TaskActionInput]!
}

type QueueArguments {
  config: String
}

type QueueMetrics {
  name: String!
  arguments: QueueArguments
  messages: String
  messages_ready: String
  messages_unacknowledged: String
  consumers: String
  idle_since: DateTime
  message_stats: MessagesStats
}

type QueueTotals {
  messages: String
  messages_ready: String
  messages_unacknowledged: String
}

type RabbitMQConnection {
  host: String!
  use_ssl: Boolean!
  ca: [String]
  port: Int!
  user: String!
  pass: String!
}

type RabbitMQMetrics {
  consumers: String
  queues: [QueueMetrics]
  overview: OverviewMetrics
}

"""Reference input to add a reference between two different objects"""
input ReferenceAddInput {
  field_name: String!
  from_id: ID!
  to_id: ID!
}

enum ReferencePurposeType {
  """Identifies a reference to an external resource."""
  reference

  """Identifies the authoritative location for this file."""
  canonical

  """Identifies an alternative location or format for this file."""
  alternative
}

type Region implements BasicObject & StixObject & StixCoreObject & StixDomainObject & Location {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  name: String!
  description: String
  latitude: Float
  longitude: Float
  precision: Float
  x_opencti_aliases: [String]
  parentRegions: RegionConnection
  subRegions: RegionConnection
  isSubRegion: Boolean
  countries: CountryConnection
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input RegionAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String
  latitude: Float
  longitude: Float
  precision: Float
  confidence: Int
  revoked: Boolean
  lang: String
  x_opencti_aliases: [String]
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type RegionConnection {
  pageInfo: PageInfo!
  edges: [RegionEdge]
}

type RegionEdge {
  cursor: String!
  node: Region!
}

type RegionEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Region
  contextPatch(input: EditContext): Region
  contextClean: Region
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Region
}

"""Defines the set of Region names"""
enum RegionName {
  africa
  eastern_africa
  middle_africa
  norther_africa
  southern_africa
  western_africa
  americas
  caribbean
  central_america
  latin_america_caribbean
  norther_america
  south_america
  asia
  central_asia
  eastern_asia
  southern_asia
  south_eastern_asia
  western_asia
  europe
  eastern_europe
  northern_europe
  southern_europe
  western_europe
  oceania
  antarctica
  australia_new_zealand
  melanesia
  micronesia
  polynesia
}

enum RegionsFilter {
  created
  modified
  created_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input RegionsFiltering {
  key: RegionsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum RegionsOrdering {
  name
  description
  created
  modified
  created_at
  updated_at
  status_id
}

input RegisterConnectorInput {
  id: ID!
  name: String!
  type: ConnectorType!
  scope: [String!]
  auto: Boolean
  only_contextual: Boolean
}

"""
Defines identifying information about a scheduled event or milestone, which may
be associated with a series of assessment actions.
"""
type RemediationTask implements BasicObject & LifecycleObject & CoreObject & OscalObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies the type of task."""
  task_type: TaskType!

  """Identifies the name for the task."""
  name: String!

  """Identifies a human-readable description of the task."""
  description: String!

  """Identifies the timing under which the task is intended to occur."""
  timing: EventTiming

  """Identifies that the task is dependent on another task."""
  task_dependencies(first: Int): RemediationTaskConnection

  """Identifies an individual activity to be performed as part of a task."""
  associated_activities: [AssociatedActivity]

  """
  Identifies a reference to one or more subjects that the task is performed against: component, inventory item, party, users
  """
  subjects: [AssessmentSubject]

  """
  Identifies the person or organization responsible for performing a specific role related to the task.
  """
  responsible_roles: [OscalResponsibleParty]
}

input RemediationTaskAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """Identifies the type of task."""
  task_type: TaskType!

  """Identifies the name for the task."""
  name: String!

  """Identifies a human-readable description of the task."""
  description: String!

  """Identifies the date range under which the task is intended to occur."""
  timing_date_range: DateRangeTimingAddInput

  """Identifies the date under which the task is intended to occur."""
  timing_on_date: OnDateTimingAddInput
}

type RemediationTaskConnection {
  pageInfo: PageInfo!
  edges: [RemediationTaskEdge]
}

type RemediationTaskEdge {
  cursor: String!
  node: RemediationTask!
}

enum RemediationTaskFilter {
  created
  modified
  task_type
  name
}

input RemediationTasksFiltering {
  key: RemediationTaskFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum RemediationTasksOrdering {
  created
  modified
  task_type
  name
}

type Report implements BasicObject & StixObject & StixCoreObject & StixDomainObject & Container {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  objects(first: Int, after: ID, orderBy: StixObjectOrStixRelationshipsOrdering, orderMode: OrderingMode, filters: [StixObjectOrStixRelationshipsFiltering], filterMode: FilterMode, search: String, types: [String], all: Boolean): StixObjectOrStixRelationshipConnection
  name: String!
  description: String
  report_types: [String]
  published: DateTime
  creator: User
  toStix: String
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input ReportAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String
  published: DateTime!
  report_types: [String]
  revoked: Boolean
  lang: String
  confidence: Int
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  objects: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type ReportConnection {
  pageInfo: PageInfo!
  edges: [ReportEdge]
}

type ReportEdge {
  cursor: String!
  node: Report!
}

type ReportEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Report
  contextPatch(input: EditContext): Report
  contextClean: Report
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Report
}

enum ReportsFilter {
  name
  published
  published_day
  created
  created_at
  report_types
  confidence
  objectLabel
  createdBy
  markedBy
  labelledBy
  objectContains
  status_id
}

input ReportsFiltering {
  key: ReportsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum ReportsOrdering {
  name
  created
  modified
  published
  created_at
  updated_at
  createdBy
  status_id
}

"""
Defines identifying information about an asset required to achieve remediation.
"""
type RequiredAsset implements BasicObject & LifecycleObject & CoreObject & OscalObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """
  Identifies a reference to one or more subjects, in the form of a party or tool required to achieve the remediation.
  """
  subjects: SubjectConnection

  """Identifies the name of the required asset."""
  name: String!

  """Identifies a human-readable description of the required asset."""
  description: String!
}

input RequiredAssetAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """Identifies the name of the required asset."""
  name: String!

  """Identifies a human-readable description of the required asset."""
  description: String!
}

type RequiredAssetConnection {
  pageInfo: PageInfo!
  edges: [RequiredAssetEdge]
}

type RequiredAssetEdge {
  cursor: String!
  node: RequiredAsset!
}

enum RequiredAssetFilter {
  created
  modified
  labels
  name
}

input RequiredAssetsFiltering {
  key: RequiredAssetFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum RequiredAssetsOrdering {
  created
  modified
  labels
  name
}

"""Characterizes the type of resource."""
enum ResourceType {
  """Indicates the resource is an organization's logo."""
  logo

  """Indicates the resource represents an image."""
  image

  """Indicates the resource represents an image of screen content."""
  screen_shot

  """Indicates the resource represents an applicable law."""
  law

  """Indicates the resource represents an applicable regulation."""
  regulation

  """Indicates the resource represents an applicable standard."""
  standard

  """Indicates the resource represents applicable guidance."""
  external_guidance

  """Indicates the resource provides a list of relevant acronyms"""
  acronyms

  """Indicates the resource cites relevant information"""
  citation

  """Indicates the resource is a policy"""
  policy

  """Indicates the resource is a procedure"""
  procedure

  """
  Indicates the resource is guidance document related to the subject system of an SSP.
  """
  system_guide

  """
  Indicates the resource is guidance document a user's guide or administrator's guide.
  """
  users_guide

  """Indicates the resource is guidance document a administrator's guide."""
  administrators_guide

  """Indicates the resource represents rules of behavior content"""
  rules_of_behavior

  """Indicates the resource represents a plan"""
  plan

  """
  Indicates the resource represents an artifact, such as may be reviewed by an assessor
  """
  artifact

  """
  Indicates the resource represents evidence, such as to support an assessment finding
  """
  evidence

  """Indicates the resource represents output from a tool"""
  tool_output

  """
  Indicates the resource represents machine data, which may require a tool or analysis for interpretation or presentation
  """
  raw_data

  """
  Indicates the resource represents notes from an interview, such as may be collected during an assessment
  """
  interview_notes

  """Indicates the resource is a set of questions, possibly with responses"""
  questionnaire

  """Indicates the resource is a report"""
  report

  """
  Indicates the resource is a formal agreement between two or more parties
  """
  agreement
}

"""Defines the types of risk responses"""
enum ResponseType {
  """The risk will be eliminated."""
  avoid

  """The risk will be reduced."""
  mitigate

  """The risk will be transferred to another organization or entity."""
  transfer

  """
  The risk will continue to exist without further efforts to address it. (Sometimes referred to as 'Operationally required')
  """
  accept

  """
  The risk will be partially transferred to another organization or entity.
  """
  share

  """
  Plans will be made to address the risk impact if the risk occurs. (This is a form of mitigation.)
  """
  contingency

  """
  No response, such as when the identified risk is found to be a false positive.
  """
  none
}

"""Defines identifying information about a Revision"""
type Revision {
  """Identifies the name given to the document."""
  name: String!

  """Identifies the date and time the document was published."""
  published: DateTime

  """Identifies the date and time the document as last modified."""
  last_modified: DateTime

  """Identifies the current version of the document."""
  version: String

  """Identifies the OSCAL model version the document was authored against."""
  oscal_version: String

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection
}

input RevisionAddInput {
  """Identifies the name given to the document."""
  name: String!

  """Identifies the date and time the document was published."""
  published: DateTime

  """Identifies the date and time the document as last modified."""
  last_modified: DateTime

  """Identifies the current version of the document."""
  version: String

  """Identifies the OSCAL model version the document was authored against."""
  oscal_version: String
}

type Risk implements BasicObject & LifecycleObject & CoreObject & OscalObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies the name for the risk."""
  name: String!

  """
  Identifies a human-readable summary of the identified risk, to include a statement of how the risk impacts the system.
  """
  description: String!

  """Identifies a summary of impact for how the risk affects the system."""
  statement: String!

  """Identifies the status of the associated risk."""
  risk_status: RiskStatus!

  """
  Identifies one or more sources of the finding, such as a tool, interviewed person, or activity.
  """
  origins(first: Int): OriginConnection

  """Identifies a reference to one or more externally-defined threats."""
  threats: [ThreatReference]

  """
  Identifies a collection of descriptive data about the containing object from a specific origin.
  """
  characterizations(first: Int): CharacterizationConnection

  """
  Identifies one or more existing mitigating factors that may affect the overall
  determination of the risk, with an optional link to an implementation
  statement in the SSP.
  """
  mitigating_factors: [MitigatingFactor]

  """Identifies the date/time by which the risk must be resolved."""
  deadline: DateTime

  """
  Identifies either recommended or an actual plan for addressing the risk.
  """
  remediations(first: Int): RiskResponseConnection

  """log of all risk-related tasks taken."""
  risk_log(first: Int): LogEntryConnection

  """
  Relates the finding to a set of referenced observations that were used to
  determine the risk.  This would be the Component in which the risk exists and
  the InventoryItem(s) in which theComponent is installed
  """
  related_observations(first: Int): ObservationConnection

  """Identifies that the risk has been confirmed to be a false positive."""
  false_positive: RiskAssertionState

  """
  Identifies that the risk cannot be remediated without impact to the system and must be accepted.
  """
  accepted: RiskAssertionState

  """
  Identifies that mitigating factors were identified or implemented, reducing the likelihood or impact of the risk.
  """
  risk_adjusted: RiskAssertionState

  """
  Identifies Assessor's recommended risk priority. Lower numbers are higher priority. One (1) is highest priority.
  """
  priority: PositiveInt

  """Identifies that a vendor resolution is pending, but not yet available."""
  vendor_dependency: RiskAssertionState

  """Identifies a control impacted by this risk."""
  impacted_control_id: String
}

input RiskAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """Identifies the name for the risk."""
  name: String!

  """
  Identifies a human-readable summary of the identified risk, to include a statement of how the risk impacts the system.
  """
  description: String!

  """Identifies a summary of impact for how the risk affects the system."""
  statement: String!

  """Identifies the status of the associated risk."""
  risk_status: RiskStatus!

  """Identifies the date/time by which the risk must be resolved."""
  deadline: DateTime

  """Identifies that the risk has been confirmed to be a false positive."""
  false_positive: RiskAssertionState

  """
  Identifies that the risk cannot be remediated without impact to the system and must be accepted.
  """
  accepted: RiskAssertionState

  """
  Identifies that mitigating factors were identified or implemented, reducing the likelihood or impact of the risk.
  """
  risk_adjusted: RiskAssertionState

  """
  Identifies Assessor's recommended risk priority. Lower numbers are higher priority. One (1) is highest priority.
  """
  priority: PositiveInt

  """Identifies that a vendor resolution is pending, but not yet available."""
  vendor_dependency: RiskAssertionState

  """Identifies a control impacted by this risk."""
  impacted_control_id: String
}

"""Defines the states of a risk assertion"""
enum RiskAssertionState {
  """Investigating assertion"""
  investigating

  """Pending assertion decision"""
  pending

  """Assertion approved"""
  approved

  """Assertion withdrawn"""
  withdrawn
}

"""
Defines identifying information about a general characterization of the risk.
"""
type RiskCharacterization implements Characterization {
  """Uniquely identifies this object."""
  id: ID!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """Identifies a reference to tool that performed the detection."""
  origins(first: Int): OriginConnection

  """
  Identifies one or more individual characteristic that is part of a larger set produced by the same actor.
  """
  facets(first: Int): FacetConnection

  """Indicates the state of the risk."""
  risk_state: RiskState!

  """Identifies level of the risk."""
  risk: RiskLevel!

  """
  Identifies a rating for the likelihood the risk could successfully occur.
  """
  likelihood: RiskLikelihood!

  """
  Identifies a rating that if the risk were be successfully exploit, the level of impact it would have.
  """
  impact: RiskImpact!
}

input RiskCharacterizationAddInput {
  """Identifies level of the risk."""
  risk: RiskLevel!

  """
  Identifies a rating for the likelihood the risk could successfully occur.
  """
  likelihood: RiskLikelihood!

  """
  Identifies a rating that if the risk were be successfully exploit, the level of impact it would have.
  """
  impact: RiskImpact!

  """Indicates the state of the characterization."""
  risk_state: RiskState
}

type RiskCharacterizationConnection {
  pageInfo: PageInfo!
  edges: [RiskCharacterizationEdge]
}

type RiskCharacterizationEdge {
  cursor: String!
  node: RiskCharacterization!
}

enum RiskCharacterizationsFilter {
  created
  modified
  labels
  risk_status
  deadline
}

input RiskCharacterizationsFiltering {
  key: RiskCharacterizationsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum RiskCharacterizationsOrdering {
  created
  modified
  labels
  name
  risk_status
  deadline
}

type RiskConnection {
  pageInfo: PageInfo!
  edges: [RiskEdge]
}

type RiskEdge {
  cursor: String!
  node: Risk!
}

"""Defines the set of risk impact levels"""
enum RiskImpact {
  """
  Expected to have multiple severe or catastrophic adverse effects organizational operations, assets, or individuals.
  """
  very_high

  """
  Expected to have severe or catastrophic adverse effects on organizational operations, assets, or individuals.
  """
  high

  """
  Expected to have serious adverse effect on organizational operations, assets, or individuals.
  """
  moderate

  """
  Expected to have limited adverse effect on organizational operations, assets, or individuals.
  """
  low

  """
  Expected to have negligible adverse effect on organizational operations, assets, or individuals.
  """
  very_low
}

"""Defines the set of risk levels"""
enum RiskLevel {
  """
  Expected to have multiple severe or catastrophic adverse effects organizational operations, assets, or individuals.
  """
  very_high

  """
  Expected to have severe or catastrophic adverse effects on organizational operations, assets, or individuals.
  """
  high

  """
  Expected to have serious adverse effect on organizational operations, assets, or individuals.
  """
  moderate

  """
  Expected to have limited adverse effect on organizational operations, assets, or individuals.
  """
  low

  """
  Expected to have negligible adverse effect on organizational operations, assets, or individuals.
  """
  very_low
}

"""Defines the set of phase of the risk lifecycle."""
enum RiskLifeCyclePhase {
  """Recommended Remediation"""
  recommendation

  """The actions intended to resolve the risk."""
  planned

  """This remediation activities were performed to address the risk."""
  completed
}

"""Defines the set of risk likelihood levels"""
enum RiskLikelihood {
  """Almost certain to occur."""
  very_high

  """Highly likely to occur."""
  high

  """somewhat likely to occur."""
  moderate

  """unlikely to occur."""
  low

  """highly unlikely to occur."""
  very_low
}

"""Defines identifying information about a response to a risk."""
type RiskResponse implements BasicObject & LifecycleObject & CoreObject & OscalObject {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Identifies the type of response to the risk"""
  response_type: ResponseType!

  """
  Identifies whether this is a recommendation, such as from an assessor or tool,
  or an actual plan accepted by the system owner.
  """
  lifecycle: RiskLifeCyclePhase!

  """Identifies the name for the response activity."""
  name: String!

  """Identifies a human-readable description of the response plan."""
  description: String!

  """
  Identifies one or more sources of individuals and/or tools that generated this recommended or planned response.
  """
  origins(first: Int): OriginConnection

  """Identifies an asset required to achieve remediation."""
  required_assets(first: Int): RequiredAssetConnection

  """
  Identifies one or more scheduled events or milestones, which may be associated with a series of assessment actions.
  """
  tasks(first: Int): RemediationTaskConnection
}

input RiskResponseAddInput {
  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """Identifies the type of response to the risk"""
  response_type: ResponseType!

  """
  Identifies whether this is a recommendation, such as from an assessor or tool,
  or an actual plan accepted by the system owner.
  """
  lifecycle: RiskLifeCyclePhase!

  """Identifies the name for the response activity."""
  name: String!

  """Identifies a human-readable description of the response plan."""
  description: String!
}

type RiskResponseConnection {
  pageInfo: PageInfo!
  edges: [RiskResponseEdge]
}

type RiskResponseEdge {
  cursor: String!
  node: RiskResponse!
}

enum RiskResponseFilter {
  risk_state
  name
  source_system
}

input RiskResponsesFiltering {
  key: RiskResponseFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum RiskResponsesOrdering {
  risk_state
  name
  source_system
}

enum RisksFilter {
  created
  modified
  labels
  risk_status
  deadline
}

input RisksFiltering {
  key: RisksFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum RisksOrdering {
  created
  modified
  labels
  name
  risk_status
  deadline
}

"""Defines the states of a risk identification"""
enum RiskState {
  """As first identified."""
  initial

  """
  Indicates that residual risk remains after some adjustments have been made.
  """
  adjusted
}

"""Defines the type of status for a risk"""
enum RiskStatus {
  """The risk has been identified."""
  open

  """The identified risk is being investigated. (Open risk)"""
  investigating

  """
  Remediation activities are underway, but are not yet complete. (Open risk)
  """
  remediating

  """
  A risk deviation, such as false positive, risk reduction, or operational
  requirement has been submitted for approval. (Open risk)
  """
  deviation_requested

  """
  A risk deviation, such as false positive, risk reduction, or operational requirement has been approved. (Open risk)
  """
  deviation_approved

  """The risk has been resolved."""
  closed
}

type Role implements BasicObject & InternalObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  name: String!
  default_assignation: Boolean
  description: String
  created_at: DateTime!
  updated_at: DateTime!
  capabilities: [Capability]
  editContext: [EditUserContext]
}

input RoleAddInput {
  name: String!
  description: String
  clientMutationId: String
}

type RoleConnection {
  pageInfo: PageInfo!
  edges: [RoleEdge]
}

type RoleEdge {
  cursor: String!
  node: Role!
}

type RoleEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!): Role
  contextPatch(input: EditContext): Role
  contextClean: Role
  relationAdd(input: InternalRelationshipAddInput): InternalRelationship
  relationDelete(toId: String!, relationship_type: String!): Role
}

enum RolesOrdering {
  name
  default_assignation
  created_at
  updated_at
}

"""Defines the identifier for a specific role."""
enum RoleType {
  """
  Accountable for ensuring the asset is managed in accordance with organizational policies and procedures.
  """
  asset_owner

  """Responsible for administering a set of assets."""
  asset_administrator

  """
  Responsible for the configuration management processes governing changes to the asset.
  """
  configuration_management

  """Responsible for providing information and support to users."""
  help_desk

  """
  Responsible for responding to an event that could lead to loss of, or
  disruption to, an organization's operations, services or functions.
  """
  incident_response

  """Member of the network operations center (NOC)."""
  network_operations

  """Member of the security operations center (SOC)."""
  security_operations

  """Responsible for the creation and maintenance of a component."""
  maintainer

  """
  Organization responsible for providing the component, if this is different from the 'maintainer' (e.g., a reseller).
  """
  provider
}

type Rule {
  id: ID!
  name: String!
  description: String!
  activated: Boolean!
}

type RuleExecutionError {
  timestamp: DateTime
  source: String
  error: String
}

type RuleManager {
  id: ID!
  activated: Boolean!
  lastEventId: String
  errors: [RuleExecutionError]
}

type RuleTask implements Task {
  id: ID!
  type: TaskType
  initiator: User
  actions: [TaskAction]
  created_at: DateTime
  last_execution_date: DateTime
  completed: Boolean
  task_expected_number: Int
  task_processed_number: Int
  errors: [TaskError]
  rule: ID!
  enable: Boolean
}

type SearchMetrics {
  query_total: String
  fetch_total: String
}

type Sector implements BasicObject & StixObject & StixCoreObject & StixDomainObject & Identity {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  identity_class: String!
  name: String!
  description: String
  contact_information: String
  roles: [String]
  x_opencti_aliases: [String]
  parentSectors: SectorConnection
  subSectors: SectorConnection
  isSubSector: Boolean
  targetedOrganizations: StixCoreRelationshipConnection
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input SectorAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String!
  contact_information: String
  roles: [String]
  x_opencti_aliases: [String]
  confidence: Int
  revoked: Boolean
  lang: String
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type SectorConnection {
  pageInfo: PageInfo!
  edges: [SectorEdge]
}

type SectorEdge {
  cursor: String!
  node: Sector!
}

type SectorEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Sector
  contextPatch(input: EditContext): Sector
  contextClean: Sector
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Sector
}

enum SectorsFilter {
  name
  confidence
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  partOf
  status_id
}

input SectorsFiltering {
  key: SectorsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum SectorsOrdering {
  name
  description
  confidence
  created
  modified
  created_at
  updated_at
  status_id
}

"""
Defines identifying information about infrastructure server device that perform generic computing capabilities.
"""
type Server implements BasicObject & LifecycleObject & CoreObject & Asset & ItAsset {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  asset_id: String
  name: String!
  description: String
  locations: [AssetLocation]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
  asset_tag: String
  asset_type: AssetType!
  serial_number: String
  vendor_name: String
  version: String
  release_date: DateTime
  implementation_point: ImplementationPoint!
  operational_status: OperationalStatus!
  cpe_identifier: String
  installation_id: String
  installed_hardware: [ComputingDeviceAsset!]!
  installed_operating_system: OperatingSystemAsset!
  model: String
  motherboard_id: String
  baseline_configuration_name: String
  function: String
  bios_id: String
  connected_to_network: NetworkAsset
  default_gateway: String
  fqdn: String
  hostname: String
  netbios_name: String
  installed_software: [SoftwareAsset!]!
  ip_address: [IpAddress!]!
  mac_address: [MAC!]!
  vlan_id: String
  uri: String
  ports: [PortInfo!]!
  is_publicly_accessible: Boolean
  is_scanned: Boolean
  is_virtual: Boolean
}

"""Defines identifying information about a Service Component"""
type ServiceComponent implements BasicObject & LifecycleObject & CoreObject & OscalObject & Component {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Indicates the type of the component"""
  component_type: ComponentType!

  """Identifies a human-readable name for the component"""
  name: String!

  """
  Identifies a description of the component, including information about its function.
  """
  description: String!

  """
  Identifies a summary of the technological or business purpose of the component.
  """
  purpose: String

  """
  Identifies an organizationally specific identifier that is used to uniquely
  identify a logical or tangible item by the organization that owns the item.
  """
  asset_id: String

  """
  Identifies an asset tag assigned by the organization responsible for maintaining the logical or tangible item.
  """
  asset_tag: String

  """
  Indicates the asset's function, such as Router, Storage Array, DNS Server.
  """
  asset_type: AssetType!

  """Identifies the  model of the component."""
  model: String

  """Identifies the name of the company or organization"""
  vendor_name: String

  """Indicates the version of the component."""
  version: String

  """
  Identifies date the component was released, such as a software release date or policy publication date.
  """
  release_date: DateTime

  """
  Indicates relative placement of component ('internal' or 'external') to the system.
  """
  implementation_point: ImplementationPoint!

  """Identifies whether the asset can be check with an authenticated scan"""
  allows_authenticated_scans: Boolean

  """Identifies whether the asset is publicly accessible"""
  is_publicly_accessible: Boolean

  """Identifies whether the asset is virtualized"""
  is_virtual: Boolean

  """Identifies the network identifier of the asset."""
  network_id: String

  """Identifies the Virtual LAN identifier of the asset."""
  vlan_id: String

  """Identifies The name of the baseline configuration for the asset."""
  baseline_configuration_name: String

  """Identifies the function provided by the asset for the system."""
  function: String

  """Indicates the operational status of the system component."""
  operational_status: OperationalStatus!

  """
  Indicates references to one or more roles with responsibility for performing a function relative to the containing object.
  """
  responsible_roles: [OscalResponsibleParty]

  """
  Indicates the physical location of the asset's hardware (e.g., Data Center ID,
  Cage#, Rack#, or other meaningful location identifiers).
  """
  physical_location: [OscalLocation]

  """Identifies information about the protocol used to provide a service."""
  ports: [PortInfo!]!
}

input ServiceComponentAddInput {
  labels: [String]

  """Indicates the type of the component"""
  component_type: ComponentType!

  """Identifies a human-readable name for the component"""
  name: String!

  """
  Identifies a description of the component, including information about its function.
  """
  description: String!

  """
  Identifies a summary of the technological or business purpose of the component.
  """
  purpose: String

  """
  Identifies an organizationally specific identifier that is used to uniquely
  identify a logical or tangible item by the organization that owns the item.
  """
  asset_id: String

  """
  Identifies an asset tag assigned by the organization responsible for maintaining the logical or tangible item.
  """
  asset_tag: String

  """
  Indicates the asset's function, such as Router, Storage Array, DNS Server.
  """
  asset_type: AssetType!

  """Identifies the  model of the component."""
  model: String

  """Identifies the name of the company or organization"""
  vendor_name: String

  """Indicates the version of the component."""
  version: String

  """
  Identifies date the component was released, such as a software release date or policy publication date.
  """
  release_date: DateTime

  """
  Indicates relative placement of component ('internal' or 'external') to the system.
  """
  implementation_point: ImplementationPoint!

  """Identifies whether the asset can be check with an authenticated scan"""
  allows_authenticated_scans: Boolean

  """Identifies whether the asset is publicly accessible"""
  is_publicly_accessible: Boolean

  """Identifies whether the asset is virtualized"""
  is_virtual: Boolean

  """Identifies the network identifier of the asset."""
  network_id: String

  """Identifies the Virtual LAN identifier of the asset."""
  vlan_id: String

  """Identifies The name of the baseline configuration for the asset."""
  baseline_configuration_name: String

  """Identifies the function provided by the asset for the system."""
  function: String

  """Indicates the operational status of the system component."""
  operational_status: OperationalStatus!

  """Identifies information about the protocol used to provide a service."""
  ports: [PortInfoAddInput!]!
}

type ServiceComponentConnection {
  pageInfo: PageInfo!
  edges: [ServiceComponentEdge]
}

type ServiceComponentEdge {
  cursor: String!
  node: ServiceComponent!
}

enum ServiceComponentsFilter {
  component_type
  asset_type
  created
  modified
  labels
}

input ServiceComponentsFiltering {
  key: ServiceComponentsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum ServiceComponentsOrdering {
  component_type
  asset_type
  created
  modified
  labels
}

type SessionDetail {
  id: ID!
  created: DateTime
  ttl: Int
}

type Settings implements InternalObject & BasicObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  platform_title: String
  platform_email: String
  platform_url: String
  platform_modules: [Module]
  platform_providers: [Provider]
  platform_language: String
  platform_theme: String
  platform_theme_dark_primary: String
  platform_theme_dark_secondary: String
  platform_theme_dark_logo: String
  platform_theme_light_primary: String
  platform_theme_light_secondary: String
  platform_theme_light_logo: String
  platform_map_tile_server_dark: String
  platform_map_tile_server_light: String
  platform_login_message: String
  platform_enable_reference: [String]
  created_at: DateTime!
  updated_at: DateTime!
  editContext: [EditUserContext]
}

type SettingsEditMutations {
  fieldPatch(input: [EditInput]!): Settings
  contextPatch(input: EditContext): Settings
  contextClean: Settings
}

type Software implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  name: String
  cpe: String
  swid: String
  languages: [String]
  vendor: String
  version: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input SoftwareAddInput {
  name: String
  cpe: String
  swid: String
  languages: [String]
  vendor: String
  version: String
}

"""Defines identifying information about an instance of software."""
type SoftwareAsset implements BasicObject & LifecycleObject & CoreObject & Asset & ItAsset {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  asset_id: String
  name: String!
  description: String
  locations: [AssetLocation]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
  asset_tag: String
  asset_type: AssetType!
  serial_number: String
  vendor_name: String
  version: String
  release_date: DateTime
  implementation_point: ImplementationPoint!
  operational_status: OperationalStatus!
  function: String
  cpe_identifier: String
  software_identifier: String
  patch_level: String
  installation_id: String
  license_key: String
}

input SoftwareAssetAddInput {
  labels: [String]
  asset_id: String
  name: String!
  description: String
  asset_tag: String
  asset_type: AssetType!
  serial_number: String
  vendor_name: String
  version: String
  release_date: DateTime
  implementation_point: ImplementationPoint!
  operational_status: OperationalStatus!
  function: String
  cpe_identifier: String
  software_identifier: String
  patch_level: String
  installation_id: String
  license_key: String
}

type SoftwareAssetConnection {
  pageInfo: PageInfo!
  edges: [SoftwareAssetEdge]
}

type SoftwareAssetEdge {
  cursor: String!
  node: SoftwareAsset!
}

enum SoftwareAssetFilter {
  name
  asset_type
  asset_id
  labels
}

input SoftwareAssetFiltering {
  key: SoftwareAssetFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum SoftwareAssetOrdering {
  name
  asset_type
  asset_id
  labels
}

"""Defines identifying information about a Software Component"""
type SoftwareComponent implements BasicObject & LifecycleObject & CoreObject & OscalObject & Component {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Indicates the type of the component"""
  component_type: ComponentType!

  """Identifies a human-readable name for the component"""
  name: String!

  """
  Identifies a description of the component, including information about its function.
  """
  description: String!

  """
  Identifies a summary of the technological or business purpose of the component.
  """
  purpose: String

  """
  Identifies an organizationally specific identifier that is used to uniquely
  identify a logical or tangible item by the organization that owns the item.
  """
  asset_id: String

  """
  Identifies an asset tag assigned by the organization responsible for maintaining the logical or tangible item.
  """
  asset_tag: String

  """
  Indicates the asset's function, such as Router, Storage Array, DNS Server.
  """
  asset_type: AssetType!

  """Identifies the  model of the component."""
  model: String

  """Identifies the name of the company or organization"""
  vendor_name: String

  """Indicates the version of the component."""
  version: String

  """
  Identifies date the component was released, such as a software release date or policy publication date.
  """
  release_date: DateTime

  """
  Indicates relative placement of component ('internal' or 'external') to the system.
  """
  implementation_point: ImplementationPoint!

  """Identifies whether the asset can be check with an authenticated scan"""
  allows_authenticated_scans: Boolean

  """Identifies whether the asset is publicly accessible"""
  is_publicly_accessible: Boolean

  """Identifies whether the asset is virtualized"""
  is_virtual: Boolean

  """Identifies the network identifier of the asset."""
  network_id: String

  """Identifies the Virtual LAN identifier of the asset."""
  vlan_id: String

  """Identifies The name of the baseline configuration for the asset."""
  baseline_configuration_name: String

  """Identifies the function provided by the asset for the system."""
  function: String

  """Indicates the operational status of the system component."""
  operational_status: OperationalStatus!

  """
  Indicates references to one or more roles with responsibility for performing a function relative to the containing object.
  """
  responsible_roles: [OscalResponsibleParty]

  """
  Indicates the physical location of the asset's hardware (e.g., Data Center ID,
  Cage#, Rack#, or other meaningful location identifiers).
  """
  physical_location: [OscalLocation]
  cpe_identifier: String

  """Identifies the Software Identifier (SwID)"""
  software_identifier: String

  """Identifies the patch level"""
  patch_level: String

  """Identifies the identifier for the installation"""
  installation_id: String

  """Identifies the license key"""
  license_key: String
}

input SoftwareComponentAddInput {
  labels: [String]

  """Indicates the type of the component"""
  component_type: ComponentType!

  """Identifies a human-readable name for the component"""
  name: String!

  """
  Identifies a description of the component, including information about its function.
  """
  description: String!

  """
  Identifies a summary of the technological or business purpose of the component.
  """
  purpose: String

  """
  Identifies an organizationally specific identifier that is used to uniquely
  identify a logical or tangible item by the organization that owns the item.
  """
  asset_id: String

  """
  Identifies an asset tag assigned by the organization responsible for maintaining the logical or tangible item.
  """
  asset_tag: String

  """
  Indicates the asset's function, such as Router, Storage Array, DNS Server.
  """
  asset_type: AssetType!

  """Identifies the  model of the component."""
  model: String

  """Identifies the name of the company or organization"""
  vendor_name: String

  """Indicates the version of the component."""
  version: String

  """
  Identifies date the component was released, such as a software release date or policy publication date.
  """
  release_date: DateTime

  """
  Indicates relative placement of component ('internal' or 'external') to the system.
  """
  implementation_point: ImplementationPoint!

  """Identifies whether the asset can be check with an authenticated scan"""
  allows_authenticated_scans: Boolean

  """Identifies whether the asset is publicly accessible"""
  is_publicly_accessible: Boolean

  """Identifies whether the asset is virtualized"""
  is_virtual: Boolean

  """Identifies the network identifier of the asset."""
  network_id: String

  """Identifies the Virtual LAN identifier of the asset."""
  vlan_id: String

  """Identifies The name of the baseline configuration for the asset."""
  baseline_configuration_name: String

  """Identifies the function provided by the asset for the system."""
  function: String

  """Indicates the operational status of the system component."""
  operational_status: OperationalStatus!

  """Identifies the CPE identifier"""
  cpe_identifier: String

  """Identifies the Software Identifier (SwID)"""
  software_identifier: String

  """Identifies the patch level"""
  patch_level: String

  """Identifies the identifier for the installation"""
  installation_id: String

  """Identifies the license key"""
  license_key: String
}

type SoftwareComponentConnection {
  pageInfo: PageInfo!
  edges: [SoftwareComponentEdge]
}

type SoftwareComponentEdge {
  cursor: String!
  node: SoftwareComponent!
}

enum SoftwareComponentsFilter {
  component_type
  asset_type
  created
  modified
  labels
}

input SoftwareComponentsFiltering {
  key: SoftwareComponentsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum SoftwareComponentsOrdering {
  component_type
  asset_type
  created
  modified
  labels
}

type StartEndPortRange {
  starting_port: Port
  ending_port: Port
  protocols: [NetworkAssetProtocol]
}

enum State {
  wait
  progress
  complete
}

enum StatsOperation {
  count
  sum
}

type Status {
  id: ID!
  template: StatusTemplate
  type: String!
  order: Int!
  disabled: Boolean
}

input StatusAddInput {
  template_id: String!
  order: Int!
}

type StatusConnection {
  pageInfo: PageInfo!
  edges: [StatusEdge]
}

type StatusEdge {
  cursor: String!
  node: Status!
}

input StatusesFiltering {
  key: StatusFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum StatusFilter {
  type
}

enum StatusOrdering {
  type
  order
}

type StatusTemplate {
  id: ID!
  name: String!
  color: String!
}

type StatusTemplateConnection {
  pageInfo: PageInfo!
  edges: [StatusTemplateEdge]
}

type StatusTemplateEdge {
  cursor: String!
  node: StatusTemplate!
}

enum StatusTemplateOrdering {
  name
}

interface StixCoreObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

type StixCoreObjectConnection {
  pageInfo: PageInfo!
  edges: [StixCoreObjectEdge]
}

type StixCoreObjectEdge {
  cursor: String!
  node: StixCoreObject!
}

type StixCoreObjectEditMutations {
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationsAdd(input: StixMetaRelationshipsAddInput): StixCoreObject
  relationDelete(toId: String!, relationship_type: String!): StixCoreObject
  merge(stixCoreObjectsIds: [String]!): StixCoreObject
  askEnrichment(connectorId: ID!): Work
}

union StixCoreObjectOrStixCoreRelationship = AttackPattern | Campaign | Note | ObservedData | Opinion | Report | CourseOfAction | Individual | Organization | Sector | Indicator | Infrastructure | IntrusionSet | City | Country | Region | Position | Malware | ThreatActor | Tool | Vulnerability | Incident | AutonomousSystem | Directory | DomainName | EmailAddr | EmailMessage | EmailMimePartType | Artifact | StixFile | X509Certificate | IPv4Addr | IPv6Addr | MacAddr | Mutex | NetworkTraffic | Process | Software | Url | UserAccount | WindowsRegistryKey | WindowsRegistryValueType | X509V3ExtensionsType | XOpenCTICryptographicKey | XOpenCTICryptocurrencyWallet | XOpenCTIHostname | XOpenCTIText | XOpenCTIUserAgent | StixCoreRelationship

enum StixCoreObjectsFilter {
  name
  created
  modified
  created_at
  createdBy
  markedBy
  labelledBy
  hasExternalReference
  objectContains
  containedBy
  indicates
  confidence
}

input StixCoreObjectsFiltering {
  key: StixCoreObjectsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum StixCoreObjectsOrdering {
  name
  entity_type
  created
  modified
  created_at
  updated_at
  published
  valid_from
  valid_to
  indicator_pattern
}

type StixCoreRelationship implements BasicRelationship & StixRelationship {
  id: ID!
  entity_type: String!
  parent_types: [String]!
  fromRole: String
  toRole: String
  created_at: DateTime!
  updated_at: DateTime!
  standard_id: String!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  from: StixObjectOrStixRelationship
  to: StixObjectOrStixRelationship
  spec_version: String!
  x_opencti_inferences: [Inference]
  relationship_type: String!
  description: String
  start_time: DateTime
  stop_time: DateTime
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  killChainPhases: KillChainPhaseConnection
  creator: User
  toStix: String
  editContext: [EditUserContext]
  status: Status
  workflowEnabled: Boolean
}

input StixCoreRelationshipAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  fromId: String!
  toId: String!
  relationship_type: String!
  description: String
  start_time: DateTime
  stop_time: DateTime
  confidence: Int
  revoked: Boolean
  lang: String
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  killChainPhases: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type StixCoreRelationshipConnection {
  pageInfo: PageInfo!
  edges: [StixCoreRelationshipEdge]
}

type StixCoreRelationshipEdge {
  cursor: String!
  node: StixCoreRelationship!
}

type StixCoreRelationshipEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): StixCoreRelationship
  contextPatch(input: EditContext): StixCoreRelationship
  contextClean: StixCoreRelationship
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): StixCoreRelationship
}

enum StixCoreRelationshipsFilter {
  fromId
  toId
  created
  modified
  created_at
  confidence
  createdBy
  markedBy
  labelledBy
  toName
  toCreatedAt
  toPatternType
  toMainObservableType
  status_id
}

input StixCoreRelationshipsFiltering {
  key: StixCoreRelationshipsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum StixCoreRelationshipsOrdering {
  entity_type
  relationship_type
  confidence
  start_time
  stop_time
  created
  modified
  created_at
  updated_at
  objectMarking
  objectLabel
  killChainPhase
  toName
  toValidFrom
  toValidUntil
  toPatternType
  status_id
}

interface StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

type StixCyberObservableConnection {
  pageInfo: PageInfo!
  edges: [StixCyberObservableEdge]
}

type StixCyberObservableEdge {
  cursor: String!
  node: StixCyberObservable!
}

type StixCyberObservableEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): StixCyberObservable
  contextPatch(input: EditContext): StixCyberObservable
  contextClean: StixCyberObservable
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationsAdd(input: StixMetaRelationshipsAddInput): StixCyberObservable
  relationDelete(toId: String!, relationship_type: String!): StixCyberObservable
  promote: StixCyberObservable
}

type StixCyberObservableRelationship implements BasicRelationship & StixRelationship {
  id: ID!
  entity_type: String!
  parent_types: [String]!
  fromRole: String
  toRole: String
  created_at: DateTime!
  updated_at: DateTime!
  standard_id: String!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  from: StixObjectOrStixRelationship
  to: StixObjectOrStixRelationship
  x_opencti_inferences: [Inference]
  relationship_type: String!
  start_time: DateTime
  stop_time: DateTime
  editContext: [EditUserContext]
}

input StixCyberObservableRelationshipAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  fromId: String!
  toId: String!
  relationship_type: String!
  confidence: Int
  createdBy: String
  start_time: DateTime
  stop_time: DateTime
  objectMarking: [String]
  objectLabel: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type StixCyberObservableRelationshipConnection {
  pageInfo: PageInfo!
  edges: [StixCyberObservableRelationshipEdge]
}

type StixCyberObservableRelationshipEdge {
  cursor: String!
  node: StixCyberObservableRelationship!
}

type StixCyberObservableRelationshipEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!): StixCyberObservableRelationship
  contextPatch(input: EditContext): StixCyberObservableRelationship
  contextClean: StixCyberObservableRelationship
}

enum StixCyberObservableRelationshipsFilter {
  created_at
}

input StixCyberObservableRelationshipsFiltering {
  key: StixCyberObservableRelationshipsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum StixCyberObservableRelationshipsOrdering {
  entity_type
  confidence
  start_time
  stop_time
  created
  modified
  created_at
  updated_at
  toName
  toValidFrom
  toValidUntil
  toPatternType
  toCreatedAt
}

enum StixCyberObservablesFilter {
  entity_type
  x_opencti_score
  x_opencti_organization_type
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  relatedTo
  objectContained
  containedBy
  hasExternalReference
  sightedBy
  value
  name
  confidence
  hashes_MD5
  hashes_SHA1
  hashes_SHA256
}

input StixCyberObservablesFiltering {
  key: StixCyberObservablesFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum StixCyberObservablesOrdering {
  entity_type
  created_at
  updated_at
}

interface StixDomainObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  creator: User
  toStix: String
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input StixDomainObjectAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String
  confidence: Int
  pattern_type: String
  pattern: String
  aliases: [String]
  x_opencti_aliases: [String]
  type: String!
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  killChainPhases: [String]
  externalReferences: [String]
  objects: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
  update: Boolean
}

type StixDomainObjectConnection {
  pageInfo: PageInfo!
  edges: [StixDomainObjectEdge]
}

type StixDomainObjectEdge {
  cursor: String!
  node: StixDomainObject!
}

type StixDomainObjectEditMutations {
  delete: ID
  changeType(newType: String!): StixDomainObject
  fieldPatch(input: [EditInput]!, commitMessage: String): StixDomainObject
  contextPatch(input: EditContext): StixDomainObject
  contextClean: StixDomainObject
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationsAdd(input: StixMetaRelationshipsAddInput): StixDomainObject
  relationDelete(toId: String!, relationship_type: String): StixDomainObject
  importPush(file: Upload!): File
  exportAsk(format: String!, exportType: String!, maxMarkingDefinition: String): [File]
  exportPush(file: Upload!): Boolean
}

enum StixDomainObjectsFilter {
  name
  entity_type
  aliases
  x_opencti_aliases
  created
  modified
  created_at
  createdBy
  markedBy
  labelledBy
  hasExternalReference
  objectContains
  containedBy
  indicates
  confidence
  valid_from
  valid_until
  pattern_type
  x_opencti_main_observable_type
  report_types
  x_opencti_organization_type
  published
  status_id
}

input StixDomainObjectsFiltering {
  key: StixDomainObjectsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum StixDomainObjectsOrdering {
  name
  entity_type
  created
  modified
  created_at
  updated_at
  published
  valid_from
  valid_until
  indicator_pattern
  status_id
}

type StixEditMutations {
  delete: ID
}

type StixFile implements BasicObject & StixObject & StixCoreObject & StixCyberObservable & HashedObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  hashes: [Hash]
  extensions: String
  size: Int
  name: String
  name_enc: String
  magic_number_hex: String
  mime_type: String
  ctime: DateTime
  mtime: DateTime
  atime: DateTime
  x_opencti_additional_names: [String]
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input StixFileAddInput {
  hashes: [HashInput]
  extensions: String
  size: Int
  name: String
  name_enc: String
  magic_number_hex: String
  mime_type: String
  ctime: DateTime
  mtime: DateTime
  atime: DateTime
  x_opencti_additional_names: [String]
}

interface StixMetaObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  created: DateTime
  modified: DateTime
}

type StixMetaRelationship implements BasicRelationship & StixRelationship {
  id: ID!
  entity_type: String!
  parent_types: [String]!
  fromRole: String
  toRole: String
  created_at: DateTime!
  updated_at: DateTime!
  standard_id: String!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  from: StixObjectOrStixRelationship
  to: StixObjectOrStixRelationship
  x_opencti_inferences: [Inference]
}

input StixMetaRelationshipAddInput {
  relationship_type: String!
  fromId: ID
  toId: ID
}

type StixMetaRelationshipConnection {
  pageInfo: PageInfo!
  edges: [StixMetaRelationshipEdge]
}

type StixMetaRelationshipEdge {
  cursor: String!
  node: StixMetaRelationship!
}

input StixMetaRelationshipsAddInput {
  relationship_type: String!
  fromIds: [ID]
  toIds: [ID]
}

enum StixMetaRelationshipsFilter {
  created_at
}

input StixMetaRelationshipsFiltering {
  key: StixMetaRelationshipsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum StixMetaRelationshipsOrdering {
  created_at
  updated_at
}

interface StixObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
}

union StixObjectOrStixRelationship = MarkingDefinition | Label | KillChainPhase | ExternalReference | AttackPattern | Campaign | Note | ObservedData | Opinion | Report | CourseOfAction | Individual | Organization | Sector | System | Indicator | Infrastructure | IntrusionSet | City | Country | Region | Position | Malware | ThreatActor | Tool | Vulnerability | Incident | AutonomousSystem | Directory | DomainName | EmailAddr | EmailMessage | EmailMimePartType | Artifact | StixFile | X509Certificate | IPv4Addr | IPv6Addr | MacAddr | Mutex | NetworkTraffic | Process | Software | Url | UserAccount | WindowsRegistryKey | WindowsRegistryValueType | X509V3ExtensionsType | XOpenCTICryptographicKey | XOpenCTICryptocurrencyWallet | XOpenCTIHostname | XOpenCTIText | XOpenCTIUserAgent | StixCoreRelationship | StixMetaRelationship | StixSightingRelationship | StixCyberObservableRelationship

type StixObjectOrStixRelationshipConnection {
  pageInfo: PageInfo!
  edges: [StixObjectOrStixRelationshipEdge]
}

type StixObjectOrStixRelationshipEdge {
  cursor: String!
  node: StixObjectOrStixRelationship!
}

enum StixObjectOrStixRelationshipsFilter {
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
}

input StixObjectOrStixRelationshipsFiltering {
  key: StixObjectOrStixRelationshipsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum StixObjectOrStixRelationshipsOrdering {
  name
  entity_type
  created_at
  updated_at
  createdBy
  objectMarking
  objectLabel
}

interface StixRelationship {
  id: ID!
  entity_type: String!
  parent_types: [String]!
  fromRole: String
  toRole: String
  standard_id: String!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  from: StixObjectOrStixRelationship
  to: StixObjectOrStixRelationship
  x_opencti_inferences: [Inference]
}

type StixRelationshipConnection {
  pageInfo: PageInfo!
  edges: [StixRelationshipEdge]
}

type StixRelationshipEdge {
  cursor: String!
  node: StixRelationship!
}

enum StixRelationshipsFilter {
  created
  modified
  created_at
  confidence
  createdBy
  markedBy
  labelledBy
  toName
  toCreatedAt
  toPatternType
  toMainObservableType
}

input StixRelationshipsFiltering {
  key: StixRelationshipsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum StixRelationshipsOrdering {
  entity_type
  relationship_type
  confidence
  start_time
  stop_time
  created
  modified
  created_at
  updated_at
  objectMarking
  objectLabel
  killChainPhase
  toName
  toValidFrom
  toValidUntil
  toPatternType
}

type StixSightingRelationship implements BasicRelationship & StixRelationship {
  id: ID!
  entity_type: String!
  parent_types: [String]!
  fromRole: String
  toRole: String
  created_at: DateTime!
  updated_at: DateTime!
  standard_id: String!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  from: StixObjectOrStixRelationship
  to: StixObjectOrStixRelationship
  x_opencti_inferences: [Inference]
  description: String
  first_seen: DateTime
  last_seen: DateTime
  attribute_count: Int!
  x_opencti_negative: Boolean!
  created: DateTime
  modified: DateTime
  confidence: Int
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  creator: User
  toStix: String
  editContext: [EditUserContext]
  status: Status
  workflowEnabled: Boolean
}

input StixSightingRelationshipAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  fromId: String!
  toId: String
  description: String
  first_seen: DateTime
  last_seen: DateTime
  attribute_count: Int!
  x_opencti_negative: Boolean
  confidence: Int
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type StixSightingRelationshipConnection {
  pageInfo: PageInfo!
  edges: [StixSightingRelationshipsEdge]
}

type StixSightingRelationshipEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): StixSightingRelationship
  contextPatch(input: EditContext): StixSightingRelationship
  contextClean: StixSightingRelationship
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): StixSightingRelationship
}

type StixSightingRelationshipsEdge {
  cursor: String!
  node: StixSightingRelationship!
}

enum StixSightingRelationshipsFilter {
  fromId
  toId
  x_opencti_negative
  attribute_count
  created
  modified
  created_at
  confidence
  createdBy
  markedBy
  labelledBy
  toPatternType
  toMainObservableType
  status_id
}

input StixSightingRelationshipsFiltering {
  key: StixSightingRelationshipsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum StixSightingRelationshipsOrdering {
  confidence
  x_opencti_negative
  first_seen
  last_seen
  created
  modified
  created_at
  updated_at
  objectMarking
  objectLabel
  toName
  toValidFrom
  toValidUntil
  toPatternType
  toCreatedAt
  attribute_count
  status_id
}

type StreamCollection {
  id: ID!
  name: String
  description: String
  filters: String
}

input StreamCollectionAddInput {
  name: String!
  description: String
  filters: String
}

type StreamCollectionConnection {
  pageInfo: PageInfo!
  edges: [StreamCollectionEdge]
}

type StreamCollectionEdge {
  cursor: String!
  node: StreamCollection!
}

type StreamCollectionEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!): StreamCollection
}

enum StreamCollectionOrdering {
  name
  description
}

"""
Defines the identifying information about a resource. Use type to indicate
whether the identified resource is a component, inventory item, location, user,
or something else.
"""
type Subject {
  """Uniquely identifies this object."""
  id: ID!

  """Indicates the type of subject"""
  subject_type: SubjectType!

  """
  Identifies a reference to a component, inventory-item, location, party, user, or resource.
  """
  subject: SubjectTarget

  """Identifies the name for the referenced subject."""
  name: String!

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection
}

input SubjectAddInput {
  """Indicates the type of subject"""
  subject_type: SubjectType!

  """Identifies the name for the referenced subject."""
  name: String!
}

type SubjectConnection {
  pageInfo: PageInfo!
  edges: [SubjectEdge]
}

type SubjectEdge {
  cursor: String!
  node: Subject!
}

enum SubjectFilter {
  subject_type
  name
}

input SubjectsFiltering {
  key: SubjectFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum SubjectsOrdering {
  subject_type
  name
}

union SubjectTarget = HardwareComponent | NetworkComponent | ServiceComponent | SoftwareComponent | SystemComponent | OscalLocation | OscalPerson | OscalOrganization | OscalUser | OscalResource

"""Defines types of subjects"""
enum SubjectType {
  """Component"""
  component

  """Inventory Item"""
  inventory_item

  """Location"""
  location

  """Interview Party"""
  party

  """User"""
  user

  """Resource or Artifact"""
  resource
}

type Subscription {
  settings(id: ID!): Settings
  group(id: ID!): Group
  user(id: ID!): User
  workspace(id: ID!): Workspace
  label(id: ID!): Label
  markingDefinition(id: ID!): MarkingDefinition
  killChainPhase(id: ID!): KillChainPhase
  stixDomainObject(id: ID!): StixDomainObject
  stixCyberObservable(id: ID!): StixCyberObservable
  stixCoreRelationship(id: ID!): StixCoreRelationship
  stixSightingRelationship(id: ID!): StixSightingRelationship
  stixCyberObservableRelationship(id: ID!): StixCyberObservableRelationship
  externalReference(id: ID!): ExternalReference
}

type SubType {
  id: ID!
  label: String!
  statuses: StatusConnection
  workflowEnabled: Boolean
}

type SubTypeConnection {
  pageInfo: PageInfo!
  edges: [SubTypeEdge]
}

type SubTypeEdge {
  cursor: String!
  node: SubType!
}

type SubTypeEditMutations {
  statusAdd(input: StatusAddInput): SubType
  statusFieldPatch(statusId: String!, input: [EditInput]!): SubType
  statusDelete(statusId: String!): SubType
}

enum SubTypesOrdering {
  label
}

type Synchronizer {
  id: ID!
  name: String!
  uri: String!
  token: String!
  stream_id: String!
  user: User
  running: Boolean!
  current_state: String
  listen_deletion: Boolean!
  ssl_verify: Boolean
}

input SynchronizerAddInput {
  name: String!
  uri: String!
  token: String!
  stream_id: String!
  user_id: String
  listen_deletion: Boolean!
  ssl_verify: Boolean
  current_state: String
}

type SynchronizerConnection {
  pageInfo: PageInfo!
  edges: [SynchronizerEdge]
}

type SynchronizerEdge {
  cursor: String!
  node: Synchronizer!
}

type SynchronizerEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!): Synchronizer
}

enum SynchronizersOrdering {
  id
  name
  current_state
  running
  uri
  stream_id
}

type System implements BasicObject & StixObject & StixCoreObject & StixDomainObject & Identity {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  identity_class: String!
  name: String!
  description: String
  contact_information: String
  roles: [String]
  x_opencti_aliases: [String]
  x_opencti_firstname: String
  x_opencti_lastname: String
  organizations: OrganizationConnection
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input SystemAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String!
  contact_information: String
  roles: [String]
  x_opencti_aliases: [String]
  x_opencti_firstname: String
  x_opencti_lastname: String
  confidence: Int
  revoked: Boolean
  lang: String
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

"""Defines identifying information about a System Component"""
type SystemComponent implements BasicObject & LifecycleObject & CoreObject & OscalObject & Component {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime!

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime!

  """
  Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined.
  """
  labels: [String]

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """
  Identifies one or more references to additional commentary on the Model.
  """
  notes(first: Int): CyioNoteConnection

  """Identifies one or more relationships to other entities."""
  relationships(first: Int, offset: Int, orderedBy: OscalRelationshipsOrdering, orderMode: OrderingMode, filters: [OscalRelationshipsFiltering], filterMode: FilterMode, search: String): OscalRelationshipConnection

  """Indicates the type of the component"""
  component_type: ComponentType!

  """Identifies a human-readable name for the component"""
  name: String!

  """
  Identifies a description of the component, including information about its function.
  """
  description: String!

  """
  Identifies a summary of the technological or business purpose of the component.
  """
  purpose: String

  """
  Identifies an organizationally specific identifier that is used to uniquely
  identify a logical or tangible item by the organization that owns the item.
  """
  asset_id: String

  """
  Identifies an asset tag assigned by the organization responsible for maintaining the logical or tangible item.
  """
  asset_tag: String

  """
  Indicates the asset's function, such as Router, Storage Array, DNS Server.
  """
  asset_type: AssetType!

  """Identifies the  model of the component."""
  model: String

  """Identifies the name of the company or organization"""
  vendor_name: String

  """Indicates the version of the component."""
  version: String

  """
  Identifies date the component was released, such as a software release date or policy publication date.
  """
  release_date: DateTime

  """
  Indicates relative placement of component ('internal' or 'external') to the system.
  """
  implementation_point: ImplementationPoint!

  """Identifies whether the asset can be check with an authenticated scan"""
  allows_authenticated_scans: Boolean

  """Identifies whether the asset is publicly accessible"""
  is_publicly_accessible: Boolean

  """Identifies whether the asset is virtualized"""
  is_virtual: Boolean

  """Identifies the network identifier of the asset."""
  network_id: String

  """Identifies the Virtual LAN identifier of the asset."""
  vlan_id: String

  """Identifies The name of the baseline configuration for the asset."""
  baseline_configuration_name: String

  """Identifies the function provided by the asset for the system."""
  function: String

  """Indicates the operational status of the system component."""
  operational_status: OperationalStatus!

  """
  Indicates references to one or more roles with responsibility for performing a function relative to the containing object.
  """
  responsible_roles: [OscalResponsibleParty]

  """
  Indicates the physical location of the asset's hardware (e.g., Data Center ID,
  Cage#, Rack#, or other meaningful location identifiers).
  """
  physical_location: [OscalLocation]
}

input SystemComponentAddInput {
  labels: [String]

  """Indicates the type of the component"""
  component_type: ComponentType!

  """Identifies a human-readable name for the component"""
  name: String!

  """
  Identifies a description of the component, including information about its function.
  """
  description: String!

  """
  Identifies a summary of the technological or business purpose of the component.
  """
  purpose: String

  """
  Identifies an organizationally specific identifier that is used to uniquely
  identify a logical or tangible item by the organization that owns the item.
  """
  asset_id: String

  """
  Identifies an asset tag assigned by the organization responsible for maintaining the logical or tangible item.
  """
  asset_tag: String

  """
  Indicates the asset's function, such as Router, Storage Array, DNS Server.
  """
  asset_type: AssetType!

  """Identifies the  model of the component."""
  model: String

  """Identifies the name of the company or organization"""
  vendor_name: String

  """Indicates the version of the component."""
  version: String

  """
  Identifies date the component was released, such as a software release date or policy publication date.
  """
  release_date: DateTime

  """
  Indicates relative placement of component ('internal' or 'external') to the system.
  """
  implementation_point: ImplementationPoint!

  """Identifies whether the asset can be check with an authenticated scan"""
  allows_authenticated_scans: Boolean

  """Identifies whether the asset is publicly accessible"""
  is_publicly_accessible: Boolean

  """Identifies whether the asset is virtualized"""
  is_virtual: Boolean

  """Identifies the network identifier of the asset."""
  network_id: String

  """Identifies the Virtual LAN identifier of the asset."""
  vlan_id: String

  """Identifies The name of the baseline configuration for the asset."""
  baseline_configuration_name: String

  """Identifies the function provided by the asset for the system."""
  function: String

  """Indicates the operational status of the system component."""
  operational_status: OperationalStatus!
}

type SystemComponentConnection {
  pageInfo: PageInfo!
  edges: [SystemComponentEdge]
}

type SystemComponentEdge {
  cursor: String!
  node: SystemComponent!
}

enum SystemComponentsFilter {
  component_type
  created
  modified
  labels
}

input SystemComponentsFiltering {
  key: SystemComponentsFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

enum SystemComponentsOrdering {
  component_type
  created
  modified
  labels
}

type SystemConnection {
  pageInfo: PageInfo!
  edges: [SystemEdge]
}

type SystemEdge {
  cursor: String!
  node: System!
}

type SystemEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): System
  contextPatch(input: EditContext): System
  contextClean: System
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): System
}

enum SystemsFilter {
  name
  aliases
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input SystemsFiltering {
  key: SystemsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum SystemsOrdering {
  name
  confidence
  firstname
  lastname
  created
  modified
  status_id
}

interface Task {
  id: ID!
  type: TaskType
  initiator: User
  actions: [TaskAction]
  created_at: DateTime
  last_execution_date: DateTime
  completed: Boolean
  task_expected_number: Int
  task_processed_number: Int
  errors: [TaskError]
}

type TaskAction {
  type: TaskActionType
  context: TaskContext
}

input TaskActionInput {
  type: TaskActionType!
  context: TaskContextInput
}

enum TaskActionType {
  DELETE
  ADD
  REMOVE
  REPLACE
  MERGE
  RESCAN
}

type TaskConnection {
  pageInfo: PageInfo!
  edges: [TaskConnectionEdge]
}

type TaskConnectionEdge {
  cursor: String!
  node: Task!
}

type TaskContext {
  field: String
  type: TaskContextType
  values: [String]!
}

input TaskContextInput {
  field: String
  type: TaskContextType
  values: [String]!
}

enum TaskContextType {
  ATTRIBUTE
  RELATION
}

type TaskError {
  id: ID!
  timestamp: DateTime
  message: String
}

enum TasksFilter {
  type
  initiator
  completed
}

input TasksFiltering {
  key: TasksFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum TasksOrdering {
  id
  type
  completed
  created_at
  last_execution_date
}

"""Defines the type of tasks"""
enum TaskType {
  """The task represents a planned milestone."""
  milestone

  """The task represents a specific assessment action to be performed."""
  action
  QUERY
  LIST
  RULE
}

type TaxiiCollection {
  id: ID!
  name: String
  description: String
  filters: String
}

input TaxiiCollectionAddInput {
  name: String!
  description: String
  filters: String
}

type TaxiiCollectionConnection {
  pageInfo: PageInfo!
  edges: [TaxiiCollectionEdge]
}

type TaxiiCollectionEdge {
  cursor: String!
  node: TaxiiCollection!
}

type TaxiiCollectionEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!): TaxiiCollection
}

enum TaxiiCollectionOrdering {
  name
  description
}

type TelephoneNumber {
  usage_type: UsageType
  phone_number: PhoneNumber
}

input TelephoneNumberAddInput {
  usage_type: UsageType
  phone_number: PhoneNumber
}

type ThreatActor implements BasicObject & StixObject & StixCoreObject & StixDomainObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  name: String!
  description: String
  aliases: [String]
  threat_actor_types: [String]
  first_seen: DateTime
  last_seen: DateTime
  roles: [String]
  goals: [String]
  sophistication: String
  resource_level: String
  primary_motivation: String
  secondary_motivations: [String]
  personal_motivations: [String]
  locations: LocationConnection
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input ThreatActorAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String!
  aliases: [String]
  threat_actor_types: [String]
  first_seen: DateTime
  last_seen: DateTime
  goals: [String]
  sophistication: String
  resource_level: String
  primary_motivation: String
  secondary_motivations: [String]
  personal_motivations: [String]
  confidence: Int
  revoked: Boolean
  lang: String
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type ThreatActorConnection {
  pageInfo: PageInfo!
  edges: [ThreatActorEdge]
}

type ThreatActorEdge {
  cursor: String!
  node: ThreatActor!
}

type ThreatActorEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): ThreatActor
  contextPatch(input: EditContext): ThreatActor
  contextClean: ThreatActor
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): ThreatActor
}

enum ThreatActorsFilter {
  name
  aliases
  created
  modified
  created_at
  updated_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input ThreatActorsFiltering {
  key: ThreatActorsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum ThreatActorsOrdering {
  name
  created
  modified
  created_at
  updated_at
  status_id
}

"""Defines identifying information about a reference to a threat."""
type ThreatReference {
  """Identifies the source of the threat information."""
  source_system: URL!

  """
  Identifies an optional location for the threat data, from which this ID originates.
  """
  href: URL

  """Identifies the specific identifier associated with the threat."""
  threat_identifier: URL
}

type TimeSeries {
  date: DateTime!
  value: Int!
}

type Tool implements StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  name: String!
  description: String
  aliases: [String]
  tool_types: [String]
  tool_version: String
  killChainPhases: KillChainPhaseConnection
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input ToolAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String!
  aliases: [String]
  tool_types: [String]
  tool_version: String
  confidence: Int
  revoked: Boolean
  lang: String
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  killChainPhases: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

type ToolConnection {
  pageInfo: PageInfo!
  edges: [ToolEdge]
}

type ToolEdge {
  cursor: String!
  node: Tool!
}

type ToolEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Tool
  contextPatch(input: EditContext): Tool
  contextClean: Tool
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Tool
}

enum ToolsFilter {
  name
  aliases
  created
  modified
  created_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input ToolsFiltering {
  key: ToolsFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum ToolsOrdering {
  name
  created
  modified
  created_at
  updated_at
  status_id
}

scalar Upload

type Url implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  value: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

input UrlAddInput {
  value: String
}

enum UsageType {
  home
  office
  mobile
}

type User implements BasicObject & InternalObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  user_email: String!
  api_token: String!
  name: String!
  description: String
  firstname: String
  lastname: String
  theme: String
  language: String
  external: Boolean
  dashboard: String
  roles: [Role]!
  capabilities: [Capability]!
  groups: GroupConnection
  created_at: DateTime!
  updated_at: DateTime!
  allowed_marking: [MarkingDefinition]
  sessions: [SessionDetail]
  userSubscriptions(first: Int): UserSubscriptionConnection
  editContext: [EditUserContext]
}

type UserAccount implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  extensions: String
  user_id: String
  credential: String
  account_login: String
  account_type: String
  display_name: String
  is_service_account: Boolean
  is_privileged: Boolean
  can_escalate_privs: Boolean
  is_disabled: Boolean
  account_created: DateTime
  account_expires: DateTime
  credential_last_changed: DateTime
  account_first_login: DateTime
  account_last_login: DateTime
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input UserAccountAddInput {
  extensions: String
  user_id: String
  credential: String
  account_login: String
  account_type: String
  display_name: String
  is_service_account: Boolean
  is_privileged: Boolean
  can_escalate_privs: Boolean
  is_disabled: Boolean
  account_created: DateTime
  account_expires: DateTime
  credential_last_changed: DateTime
  account_first_login: DateTime
  account_last_login: DateTime
}

input UserAddInput {
  user_email: String
  name: String!
  password: String
  firstname: String
  lastname: String
  description: String
  language: String
  theme: String
  roles: [ID]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!): User
  contextPatch(input: EditContext): User
  contextClean: User
  tokenRenew: User
  relationAdd(input: InternalRelationshipAddInput): InternalRelationship
  relationDelete(toId: String!, relationship_type: String!): User
}

input UserLoginInput {
  email: String!
  password: String!
}

type UserSession {
  user: User
  sessions: [SessionDetail]
}

enum UsersFilter {
  name
  entity_type
  created_at
}

input UsersFiltering {
  key: UsersFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum UsersOrdering {
  name
  user_email
  firstname
  lastname
  language
  external
  created_at
  updated_at
}

type UserSubscription {
  id: ID!
  user_id: String
  user: User
  name: String
  options: [String]
  entities_ids: [String]
  entities: [StixDomainObject]
  filters: String
  cron: String
  last_run: DateTime!
}

input UserSubscriptionAddInput {
  name: String!
  options: [String]
  entities_ids: [String]
  filters: String
  cron: String
}

type UserSubscriptionConnection {
  pageInfo: PageInfo!
  edges: [UserSubscriptionEdge]
}

type UserSubscriptionEdge {
  cursor: String!
  node: UserSubscription!
}

type UserSubscriptionEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!): UserSubscription
}

enum UserSubscriptionOrdering {
  created_at
}

"""Defines the set of types of users"""
enum UserType {
  """
  Identifies a user account for a person or entity that is part of the organization who owns or operates the system.
  """
  internal

  """
  Identifies a user account for a person or entity that is not part of the organization who owns or operates the system.
  """
  external

  """Identifies a user of the system considered to be outside."""
  general_public
}

scalar UUID

"""Represents NULL values"""
scalar Void

enum VulnerabilitiesFilter {
  name
  x_opencti_base_score
  x_opencti_base_severity
  x_opencti_attack_vector
  created
  modified
  created_at
  createdBy
  markedBy
  labelledBy
  status_id
}

input VulnerabilitiesFiltering {
  key: VulnerabilitiesFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum VulnerabilitiesOrdering {
  name
  x_opencti_base_score
  x_opencti_base_severity
  x_opencti_attack_vector
  created
  modified
  created_at
  updated_at
  status_id
}

type Vulnerability implements StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  name: String!
  description: String
  x_opencti_base_score: Float
  x_opencti_base_severity: String
  x_opencti_attack_vector: String
  x_opencti_integrity_impact: String
  x_opencti_availability_impact: String
  x_opencti_confidentiality_impact: String
  creator: User
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
}

input VulnerabilityAddInput {
  stix_id: String
  x_opencti_stix_ids: [String]
  name: String!
  description: String!
  x_opencti_base_score: Float
  x_opencti_base_severity: String
  x_opencti_attack_vector: String
  x_opencti_integrity_impact: String
  x_opencti_availability_impact: String
  x_opencti_confidentiality_impact: String
  confidence: Int
  revoked: Boolean
  lang: String
  createdBy: String
  objectMarking: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  clientMutationId: String
  update: Boolean
}

"""
Defines identifying information about a characterization of a vulnerability.
"""
type VulnerabilityCharacterization implements Characterization {
  """Uniquely identifies this object."""
  id: ID!

  """
  Indicates the date and time at which the object was originally created.
  """
  created: DateTime

  """
  Indicates the date and time that this particular version of the object was last modified.
  """
  modified: DateTime

  """
  Identifies a list of CyioExternalReferences, each of which refers to
  information external to the data model. This property is used to provide one
  or more URLs, descriptions, or IDs to records in other systems.
  """
  external_references(first: Int): CyioExternalReferenceConnection

  """Identifies a reference to tool that performed the detection."""
  origins(first: Int): OriginConnection

  """
  Identifies one or more individual characteristic that is part of a larger set produced by the same actor.
  """
  facets(first: Int): FacetConnection

  """Indicates the state of the characterization."""
  risk_state: RiskState

  """Indicates the identifier assigned to the vulnerability"""
  vulnerability_id: String!

  """Identifies whether there is a known exploit available."""
  exploit_available: Boolean

  """Identifies the maturity of the exploit."""
  exploitability: ExploitMaturity

  """Identifies a rating for the severity of the risk."""
  severity: VulnerabilitySeverity

  """Indicates a text representation of a set of CVSS v2.0 metrics."""
  cvss2_vector_string: String

  """Indicates the CVSS v2 Base Score"""
  cvss2_base_score: Float

  """Indicates the CVSS v2 Temporal Score"""
  cvss2_temporal_score: Float

  """Indicates the CVSS v2 Environmental Score"""
  cvss2_environmental_score: Float

  """Indicates a text representation of a set of CVSS v3.* metrics."""
  cvss3_vector_string: String

  """Indicates the CVSS v3.* Base Score"""
  cvss3_base_score: Float

  """Indicates the CVSS v3.* Temporal Score"""
  cvss3_temporal_score: Float

  """Indicates the CVSS v3.* Environmental Score"""
  cvss3_environmental_score: Float

  """Indicates the rationale behind the score"""
  score_rationale: String
}

input VulnerabilityCharacterizationAddInput {
  """Indicates the state of the characterization."""
  risk_state: RiskState

  """Indicates the identifier assigned to the vulnerability"""
  vulnerability_id: String!

  """Identifies whether there is a known exploit available."""
  exploit_available: Boolean

  """Identifies the maturity of the exploit."""
  exploitability: ExploitMaturity

  """Identifies a rating for the severity of the risk."""
  severity: VulnerabilitySeverity

  """Indicates a text representation of a set of CVSS v2.0 metrics."""
  cvss2_vector_string: String

  """Indicates the CVSS v2 Base Score"""
  cvss2_base_score: Float

  """Indicates the CVSS v2 Temporal Score"""
  cvss2_temporal_score: Float

  """Indicates the CVSS v2 Environmental Score"""
  cvss2_environmental_score: Float

  """Indicates a text representation of a set of CVSS v3.* metrics."""
  cvss3_vector_string: String

  """Indicates the CVSS v3.* Base Score"""
  cvss3_base_score: Float

  """Indicates the CVSS v3.* Temporal Score"""
  cvss3_temporal_score: Float

  """Indicates the CVSS v3.* Environmental Score"""
  cvss3_environmental_score: Float

  """Indicates the rationale behind the score"""
  score_rationale: String
}

type VulnerabilityConnection {
  pageInfo: PageInfo!
  edges: [VulnerabilityEdge]
}

type VulnerabilityEdge {
  cursor: String!
  node: Vulnerability!
}

type VulnerabilityEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!, commitMessage: String): Vulnerability
  contextPatch(input: EditContext): Vulnerability
  contextClean: Vulnerability
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationDelete(toId: String!, relationship_type: String!): Vulnerability
}

"""Defines the set of risk severity level"""
enum VulnerabilitySeverity {
  """
  Vulnerability is exposed and exploitable, and its exploitation could result in severe impacts.
  """
  very_high

  """
  Vulnerability is of high concern, based on the exposure of the vulnerability
  and ease of exploitation and/or on the severity of impacts that could result
  from its exploitation.
  """
  high

  """
  Vulnerability is of moderate concern, based on the exposure of the
  vulnerability and ease of exploitation and/or on the severity of impacts that
  could result from its exploitation.
  """
  moderate

  """
  Vulnerability is of minor concern, but effectiveness of remediation could be improved.
  """
  low

  """Vulnerability is not of concern."""
  very_low
}

type WindowsRegistryKey implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  attribute_key: String
  modified_time: DateTime
  number_of_subkeys: Int
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input WindowsRegistryKeyAddInput {
  attribute_key: String
  modified_time: DateTime
  number_of_subkeys: Int
}

type WindowsRegistryValueType implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  name: String
  data: String
  data_type: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input WindowsRegistryValueTypeAddInput {
  name: String
  data: String
  data_type: String
}

type Work {
  id: ID!
  name: String
  user: User
  connector: Connector
  timestamp: DateTime!
  status: State!
  event_source_id: String
  received_time: DateTime
  processed_time: DateTime
  completed_time: DateTime
  completed_number: Int
  messages: [WorkMessage]
  errors: [WorkMessage]
  tracking: WorkTracking
}

type WorkConnection {
  pageInfo: PageInfo!
  edges: [WorkEdge]
}

type WorkEdge {
  cursor: String!
  node: Work!
}

type WorkEditMutations {
  delete: ID!
  reportExpectation(error: WorkErrorInput): ID!
  addExpectations(expectations: Int): ID!
  toReceived(message: String): ID!
  toProcessed(message: String, inError: Boolean): ID!
}

input WorkErrorInput {
  error: String
  source: String
}

type WorkMessage {
  timestamp: DateTime
  message: String
  sequence: Int
  source: String
}

enum WorksFilter {
  status
  connector_id
  completed_number
  completed_time
}

input WorksFiltering {
  key: WorksFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum WorksOrdering {
  status
  timestamp
}

type Workspace {
  id: ID!
  type: String
  name: String!
  description: String
  owner: User
  tags: [String]
  manifest: String
  created_at: DateTime
  updated_at: DateTime
  editContext: [EditUserContext]
  objects(first: Int, after: ID, orderBy: StixObjectOrStixRelationshipsOrdering, orderMode: OrderingMode, filters: [StixObjectOrStixRelationshipsFiltering], filterMode: FilterMode, search: String, types: [String], all: Boolean): StixObjectOrStixRelationshipConnection
  graph_data: String
}

input WorkspaceAddInput {
  type: String!
  name: String!
  description: String
  tags: [String]
}

type WorkspaceConnection {
  pageInfo: PageInfo!
  edges: [WorkspaceEdge]
}

type WorkspaceEdge {
  cursor: String!
  node: Workspace!
}

type WorkspaceEditMutations {
  delete: ID
  fieldPatch(input: [EditInput]!): Workspace
  relationAdd(input: StixMetaRelationshipAddInput): StixMetaRelationship
  relationsAdd(input: StixMetaRelationshipsAddInput): Workspace
  relationDelete(toId: String!, relationship_type: String!): Workspace
  relationsDelete(toIds: [String]!, relationship_type: String!): Workspace
  contextPatch(input: EditContext): Workspace
  contextClean: Workspace
}

enum WorkspacesFilter {
  name
  owner
  tag
  type
}

input WorkspacesFiltering {
  key: WorkspacesFilter!
  values: [String]
  operator: String
  filterMode: FilterMode
}

enum WorkspacesOrdering {
  name
  created_at
  ownedBy
}

"""
Defines identifying information about a workstation that perform generic computing capabilities.
"""
type Workstation implements BasicObject & LifecycleObject & CoreObject & Asset & ItAsset {
  """Uniquely identifies this object."""
  id: ID!

  """Identifies the identifier defined by the standard."""
  standard_id: String!

  """Identifies the type of the Object."""
  entity_type: String!

  """Identifies the parent types of this object."""
  parent_types: [String]!
  created: DateTime!
  modified: DateTime!
  labels: [String]
  asset_id: String
  name: String!
  description: String
  locations: [AssetLocation]
  external_references(first: Int): CyioExternalReferenceConnection
  notes(first: Int): CyioNoteConnection
  asset_tag: String
  asset_type: AssetType!
  serial_number: String
  vendor_name: String
  version: String
  release_date: DateTime
  implementation_point: ImplementationPoint!
  operational_status: OperationalStatus!
  cpe_identifier: String
  installation_id: String
  installed_hardware: [ComputingDeviceAsset!]!
  installed_operating_system: OperatingSystemAsset!
  model: String
  motherboard_id: String
  baseline_configuration_name: String
  function: String
  bios_id: String
  connected_to_network: NetworkAsset
  default_gateway: String
  fqdn: String
  hostname: String
  netbios_name: String
  installed_software: [SoftwareAsset!]!
  ip_address: [IpAddress!]!
  mac_address: [MAC!]!
  vlan_id: String
  uri: String
  ports: [PortInfo!]!
  is_publicly_accessible: Boolean
  is_scanned: Boolean
  is_virtual: Boolean
}

type WorkTracking {
  import_expected_number: Int
  import_last_processed: DateTime
  import_processed_number: Int
}

type X509Certificate implements BasicObject & StixObject & StixCoreObject & StixCyberObservable & HashedObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  hashes: [Hash]
  is_self_signed: Boolean
  version: String
  serial_number: String
  signature_algorithm: String
  issuer: String
  subject: String
  subject_public_key_algorithm: String
  subject_public_key_modulus: String
  subject_public_key_exponent: Int
  validity_not_before: DateTime
  validity_not_after: DateTime
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input X509CertificateAddInput {
  hashes: [HashInput]
  is_self_signed: Boolean
  version: String
  serial_number: String
  signature_algorithm: String
  issuer: String
  subject: String
  subject_public_key_algorithm: String
  subject_public_key_modulus: String
  subject_public_key_exponent: Int
  validity_not_before: DateTime
  validity_not_after: DateTime
}

type X509V3ExtensionsType implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  basic_constraints: String
  name_constraints: String
  policy_constraints: String
  key_usage: String
  extended_key_usage: String
  subject_key_identifier: String
  authority_key_identifier: String
  subject_alternative_name: String
  issuer_alternative_name: String
  subject_directory_attributes: String
  crl_distribution_points: String
  inhibit_any_policy: String
  private_key_usage_period_not_before: DateTime
  private_key_usage_period_not_after: DateTime
  certificate_policies: String
  policy_mappings: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input X509V3ExtensionsTypeAddInput {
  basic_constraints: String
  name_constraints: String
  policy_constraints: String
  key_usage: String
  extended_key_usage: String
  subject_key_identifier: String
  authority_key_identifier: String
  subject_alternative_name: String
  issuer_alternative_name: String
  subject_directory_attributes: String
  crl_distribution_points: String
  inhibit_any_policy: String
  private_key_usage_period_not_before: DateTime
  private_key_usage_period_not_after: DateTime
  certificate_policies: String
  policy_mappings: String
}

type XOpenCTICryptocurrencyWallet implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  value: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input XOpenCTICryptocurrencyWalletAddInput {
  value: String
}

type XOpenCTICryptographicKey implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  value: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input XOpenCTICryptographicKeyAddInput {
  value: String
}

type XOpenCTIHostname implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  value: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input XOpenCTIHostnameAddInput {
  value: String
}

type XOpenCTIText implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  value: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input XOpenCTITextAddInput {
  value: String
}

type XOpenCTIUserAgent implements BasicObject & StixObject & StixCoreObject & StixCyberObservable {
  id: ID!
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  x_opencti_stix_ids: [String]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  x_opencti_inferences: [Inference]
  createdBy: Identity
  objectMarking: MarkingDefinitionConnection
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  stixCoreRelationships(first: Int, after: ID, orderBy: StixCoreRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCoreRelationshipsFiltering], filterMode: FilterMode): StixCoreRelationshipConnection
  x_opencti_score: Int
  x_opencti_description: String
  observable_value: String!
  indicators: IndicatorConnection
  stixCyberObservableRelationships(first: Int, after: ID, orderBy: StixCyberObservableRelationshipsOrdering, orderMode: OrderingMode, fromId: String, toId: String, fromTypes: [String], toTypes: [String], relationship_type: String, startTimeStart: DateTime, startTimeStop: DateTime, stopTimeStart: DateTime, stopTimeStop: DateTime, firstSeenStart: DateTime, firstSeenStop: DateTime, lastSeenStart: DateTime, lastSeenStop: DateTime, confidences: [Int], search: String, filters: [StixCyberObservableRelationshipsFiltering], filterMode: FilterMode): StixCyberObservableRelationshipConnection
  value: String
  creator: User
  toStix: String
  editContext: [EditUserContext]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
}

input XOpenCTIUserAgentAddInput {
  value: String
}

