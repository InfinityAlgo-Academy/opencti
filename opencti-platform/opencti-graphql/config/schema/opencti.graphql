### Directives
directive @auth(for: [Capabilities] = [], and: Boolean = false) on OBJECT | FIELD_DEFINITION
directive @constraint(
  # String constraints
  minLength: Int
  maxLength: Int
  startsWith: String
  endsWith: String
  notContains: String
  pattern: String
  format: String

  # Number constraints
  min: Int
  max: Int
  exclusiveMin: Int
  exclusiveMax: Int
  multipleOf: Int
) on INPUT_FIELD_DEFINITION

### Scalar
scalar DateTime
scalar ConstraintString
scalar ConstraintNumber
scalar Upload
enum Status {
  wait
  progress
  partial
  complete
  error
}
enum Capabilities {
  CONNECTORAPI
  KNOWLEDGE
  KNOWLEDGE_KNUPDATE
  KNOWLEDGE_KNUPDATE_KNDELETE
  KNOWLEDGE_KNUPLOAD
  KNOWLEDGE_KNASKIMPORT
  KNOWLEDGE_KNGETEXPORT
  KNOWLEDGE_KNGETEXPORT_KNASKEXPORT
  KNOWLEDGE_KNENRICHMENT
  EXPLORE
  EXPLORE_EXUPDATE
  EXPLORE_EXUPDATE_EXDELETE
  MODULES
  MODULES_MODMANAGE
  SETTINGS
  SETTINGS_SETINFERENCES
  SETTINGS_SETACCESSES
  SETTINGS_SETMARKINGS
}

### Relay
type PageInfo {
  startCursor: String!
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  globalCount: Int!
}
enum OrderingMode {
  asc
  desc
}
enum FilterMode {
  and
  or
}

### Interfaces
####### ENTITIES
interface BasicObject {
  id: ID! # internal_id_key
  entity_type: String!
}
interface InternalObject implements BasicObject {
  id: ID! # internal_id_key
  entity_type: String!
  # InternalObject
  standard_id: String!
}
# Stix Object and sub interfaces
interface StixObject implements BasicObject {
  id: ID!
  entity_type: String!
  # StixObject
  standard_stix_id: String!
  stix_ids: [String]
  name: String!
  description: String
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  editContext: [EditUserContext]
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
}
interface StixMetaObject implements StixObject & BasicObject {
  id: ID!
  entity_type: String!
  standard_stix_id: String!
  stix_ids: [String]
  name: String!
  description: String
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  editContext: [EditUserContext]
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
  # StixMetaObject
}
interface StixCoreObject implements StixObject & BasicObject {
  id: ID!
  entity_type: String!
  standard_stix_id: String!
  stix_ids: [String]
  name: String!
  description: String
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  editContext: [EditUserContext]
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
  # StixCoreObject
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
}
# Stix Domain and sub interfaces
interface StixDomainObject implements StixCoreObject & StixObject & BasicObject {
  id: ID!
  entity_type: String!
  standard_stix_id: String!
  stix_ids: [String]
  name: String!
  description: String
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  editContext: [EditUserContext]
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  # StixDomainObject
  alias: [String]
  confidence: Int
  graph_data: String
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  created: DateTime
  modified: DateTime
}
interface Identity implements StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  entity_type: String!
  standard_stix_id: String!
  stix_ids: [String]
  name: String!
  description: String
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  editContext: [EditUserContext]
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  alias: [String]
  confidence: Int
  graph_data: String
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  created: DateTime
  modified: DateTime
  # Identity
  contact_information: String
}
interface Location implements StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  entity_type: String!
  standard_stix_id: String!
  stix_ids: [String]
  name: String!
  description: String
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  editContext: [EditUserContext]
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  alias: [String]
  confidence: Int
  graph_data: String
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  created: DateTime
  modified: DateTime
  # Location
  latitude: Float
  longitude: Float
  precision: Float
}
interface Container implements StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  entity_type: String!
  standard_stix_id: String!
  stix_ids: [String]
  name: String!
  description: String
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  editContext: [EditUserContext]
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  alias: [String]
  confidence: Int
  graph_data: String
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  created: DateTime
  modified: DateTime
  # Container
  objectRefs(
    first: Int
    after: ID
    orderBy: StixDomainObjectOrdering
    orderMode: OrderingMode
    filters: [StixDomainObjectFiltering]
    filterMode: FilterMode
    search: String
    types: [String]
  ): StixDomainObjectConnection
  observableRefs(
    first: Int
    after: ID
    orderBy: StixCyberObservableOrdering
    orderMode: OrderingMode
    filters: [StixCyberObservableFiltering]
    filterMode: FilterMode
    search: String
    types: [String]
  ): StixCyberObservableConnection
  relationRefs(first: Int, relationType: String, knowledgeLevels: [String]): StixRelationConnection
}
# Stix cyber observable and sub interfaces
interface StixCyberObservable implements StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  name: String!
  observable_value: String!
  observable_date: DateTime
  first_seen: DateTime
  last_seen: DateTime
  description: String
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  indicators: IndicatorConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  jobs(first: Int): [Work]
  connectors(onlyAlive: Boolean): [Connector]
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
}
interface HashedObservable implements StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  name: String!
  observable_value: String!
  observable_date: DateTime
  first_seen: DateTime
  last_seen: DateTime
  description: String
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  indicators: IndicatorConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  jobs(first: Int): [Work]
  connectors(onlyAlive: Boolean): [Connector]
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
  # HashedObservable
  md5: String
  sha1: String
}
union StixObjectOrRelation = StixObject | StixRelationship

####### RELATIONS
interface BasicRelationship {
  id: ID! # internal_id_key
  entity_type: String!
  fromRole: String
  toRole: String
}
type InternalRelationship implements BasicRelationship {
  id: ID! # internal_id_key
  entity_type: String!
  fromRole: String
  toRole: String
  # InternalRelationship
  standard_id: String!
  from: InternalObject
  to: InternalObject
}
interface StixRelationship implements BasicRelationship {
  id: ID! # internal_id_key
  entity_type: String!
  fromRole: String
  toRole: String
  # StixRelationship
  standard_stix_id: String!
  stix_ids: [String]
  from: StixObjectOrRelation
  to: StixObjectOrRelation
  inferred: Boolean
}
type StixKnowledgeRelationship implements StixRelationship & BasicRelationship {
  id: ID! # internal_id_key
  entity_type: String!
  fromRole: String
  toRole: String
  standard_stix_id: String!
  stix_ids: [String]
  from: StixObjectOrRelation
  to: StixObjectOrRelation
  inferred: Boolean
  # StixKnowledgeRelationship
  name: String!
  first_seen: DateTime
  last_seen: DateTime
  weight: Int
  confidence: Int
  description: String
  created: DateTime!
  modified: DateTime!
  graph_data: String
  role_played: String
  editContext: [EditUserContext]
  killChainPhases: KillChainPhaseConnection
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  inferences: StixRelationConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
  creator: User
  createdByRef: Identity
}
interface StixSightingRelationship implements StixRelationship & BasicRelationship {
  id: ID! # internal_id_key
  entity_type: String!
  fromRole: String
  toRole: String
  standard_stix_id: String!
  stix_ids: [String]
  from: StixObjectOrRelation
  to: StixObjectOrRelation
  inferred: Boolean
  # StixSightingRelationship
  # name: String!
  # confidence: Int
  # description: String
  # first_seen: DateTime
  # last_seen: DateTime
  # number: Int
  # created: DateTime!
  # modified: DateTime!
  # graph_data: String
  # editContext: [EditUserContext]
  # createdByRef: Identity
  # killChainPhases: KillChainPhaseConnection
  # markingDefinitions: MarkingDefinitionConnection
  # externalReferences(first: Int): ExternalReferenceConnection
  # labels: LabelConnection
  # reports: ReportConnection
  # notes: NoteConnection
  # from: StixObject
  # fromRole: String
  # to: StixObject
  # toRole: String
  # inferences: StixRelationConnection
  # creator: User
  # toStix: String
  # created_at: DateTime!
  # updated_at: DateTime!
}
type StixSightingPositiveRelationship implements StixSightingRelationship & StixRelationship & BasicRelationship {
  id: ID! # internal_id_key
  entity_type: String!
  fromRole: String
  toRole: String
  standard_stix_id: String!
  stix_ids: [String]
  from: StixObjectOrRelation
  to: StixObjectOrRelation
  inferred: Boolean
  # StixSightingPositiveRelationship
}
type StixSightingNegativeRelationship implements StixSightingRelationship & StixRelationship & BasicRelationship {
  id: ID! # internal_id_key
  entity_type: String!
  fromRole: String
  toRole: String
  standard_stix_id: String!
  stix_ids: [String]
  from: StixObjectOrRelation
  to: StixObjectOrRelation
  inferred: Boolean
  # StixSightingNegativeRelationship
}
type StixMetaRelationship implements StixRelationship & BasicRelationship {
  id: ID! # internal_id_key
  entity_type: String!
  fromRole: String
  toRole: String
  standard_stix_id: String!
  stix_ids: [String]
  from: StixObjectOrRelation
  to: StixObjectOrRelation
  inferred: Boolean
}

### Edit
input EntityRelation {
  entityType: String
  relationType: String
  relationRole: String
}
input EditInput {
  id: ID # ID of the instance in edition
  key: String! # Field name to change
  value: [String]! # Values to apply
}
input EditContext {
  focusOn: String # Field name
}
type EditUserContext {
  name: String!
  focusOn: String # Field name
}

### Info
type DependencyVersion {
  name: String!
  version: String!
}
type AppInfo {
  version: String!
  dependencies: [DependencyVersion!]!
}

### Stats
type AckDetails {
  rate: Float
}
type MessagesStats {
  ack: Int
  ack_details: AckDetails
}
type QueueArguments {
  config: String
}
type QueueMetrics {
  name: String
  arguments: QueueArguments
  messages: Int
  messages_ready: Int
  messages_unacknowledged: Int
  consumers: Int
  idle_since: DateTime
  message_stats: MessagesStats
}
type QueueTotals {
  messages: Int
  messages_ready: Int
  messages_unacknowledged: Int
}
type ObjectTotals {
  channels: Int
  consumers: Int
  queues: Int
}
type OverviewMetrics {
  node: String
  object_totals: ObjectTotals
  queue_totals: QueueTotals
  message_stats: MessagesStats
}
type RabbitMQMetrics {
  consumers: Int
  queues: [QueueMetrics]
  overview: OverviewMetrics
}

enum StatsOperation {
  count
  sum
}
type TimeSeries {
  date: DateTime!
  value: Int!
}
type Distribution {
  label: String!
  value: Int
}
type Number {
  total: Int!
  count: Int!
}

### Settings
type Provider {
  name: String
  type: String
  provider: String
}
type Settings {
  id: ID!
  platform_title: String
  platform_email: String
  platform_url: String
  platform_providers: [Provider]
  platform_language: String
  platform_demo: Boolean
  platform_parameters: String
  editContext: [EditUserContext]
  created_at: DateTime
  updated_at: DateTime
}
input SettingsAddInput {
  platform_title: String
  platform_email: String
  platform_url: String
  platform_language: String
}

## Logs
type LogsWorkerConfig {
  elasticsearch_url: String!
  elasticsearch_index: String!
  rabbitmq_url: String!
}
enum LogsOrdering {
  event_type
  event_date
}
enum LogsFilter {
  event_type
  entity_id
  connection_id
}
type LogConnection {
  pageInfo: PageInfo!
  edges: [LogEdge]
}
input LogsFiltering {
  key: LogsFilter!
  values: [String]
  operator: String
}
type LogEdge {
  cursor: String!
  node: Log!
}
type Log {
  id: ID!
  event_type: String!
  event_date: DateTime!
  event_user: User
  event_data: String!
  event_message: String!
}

### Inferences
type Inference {
  id: ID!
  name: String!
  description: String!
  rule: String!
  enabled: Boolean
}

### Attribute
enum AttributesOrdering {
  value
}
type AttributeConnection {
  pageInfo: PageInfo!
  edges: [AttributeEdge]
}
type AttributeEdge {
  cursor: String!
  node: Attribute!
}
type Attribute {
  id: ID!
  type: String!
  value: String!
}
input AttributeAddInput {
  type: String!
  value: String!
  clientMutationId: String
}
input AttributeEditInput {
  type: String!
  value: String!
  newValue: String!
}

### SubType
enum SubTypesOrdering {
  label
}
type SubTypeConnection {
  pageInfo: PageInfo!
  edges: [SubTypeEdge]
}
type SubTypeEdge {
  cursor: String!
  node: SubType!
}
type SubType {
  id: ID!
  label: String!
}

### Labels
enum LabelsOrdering {
  value
  color
  created_at
  updated_at
}
enum LabelsFilter {
  value
  labelsFor
}
type LabelConnection {
  pageInfo: PageInfo!
  edges: [LabelEdge]
}
input LabelsFiltering {
  key: LabelsFilter!
  values: [String]
  operator: String
}
type LabelEdge {
  cursor: String!
  node: Label!
}
type Label {
  id: ID!
  value: String!
  color: String!
  editContext: [EditUserContext]
  created_at: DateTime!
  updated_at: DateTime!
}
input LabelAddInput {
  internal_id_key: String
  value: String!
  color: String!
  clientMutationId: String
}

### Connectors
enum ConnectorType {
  EXTERNAL_IMPORT
  INTERNAL_IMPORT_FILE
  INTERNAL_ENRICHMENT
  INTERNAL_EXPORT_FILE
}
input RegisterConnectorInput {
  id: ID!
  name: String!
  type: ConnectorType!
  scope: [String!]
}
type ConnectorConfig {
  uri: String!
  listen: String!
  listen_exchange: String!
  push: String!
  push_exchange: String!
}
type Connector {
  id: ID!
  internal_id_key: ID!
  name: String!
  active: Boolean
  connector_type: String
  connector_state: String
  connector_scope: [String!]
  updated_at: DateTime
  created_at: DateTime
  config: ConnectorConfig
}

### Files
type Job {
  id: ID!
  internal_id_key: ID!
  messages: [String]
  job_status: Status!
  created_at: DateTime!
  updated_at: DateTime!
}
type Work {
  id: ID!
  internal_id_key: ID!
  jobs: [Job]
  status: Status!
  connector: Connector
  work_type: String!
  created_at: DateTime!
}
type WorkEdge {
  cursor: String!
  node: Work!
}
type WorkConnection {
  pageInfo: PageInfo!
  edges: [WorkEdge]
}
enum FileCategory {
  import
  export
}
type FileMetadata {
  category: FileCategory!
  encoding: String
  mimetype: String
  listargs: String
}
type File {
  id: ID!
  name: String
  size: Int
  lastModified: DateTime
  lastModifiedSinceMin: Int
  metaData: FileMetadata
  uploadStatus: Status!
  works: [Work]
}
type FileEdge {
  cursor: String!
  node: File!
}
type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]
}

enum StixDomainObjectOrdering {
  name
  entity_type
  created
  modified
  created_at
  updated_at
  labels
  markingDefinitions
  published
  object_status
  valid_from
  valid_to
  indicator_pattern
}
enum StixDomainObjectFilter {
  main_observable_type
  pattern_type
  entity_type
  name
  alias
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
  hasExternalReference
  knowledgeContains
  observablesContains
  indicates
  confidence
}
input StixDomainObjectFiltering {
  key: StixDomainObjectFilter!
  values: [String]
  operator: String
}
type StixDomainObjectConnection {
  pageInfo: PageInfo!
  edges: [StixDomainObjectEdge]
}
type StixDomainObjectEdge {
  cursor: String!
  node: StixDomainObject!
}
input StixDomainObjectAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String
  confidence: Int
  alias: [String]
  type: String!
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### STIX obseravables
enum StixCyberObservableOrdering {
  name
  entity_type
  observable_value
  value
  created_at
  updated_at
  labels
  markingDefinitions
}
enum StixCyberObservableFilter {
  entity_type
  observable_value
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
  relatedTo
  observablesContained
}
input StixCyberObservableFiltering {
  key: StixCyberObservableFilter!
  values: [String]
  operator: String
}
type StixCyberObservableConnection {
  pageInfo: PageInfo!
  edges: [StixCyberObservableEdge]
}
type StixCyberObservableEdge {
  cursor: String!
  node: StixCyberObservable!
}
input StixCyberObservableAddInput {
  internal_id_key: String
  stix_id: String
  type: String!
  observable_value: String!
  observable_date: DateTime
  description: String
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  clientMutationId: String
  createIndicator: Boolean
}

### STIX relations
enum StixRelationsOrdering {
  entity_type
  confidence
  weight
  first_seen
  last_seen
  created
  modified
  created_at
  updated_at
  toName
  toValidFrom
  toValidUntil
  toPatternType
  toCreatedAt
}
enum StixRelationsFilter {
  created
  modified
  created_at
  confidence
  createdBy
  markingDefinitions
  labels
  toPatternType
  toMainObservableType
}
input StixRelationsFiltering {
  key: StixRelationsFilter!
  values: [String]
  operator: String
}
type StixRelationConnection {
  pageInfo: PageInfo!
  edges: [StixRelationEdge]
}
type StixRelationEdge {
  cursor: String!
  node: StixKnowledgeRelationship!
}

input StixRelationAddInput {
  internal_id_key: String
  stix_id: String
  fromId: String!
  fromRole: String!
  toId: String!
  toRole: String!
  relationship_type: String!
  role_played: String
  weight: Int
  confidence: Int
  description: String
  first_seen: DateTime
  last_seen: DateTime
  createdByRef: String
  markingDefinitions: [String]
  killChainPhases: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### STIX sightinhs
enum StixSightingsOrdering {
  confidence
  number
  negative
  first_seen
  last_seen
  created
  modified
  created_at
  updated_at
  toName
  toValidFrom
  toValidUntil
  toPatternType
  toCreatedAt
}
enum StixSightingsFilter {
  negative
  created
  modified
  created_at
  confidence
  createdBy
  markingDefinitions
  labels
  toPatternType
  toMainObservableType
}
input StixSightingsFiltering {
  key: StixSightingsFilter!
  values: [String]
  operator: String
}
type StixSightingConnection {
  pageInfo: PageInfo!
  edges: [StixSightingEdge]
}
type StixSightingEdge {
  cursor: String!
  node: StixSightingRelationship!
}
input StixSightingAddInput {
  internal_id_key: String
  stix_id: String
  fromId: String!
  toId: String
  confidence: Int!
  number: Int!
  negative: Boolean
  description: String
  first_seen: DateTime
  last_seen: DateTime
  createdByRef: String
  markingDefinitions: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### STIX observable relations
## enum StixCyberObservableRelationsOrdering {
##   entity_type
##   weight
##   confidence
##   first_seen
##   last_seen
##   created
##   modified
##   created_at
##   updated_at
## }
## type StixCyberObservableRelationConnection {
##   pageInfo: PageInfo!
##   edges: [StixCyberObservableRelationEdge]
## }
## type StixCyberObservableRelationEdge {
##   cursor: String!
##   node: StixCyberObservableRelation!
## }
## type StixCyberObservableRelation implements BasicObject & StixObject {
##   id: ID!
##   stix_ids: [String]
##   entity_type: String!
##   name: String!
##   inferred: Boolean
##   weight: Int
##   description: String
##   first_seen: DateTime
##   last_seen: DateTime
##   created: DateTime!
##   modified: DateTime!
##   graph_data: String
##   role_played: String
##   editContext: [EditUserContext]
##   createdByRef: Identity
##   markingDefinitions: MarkingDefinitionConnection
##   externalReferences(first: Int): ExternalReferenceConnection
##   labels: LabelConnection
##   reports: ReportConnection
##   notes: NoteConnection
##   from: StixCyberObservable
##   fromRole: String
##   to: StixCyberObservable
##   toRole: String
##   inferences: StixCyberObservableRelationConnection
##   stixRelations(
##     first: Int
##     after: ID
##     orderBy: StixRelationsOrdering
##     orderMode: OrderingMode
##     fromId: String
##     inferred: Boolean
##     toId: String
##     fromTypes: [String]
##     toTypes: [String]
##     relationType: String
##     firstSeenStart: DateTime
##     firstSeenStop: DateTime
##     lastSeenStart: DateTime
##     lastSeenStop: DateTime
##     weights: [Int]
##     search: String
##     filters: [StixRelationsFiltering]
##     filterMode: FilterMode
##     forceNatural: Boolean
##   ): StixRelationConnection
##   creator: User
##   toStix: String
##   created_at: DateTime!
##   updated_at: DateTime!
## }

### Workspace
enum WorkspacesOrdering {
  name
  created_at
  updated_at
}
enum WorkspacesFilter {
  workspace_type
}
input WorkspacesFiltering {
  key: WorkspacesFilter!
  values: [String]
  operator: String
}
type WorkspaceConnection {
  pageInfo: PageInfo!
  edges: [WorkspaceEdge]
}
type WorkspaceEdge {
  cursor: String!
  node: Workspace!
}
type Workspace implements InternalObject & BasicObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  workspace_type: String!
  name: String!
  description: String
  graph_data: String
  workspace_data: String
  editContext: [EditUserContext]
  ownedBy: User
  markingDefinitions: MarkingDefinitionConnection
  labels: LabelConnection
  objectRefs: StixDomainObjectConnection
  created_at: DateTime!
  updated_at: DateTime!
}
input WorkspaceAddInput {
  name: String!
  workspace_type: String!
  internal_id_key: String
  description: String
  markingDefinitions: [String]
  clientMutationId: String
}

### Identities
enum IdentitiesOrdering {
  name
  created_at
  updated_at
  labels
}
enum IdentitiesFilter {
  name
  alias
  entity_type
  confidence
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
}
input IdentitiesFiltering {
  key: IdentitiesFilter!
  values: [String]
  operator: String
}
type IdentityConnection {
  pageInfo: PageInfo!
  edges: [IdentityEdge]
}
type IdentityEdge {
  cursor: String!
  node: Identity!
}


enum IdentityType {
  Sector
  Organization
  User
  Region
  Country
  City
}

input IdentityAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String
  contact_information: String
  confidence: Int
  alias: [String]
  type: IdentityType!
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### User
enum UsersOrdering {
  name
  confidence
  email
  firstname
  lastname
  created
  modified
  labels
  markingDefinitions
}
enum UsersFilter {
  name
  confidence
  alias
  entity_type
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
}
input UsersFiltering {
  key: UsersFilter!
  values: [String]
  operator: String
}
type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]
}
type UserEdge {
  cursor: String!
  node: User!
}

### Roles
type Role implements BasicObject {
  id: ID!
  entity_type: String!
  name: String!
  default_assignation: Boolean
  description: String
  created_at: DateTime!
  updated_at: DateTime!
  capabilities: [Capability]
  editContext: [EditUserContext]
}
enum RolesOrdering {
  name
  created_at
  updated_at
}
type RoleEdge {
  cursor: String!
  node: Role!
}
type RoleConnection {
  pageInfo: PageInfo!
  edges: [RoleEdge]
}

type Capability implements BasicObject {
  id: ID!
  entity_type: String!
  name: String!
  description: String
  created_at: DateTime!
  updated_at: DateTime!
}
type CapabilityEdge {
  cursor: String!
  node: Capability!
}
type CapabilityConnection {
  pageInfo: PageInfo!
  edges: [CapabilityEdge]
}
input RoleAddInput {
  name: String!
  description: String
  clientMutationId: String
}

type User implements BasicObject & InternalObject {
  id: ID!
  standard_id: String!
  entity_type: String!
  name: String!
  alias: [String]
  description: String
  contact_information: String
  confidence: Int
  firstname: String
  lastname: String
  user_email: String
  language: String
  external: Boolean
  roles: [Role]!
  capabilities: [Capability]!
  token: String
  groups: GroupConnection
}
input UserAddInput {
  internal_id_key: String
  stix_id: String
  user_email: String @constraint(minLength: 5, format: "email")
  name: String! @constraint(minLength: 3)
  description: String
  contact_information: String
  confidence: Int
  password: String
  firstname: String
  lastname: String
  language: String
  roles: [ID]
  alias: [String]
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  created: DateTime
  modified: DateTime
}
input PersonAddInput {
  internal_id_key: String
  stix_id: String
  name: String! @constraint(minLength: 3)
  description: String
  contact_information: String
  confidence: Int
  firstname: String
  lastname: String
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
}
input UserLoginInput {
  email: String!
  password: String!
}

### Organizations
enum OrganizationsOrdering {
  name
  description
  confidence
  organization_class
  created
  modified
  created_at
  updated_at
  reliability
  labels
  markingDefinitions
}
enum OrganizationsFilter {
  name
  confidence
  reliability
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
}
input OrganizationsFiltering {
  key: OrganizationsFilter!
  values: [String]
  operator: String
}
type OrganizationConnection {
  pageInfo: PageInfo!
  edges: [OrganizationEdge]
}
type OrganizationEdge {
  cursor: String!
  node: Organization!
}
enum OrganizationReliability {
  A
  B
  C
  D
  E
  F
}
type Organization implements Identity & StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  name: String!
  stix_label: [String]
  alias: [String]
  description: String
  contact_information: String
  confidence: Int
  organization_class: String
  reliability: OrganizationReliability
  created: DateTime
  modified: DateTime
  revoked: Boolean
  graph_data: String
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  sectors: SectorConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
}
input OrganizationAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String
  contact_information: String
  confidence: Int
  organization_class: String
  reliability: OrganizationReliability
  alias: [String]
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### Sectors
enum SectorsOrdering {
  name
  description
  confidence
  created
  modified
  created_at
  updated_at
  labels
  markingDefinitions
}
enum SectorsFilter {
  name
  confidence
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
  gatheredBy
}
input SectorsFiltering {
  key: SectorsFilter!
  values: [String]
  operator: String
}
type SectorConnection {
  pageInfo: PageInfo!
  edges: [SectorEdge]
}
type SectorEdge {
  cursor: String!
  node: Sector!
}
type Sector implements Identity & StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  name: String!
  stix_label: [String]
  alias: [String]
  description: String
  contact_information: String
  confidence: Int
  created: DateTime
  modified: DateTime
  revoked: Boolean
  graph_data: String
  parentSectors: SectorConnection
  subSectors: SectorConnection
  isSubSector: Boolean
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
}
input SectorAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String
  contact_information: String
  confidence: Int
  alias: [String]
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### Cities
enum CitiesOrdering {
  name
  description
  created
  modified
  created_at
  updated_at
  labels
  markingDefinitions
}
enum CitiesFilter {
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
}
input CitiesFiltering {
  key: CitiesFilter!
  values: [String]
  operator: String
}
type CityConnection {
  pageInfo: PageInfo!
  edges: [CityEdge]
}
type CityEdge {
  cursor: String!
  node: City!
}
type City implements Location & StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  entity_type: String!
  standard_stix_id: String!
  stix_ids: [String]
  name: String!
  description: String
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  editContext: [EditUserContext]
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  alias: [String]
  confidence: Int
  graph_data: String
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  created: DateTime
  modified: DateTime
  # Location
  latitude: Float
  longitude: Float
  precision: Float
}
input CityAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String
  contact_information: String
  confidence: Int
  alias: [String]
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### Countries
enum CountriesOrdering {
  name
  description
  created
  modified
  created_at
  updated_at
  labels
  markingDefinitions
}
enum CountriesFilter {
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
}
input CountriesFiltering {
  key: CountriesFilter!
  values: [String]
  operator: String
}
type CountryConnection {
  pageInfo: PageInfo!
  edges: [CountryEdge]
}
type CountryEdge {
  cursor: String!
  node: Country!
}
type Country implements Location & StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  entity_type: String!
  standard_stix_id: String!
  stix_ids: [String]
  name: String!
  description: String
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  editContext: [EditUserContext]
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  alias: [String]
  confidence: Int
  graph_data: String
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  created: DateTime
  modified: DateTime
  # Location
  latitude: Float
  longitude: Float
  precision: Float
}
input CountryAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String
  contact_information: String
  confidence: Int
  alias: [String]
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### Regions
enum RegionsOrdering {
  name
  description
  created
  modified
  created_at
  updated_at
  labels
  markingDefinitions
}
enum RegionsFilter {
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
}
input RegionsFiltering {
  key: RegionsFilter!
  values: [String]
  operator: String
}
type RegionConnection {
  pageInfo: PageInfo!
  edges: [RegionEdge]
}
type RegionEdge {
  cursor: String!
  node: Region!
}
type Region implements Location & StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  entity_type: String!
  standard_stix_id: String!
  stix_ids: [String]
  name: String!
  description: String
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  editContext: [EditUserContext]
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  alias: [String]
  confidence: Int
  graph_data: String
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  created: DateTime
  modified: DateTime
  # Location
  latitude: Float
  longitude: Float
  precision: Float
}
input RegionAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String
  contact_information: String
  confidence: Int
  alias: [String]
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### Group
enum GroupsOrdering {
  name
  created_at
  updated_at
}
type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]
}
type GroupEdge {
  cursor: String!
  node: Group!
}
type Group implements InternalObject & BasicObject {
  id: ID!
  entity_type: String!
  standard_id: String!
  # Group
  name: String!
  description: String
  editContext: [EditUserContext]
  members: UserConnection
  permissions: MarkingDefinitionConnection
  created_at: DateTime!
  updated_at: DateTime!
}
input GroupAddInput {
  internal_id_key: String
  name: String!
  description: String
  markingDefinitions: [String]
  clientMutationId: String
}

### Marking definitions
enum MarkingDefinitionsOrdering {
  definition_type
  definition
  level
  color
  created
  modified
  created_at
  updated_at
}
enum MarkingDefinitionsFilter {
  definition
  definition_type
  markedBy
}
input MarkingDefinitionsFiltering {
  key: MarkingDefinitionsFilter!
  values: [String]
  operator: String
}
type MarkingDefinitionConnection {
  pageInfo: PageInfo!
  edges: [MarkingDefinitionEdge]
}
type MarkingDefinitionEdge {
  cursor: String!
  node: MarkingDefinition!
}
type MarkingDefinition implements BasicObject {
  id: ID!
  stix_ids: [String]
  entity_type: String!
  definition_type: String!
  definition: String!
  level: Int
  color: String
  created: DateTime
  modified: DateTime
  revoked: Boolean
  editContext: [EditUserContext]
  created_at: DateTime!
  updated_at: DateTime!
  toStix: String
}
input MarkingDefinitionAddInput {
  internal_id_key: String
  stix_id: String
  definition_type: String!
  definition: String!
  level: Int!
  color: String
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### ExternalReferences
enum ExternalReferencesOrdering {
  source_name
  url
  hash
  external_id
  created
  modified
  created_at
  updated_at
}
enum ExternalReferencesFilter {
  url
  usedBy
}
input ExternalReferencesFiltering {
  key: ExternalReferencesFilter!
  values: [String]
  operator: String
}
type ExternalReferenceConnection {
  pageInfo: PageInfo!
  edges: [ExternalReferenceEdge]
}
type ExternalReferenceEdge {
  cursor: String!
  node: ExternalReference!
}
type ExternalReference implements BasicObject {
  id: ID!
  entity_type: String!
  source_name: String!
  description: String
  url: String
  hash: String
  external_id: String
  created: DateTime
  modified: DateTime
  revoked: Boolean
  editContext: [EditUserContext]
  created_at: DateTime!
  updated_at: DateTime!
}
input ExternalReferenceAddInput {
  internal_id_key: String
  stix_id: String
  source_name: String!
  description: String
  url: String
  hash: String
  external_id: String
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### KillChain Phases
enum KillChainPhasesOrdering {
  phase_order
  kill_chain_name
  phase_name
  created_at
  updated_at
}
enum KillChainPhasesFilter {
  kill_chain_name
  phase_name
}
input KillChainPhasesFiltering {
  key: KillChainPhasesFilter!
  values: [String]
  operator: String
}
type KillChainPhaseConnection {
  pageInfo: PageInfo!
  edges: [KillChainPhaseEdge]
}
type KillChainPhaseEdge {
  cursor: String!
  node: KillChainPhase!
}
type KillChainPhase implements BasicObject {
  id: ID!
  entity_type: String!
  kill_chain_name: String!
  phase_name: String!
  phase_order: Int
  created: DateTime
  modified: DateTime
  revoked: Boolean
  editContext: [EditUserContext]
  markingDefinitions: MarkingDefinitionConnection
  created_at: DateTime!
  updated_at: DateTime!
}
input KillChainPhaseAddInput {
  internal_id_key: String
  stix_id: String
  kill_chain_name: String!
  phase_name: String!
  phase_order: Int!
  markingDefinitions: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### AttackPattern
enum AttackPatternsOrdering {
  external_id
  name
  created
  modified
  created_at
  updated_at
  labels
  killChainPhases
  markingDefinitions
}
enum AttackPatternsFilter {
  external_id
  name
  alias
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
  mitigateBy
}
input AttackPatternsFiltering {
  key: AttackPatternsFilter!
  values: [String]
  operator: String
}
type AttackPatternConnection {
  pageInfo: PageInfo!
  edges: [AttackPatternEdge]
}
type AttackPatternEdge {
  cursor: String!
  node: AttackPattern!
}
type AttackPattern implements StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  name: String!
  stix_label: [String]
  alias: [String]
  description: String
  confidence: Int
  platform: [String]
  required_permission: [String]
  external_id: String
  created: DateTime
  modified: DateTime
  revoked: Boolean
  graph_data: String
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  labels: LabelConnection
  killChainPhases: KillChainPhaseConnection
  reports: ReportConnection
  notes: NoteConnection
  coursesOfAction: CourseOfActionConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
}
input AttackPatternAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String!
  confidence: Int
  platform: [String]
  required_permission: [String]
  external_id: String
  alias: [String]
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  killChainPhases: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### CourseOfAction
enum CoursesOfActionOrdering {
  name
  created
  modified
  created_at
  updated_at
  labels
  markingDefinitions
}
enum CoursesOfActionFilter {
  name
  alias
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
  mitigateBy
}
input CoursesOfActionFiltering {
  key: CoursesOfActionFilter!
  values: [String]
  operator: String
}
type CourseOfActionConnection {
  pageInfo: PageInfo!
  edges: [CourseOfActionEdge]
}
type CourseOfActionEdge {
  cursor: String!
  node: CourseOfAction!
}
type CourseOfAction implements StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  name: String!
  stix_label: [String]
  alias: [String]
  description: String
  confidence: Int
  created: DateTime
  modified: DateTime
  revoked: Boolean
  graph_data: String
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  attackPatterns: AttackPatternConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
}
input CourseOfActionAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String!
  confidence: Int
  alias: [String]
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### Threat Actors
enum ThreatActorsOrdering {
  name
  created
  modified
  created_at
  updated_at
  labels
  markingDefinitions
}
enum ThreatActorsFilter {
  name
  alias
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
}
input ThreatActorsFiltering {
  key: ThreatActorsFilter!
  values: [String]
  operator: String
}
type ThreatActorConnection {
  pageInfo: PageInfo!
  edges: [ThreatActorEdge]
}
type ThreatActorEdge {
  cursor: String!
  node: ThreatActor!
}
type ThreatActor implements StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  name: String!
  description: String
  contact_information: String
  confidence: Int
  first_seen: DateTime
  last_seen: DateTime
  stix_label: [String]
  alias: [String]
  stix_role: String
  goal: String
  sophistication: String
  resource_level: String
  primary_motivation: String
  secondary_motivation: String
  personal_motivation: String
  created: DateTime
  modified: DateTime
  revoked: Boolean
  graph_data: String
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
}
input ThreatActorAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String!
  confidence: Int
  first_seen: DateTime
  last_seen: DateTime
  goal: String
  sophistication: String
  resource_level: String
  primary_motivation: String
  secondary_motivation: String
  personal_motivation: String
  alias: [String]
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### IntrusionSets
enum IntrusionSetsOrdering {
  name
  created
  modified
  created_at
  updated_at
  labels
  markingDefinitions
}
enum IntrusionSetsFilter {
  name
  alias
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
}
input IntrusionSetsFiltering {
  key: IntrusionSetsFilter!
  values: [String]
  operator: String
}
type IntrusionSetConnection {
  pageInfo: PageInfo!
  edges: [IntrusionSetEdge]
}
type IntrusionSetEdge {
  cursor: String!
  node: IntrusionSet!
}
type IntrusionSet implements StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  name: String!
  stix_label: [String]
  alias: [String]
  description: String
  confidence: Int
  first_seen: DateTime
  last_seen: DateTime
  goal: String
  sophistication: String
  resource_level: String
  primary_motivation: String
  secondary_motivation: String
  created: DateTime
  modified: DateTime
  revoked: Boolean
  graph_data: String
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
}
input IntrusionSetAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String!
  confidence: Int
  first_seen: DateTime
  last_seen: DateTime
  goal: String
  sophistication: String
  resource_level: String
  primary_motivation: String
  secondary_motivation: String
  personal_motivation: String
  alias: [String]
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### Campaign
enum CampaignsOrdering {
  name
  first_seen
  last_seen
  created
  modified
  created_at
  updated_at
  labels
  markingDefinitions
}
enum CampaignsFilter {
  name
  alias
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
}
input CampaignsFiltering {
  key: CampaignsFilter!
  values: [String]
  operator: String
}
type CampaignConnection {
  pageInfo: PageInfo!
  edges: [CampaignEdge]
}
type CampaignEdge {
  cursor: String!
  node: Campaign!
}
type Campaign implements StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  name: String!
  stix_label: [String]
  alias: [String]
  description: String
  confidence: Int
  first_seen: DateTime
  last_seen: DateTime
  objective: String
  created: DateTime
  modified: DateTime
  revoked: Boolean
  graph_data: String
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
}
input CampaignAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String!
  confidence: Int
  first_seen: DateTime
  last_seen: DateTime
  objective: String
  alias: [String]
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### Incident
enum IncidentsOrdering {
  name
  first_seen
  last_seen
  created
  modified
  created_at
  updated_at
  labels
  markingDefinitions
}
enum IncidentsFilter {
  name
  alias
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
}
input IncidentsFiltering {
  key: IncidentsFilter!
  values: [String]
  operator: String
}
type IncidentConnection {
  pageInfo: PageInfo!
  edges: [IncidentEdge]
}
type IncidentEdge {
  cursor: String!
  node: Incident!
}
type Incident implements StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  name: String!
  stix_label: [String]
  alias: [String]
  description: String
  confidence: Int
  first_seen: DateTime
  last_seen: DateTime
  objective: String
  created: DateTime
  modified: DateTime
  revoked: Boolean
  graph_data: String
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  observableRefs(first: Int): StixCyberObservableConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
}
input IncidentAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String!
  confidence: Int
  objective: String
  first_seen: DateTime
  last_seen: DateTime
  alias: [String]
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### Malware
enum MalwaresOrdering {
  name
  created
  modified
  created_at
  updated_at
  labels
  markingDefinitions
}
enum MalwaresFilter {
  name
  alias
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
  is_family
}
input MalwaresFiltering {
  key: MalwaresFilter!
  values: [String]
  operator: String
}
type MalwareConnection {
  pageInfo: PageInfo!
  edges: [MalwareEdge]
}
type MalwareEdge {
  cursor: String!
  node: Malware!
}
type Malware implements StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  name: String!
  stix_label: [String]
  alias: [String]
  description: String
  is_family: Boolean
  confidence: Int
  created: DateTime
  modified: DateTime
  revoked: Boolean
  graph_data: String
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  labels: LabelConnection
  killChainPhases: KillChainPhaseConnection
  reports: ReportConnection
  notes: NoteConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
}
input MalwareAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String!
  is_family: Boolean
  confidence: Int
  alias: [String]
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  killChainPhases: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### Tool
enum ToolsOrdering {
  name
  created
  modified
  created_at
  updated_at
  labels
  markingDefinitions
}
enum ToolsFilter {
  name
  alias
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
}
input ToolsFiltering {
  key: ToolsFilter!
  values: [String]
  operator: String
}
type ToolConnection {
  pageInfo: PageInfo!
  edges: [ToolEdge]
}
type ToolEdge {
  cursor: String!
  node: Tool!
}
type Tool implements StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  name: String!
  stix_label: [String]
  alias: [String]
  description: String
  confidence: Int
  tool_version: String
  created: DateTime
  modified: DateTime
  revoked: Boolean
  graph_data: String
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  labels: LabelConnection
  killChainPhases: KillChainPhaseConnection
  reports: ReportConnection
  notes: NoteConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
}
input ToolAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String!
  confidence: Int
  tool_version: String
  alias: [String]
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  killChainPhases: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### Vulnerability
enum VulnerabilitiesOrdering {
  name
  base_score
  base_severity
  attack_vector
  created
  modified
  created_at
  updated_at
  labels
  markingDefinitions
}
enum VulnerabilitiesFilter {
  name
  base_score
  base_severity
  attack_vector
  alias
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
}
input VulnerabilitiesFiltering {
  key: VulnerabilitiesFilter!
  values: [String]
  operator: String
}
type VulnerabilityConnection {
  pageInfo: PageInfo!
  edges: [VulnerabilityEdge]
}
type VulnerabilityEdge {
  cursor: String!
  node: Vulnerability!
}
type Vulnerability implements StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  name: String!
  stix_label: [String]
  alias: [String]
  description: String
  confidence: Int
  base_score: Float
  base_severity: String
  attack_vector: String
  integrity_impact: String
  availability_impact: String
  created: DateTime
  modified: DateTime
  revoked: Boolean
  graph_data: String
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  labels: LabelConnection
  reports: ReportConnection
  notes: NoteConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
}
input VulnerabilityAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String!
  confidence: Int
  alias: [String]
  base_score: Float
  base_severity: String
  attack_vector: String
  integrity_impact: String
  availability_impact: String
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### Reports
enum ReportsOrdering {
  name
  created
  modified
  published
  object_status
  created_at
  updated_at
  createdBy
  labels
  markingDefinitions
}
enum ReportsFilter {
  name
  published
  published_day
  created
  created_at
  report_class
  object_status
  labels
  createdBy
  markingDefinitions
  knowledgeContains
  observablesContains
}
input ReportsFiltering {
  key: ReportsFilter!
  values: [String]!
  operator: String
}
type ReportConnection {
  pageInfo: PageInfo!
  edges: [ReportEdge]
}
type ReportEdge {
  cursor: String!
  node: Report!
}
type Report implements Container & StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  name: String!
  stix_label: [String]
  description: String
  confidence: Int
  report_class: String
  alias: [String]
  graph_data: String
  created: DateTime
  modified: DateTime
  published: DateTime
  revoked: Boolean
  object_status: Int
  source_confidence_level: Int
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  reports: ReportConnection
  notes: NoteConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  labels: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
  objectRefs(
    first: Int
    after: ID
    orderBy: StixDomainObjectOrdering
    orderMode: OrderingMode
    filters: [StixDomainObjectFiltering]
    filterMode: FilterMode
    search: String
    types: [String]
  ): StixDomainObjectConnection
  observableRefs(
    first: Int
    after: ID
    orderBy: StixCyberObservableOrdering
    orderMode: OrderingMode
    filters: [StixCyberObservableFiltering]
    filterMode: FilterMode
    search: String
    types: [String]
  ): StixCyberObservableConnection
  relationRefs(first: Int, relationType: String, knowledgeLevels: [String]): StixRelationConnection
}
input ReportAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String
  confidence: Int
  published: DateTime
  report_class: String
  graph_data: String
  object_status: Int
  source_confidence_level: Int
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### Notes
enum NotesOrdering {
  name
  created
  modified
  published
  object_status
  created_at
  updated_at
  createdBy
  labels
  markingDefinitions
}
enum NotesFilter {
  description
  content
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
  knowledgeContains
  observablesContains
}
input NotesFiltering {
  key: NotesFilter!
  values: [String]!
  operator: String
}
type NoteConnection {
  pageInfo: PageInfo!
  edges: [NoteEdge]
}
type NoteEdge {
  cursor: String!
  node: Note!
}
type Note implements Container & StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  name: String!
  stix_label: [String]
  description: String
  confidence: Int
  content: String
  alias: [String]
  graph_data: String
  created: DateTime
  modified: DateTime
  revoked: Boolean
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  reports: ReportConnection
  notes: NoteConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  labels: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  objectRefs(
    first: Int
    after: ID
    orderBy: StixDomainObjectOrdering
    orderMode: OrderingMode
    filters: [StixDomainObjectFiltering]
    filterMode: FilterMode
    search: String
    types: [String]
  ): StixDomainObjectConnection
  observableRefs(
    first: Int
    after: ID
    orderBy: StixCyberObservableOrdering
    orderMode: OrderingMode
    filters: [StixCyberObservableFiltering]
    filterMode: FilterMode
    search: String
    types: [String]
  ): StixCyberObservableConnection
  relationRefs(first: Int, relationType: String, knowledgeLevels: [String]): StixRelationConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
}
input NoteAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String
  confidence: Int
  content: String
  graph_data: String
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  objectRefs: [String]
  observableRefs: [String]
  relationRefs: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### Opinions
enum OpinionsOrdering {
  created
  modified
  created_at
  updated_at
  createdBy
  labels
  markingDefinitions
}
enum OpinionsFilter {
  description
  explanation
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
  knowledgeContains
  observablesContains
}
input OpinionsFiltering {
  key: OpinionsFilter!
  values: [String]!
  operator: String
}
type OpinionConnection {
  pageInfo: PageInfo!
  edges: [OpinionEdge]
}
type OpinionEdge {
  cursor: String!
  node: Opinion!
}
type Opinion implements Container & StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  name: String!
  stix_label: [String]
  description: String
  confidence: Int
  explanation: String
  alias: [String]
  graph_data: String
  created: DateTime
  modified: DateTime
  revoked: Boolean
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  reports: ReportConnection
  notes: NoteConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  labels: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  objectRefs(
    first: Int
    after: ID
    orderBy: StixDomainObjectOrdering
    orderMode: OrderingMode
    filters: [StixDomainObjectFiltering]
    filterMode: FilterMode
    search: String
    types: [String]
  ): StixDomainObjectConnection
  observableRefs(
    first: Int
    after: ID
    orderBy: StixCyberObservableOrdering
    orderMode: OrderingMode
    filters: [StixCyberObservableFiltering]
    filterMode: FilterMode
    search: String
    types: [String]
  ): StixCyberObservableConnection
  relationRefs(first: Int, relationType: String, knowledgeLevels: [String]): StixRelationConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
}
input OpinionAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String!
  confidence: Int
  explanation: String
  graph_data: String
  createdByRef: String
  markingDefinitions: [String]
  labels: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### Indicators
enum IndicatorsOrdering {
  name
  indicator_pattern
  pattern_type
  valid_from
  valid_until
  score
  created
  modified
  created_at
  updated_at
  labels
  killChainPhases
  markingDefinitions
}
enum IndicatorsFilter {
  name
  score
  indicator_pattern
  main_observable_type
  pattern_type
  valid_from
  valid_until
  created
  modified
  created_at
  createdBy
  markingDefinitions
  labels
  observablesContains
  indicates
  detection
}
input IndicatorsFiltering {
  key: IndicatorsFilter!
  values: [String]
  operator: String
}
type IndicatorConnection {
  pageInfo: PageInfo!
  edges: [IndicatorEdge]
}
type IndicatorEdge {
  cursor: String!
  node: Indicator!
}
type Indicator implements StixDomainObject & StixCoreObject & StixObject & BasicObject {
  id: ID!
  standard_stix_id: String!
  stix_ids: [String]
  entity_type: String!
  stix_label: [String]
  alias: [String]
  name: String!
  description: String
  confidence: Int
  indicator_pattern: String!
  pattern_version: String
  indicator_type: [String]
  main_observable_type: String!
  pattern_type: String!
  detection: Boolean
  valid_from: DateTime
  valid_until: DateTime
  score: Int
  created: DateTime
  modified: DateTime
  revoked: Boolean
  graph_data: String
  editContext: [EditUserContext]
  createdByRef: Identity
  markingDefinitions: MarkingDefinitionConnection
  externalReferences(first: Int): ExternalReferenceConnection
  importFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  labels: LabelConnection
  killChainPhases: KillChainPhaseConnection
  reports: ReportConnection
  notes: NoteConnection
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
  ): StixRelationConnection
  creator: User
  toStix: String
  created_at: DateTime!
  updated_at: DateTime!
}
input IndicatorAddInput {
  internal_id_key: String
  stix_id: String
  name: String!
  description: String
  confidence: Int
  indicator_pattern: String!
  pattern_type: String!
  pattern_version: String
  detection: Boolean
  main_observable_type: String!
  valid_from: DateTime
  valid_until: DateTime
  score: Int
  createdByRef: String
  markingDefinitions: [String]
  killChainPhases: [String]
  labels: [String]
  clientMutationId: String
  created: DateTime
  modified: DateTime
}

### Relations
input InternalRelationshipAddInput {
  relationship_type: String! # Will be check by code
  fromRole: String!
  toId: ID!
  toRole: String!
}
input StixKnowledgeRelationAddInput {
  stix_id: String
  relationship_type: String! # Will be check by code
  fromRole: String!
  toIds: [ID]!
  toRole: String!
  first_seen: DateTime
  last_seen: DateTime
  description: String
  weight: Int
}
input StixMetaRelationAddInput {
  relationship_type: String! # Will be check by code
  fromRole: String!
  toIds: [ID]!
  toRole: String!
}

### QUERIES
type Query {
  # Technical
  settings: Settings
  logsWorkerConfig: LogsWorkerConfig @auth(for: [MODULES])
  logs(
    first: Int
    after: ID
    orderBy: LogsOrdering
    orderMode: OrderingMode
    filters: [LogsFiltering]
    filterMode: FilterMode
    search: String
  ): LogConnection @auth(for: [KNOWLEDGE])
  platform_demo: Boolean
  about: AppInfo @auth(for: [SETTINGS])
  inferences: [Inference] @auth(for: [SETTINGS])
  attribute(id: String): Attribute @auth(for: [KNOWLEDGE])
  attributes(
    first: Int
    after: ID
    orderBy: AttributesOrdering
    orderMode: OrderingMode
    type: String
    search: String
  ): AttributeConnection @auth(for: [KNOWLEDGE])
  subTypes(
    first: Int
    after: ID
    orderBy: SubTypesOrdering
    orderMode: OrderingMode
    type: String!
    includeParents: Boolean
    search: String
  ): SubTypeConnection @auth(for: [KNOWLEDGE])
  # Labels
  label(id: String!): Label @auth(for: [KNOWLEDGE])
  labels(
    first: Int
    after: ID
    orderBy: LabelsOrdering
    orderMode: OrderingMode
    filters: [LabelsFiltering]
    filterMode: FilterMode
    search: String
  ): LabelConnection @auth(for: [KNOWLEDGE])
  rabbitMQMetrics(prefix: String): RabbitMQMetrics @auth(for: [MODULES])
  connectors: [Connector] @auth(for: [MODULES])
  connectorsForExport: [Connector] @auth(for: [KNOWLEDGE])
  connectorsForImport: [Connector] @auth(for: [KNOWLEDGE])
  importFiles(first: Int): FileConnection @auth(for: [KNOWLEDGE_KNASKIMPORT])
  # StixEntities
  stixEntity(id: String): StixObject @auth(for: [KNOWLEDGE])
  # StixDomainObject
  StixDomainObject(id: String): StixDomainObject @auth(for: [KNOWLEDGE])
  StixDomainObjects(
    first: Int
    after: ID
    types: [String]
    orderBy: StixDomainObjectOrdering
    orderMode: OrderingMode
    filters: [StixDomainObjectFiltering]
    filterMode: FilterMode
    search: String
  ): StixDomainObjectConnection @auth(for: [KNOWLEDGE])
  duplicateStixDomainObject(
    first: Int
    after: ID
    types: [String]
    orderBy: StixDomainObjectOrdering
    orderMode: OrderingMode
    filters: [StixDomainObjectFiltering]
    filterMode: FilterMode
    search: String
  ): [Distribution] @auth(for: [KNOWLEDGE])
  StixDomainObjectExportFiles(first: Int, type: String!, context: String): FileConnection
    @auth(for: [KNOWLEDGE_KNGETEXPORT])
  StixDomainObjectTimeSeries(
    type: String
    field: String!
    operation: StatsOperation!
    startDate: DateTime!
    endDate: DateTime!
    interval: String!
  ): [TimeSeries] @auth(for: [KNOWLEDGE])
  StixDomainObjectNumber(types: [String], endDate: DateTime): Number @auth(for: [KNOWLEDGE])
  # StixCyberObservable
  StixCyberObservable(id: String!): StixCyberObservable @auth(for: [KNOWLEDGE])
  StixCyberObservables(
    first: Int
    after: ID
    types: [String]
    orderBy: StixCyberObservableOrdering
    orderMode: OrderingMode
    filters: [StixCyberObservableFiltering]
    filterMode: FilterMode
    search: String
    stix: Boolean
  ): StixCyberObservableConnection @auth(for: [KNOWLEDGE])
  StixCyberObservableExportFiles(first: Int, context: String): FileConnection
  StixCyberObservableNumber(types: [String], endDate: DateTime): Number @auth(for: [KNOWLEDGE])
  StixCyberObservableTimeSeries(type: String): [TimeSeries] @auth(for: [KNOWLEDGE])
  StixCyberObservableDistribution(type: String): [Distribution] @auth(for: [KNOWLEDGE])
  # StixRelations
  stixRelation(id: String): StixKnowledgeRelationship @auth(for: [KNOWLEDGE])
  stixRelations(
    first: Int
    after: ID
    orderBy: StixRelationsOrdering
    orderMode: OrderingMode
    fromId: String
    fromRole: String
    inferred: Boolean
    toId: String
    toRole: String
    fromTypes: [String]
    toTypes: [String]
    relationType: String
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    weights: [Int]
    search: String
    filters: [StixRelationsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
    stix: Boolean
  ): StixRelationConnection @auth(for: [KNOWLEDGE])
  stixRelationsTimeSeries(
    fromId: String
    relationType: String
    inferred: Boolean
    field: String!
    operation: StatsOperation!
    startDate: DateTime!
    endDate: DateTime!
    interval: String!
  ): [TimeSeries] @auth(for: [KNOWLEDGE])
  stixRelationsDistribution(
    fromId: String!
    field: String!
    operation: StatsOperation!
    relationType: String
    inferred: Boolean
    toTypes: [String]
    startDate: DateTime
    endDate: DateTime
    limit: Int
    order: String
  ): [Distribution] @auth(for: [KNOWLEDGE])
  stixRelationsNumber(type: String, fromId: String, endDate: DateTime, inferred: Boolean): Number
    @auth(for: [KNOWLEDGE])
  # StixRelations
  stixSighting(id: String): StixSightingRelationship @auth(for: [KNOWLEDGE])
  stixSightings(
    first: Int
    after: ID
    orderBy: StixSightingsOrdering
    orderMode: OrderingMode
    fromId: String
    inferred: Boolean
    toId: String
    fromTypes: [String]
    toTypes: [String]
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    search: String
    filters: [StixSightingsFiltering]
    filterMode: FilterMode
    forceNatural: Boolean
    toStix: Boolean
  ): StixSightingConnection @auth(for: [KNOWLEDGE])
  stixSightingsTimeSeries(
    fromId: String
    inferred: Boolean
    field: String!
    operation: StatsOperation!
    startDate: DateTime!
    endDate: DateTime!
    interval: String!
  ): [TimeSeries] @auth(for: [KNOWLEDGE])
  stixSightingsDistribution(
    fromId: String!
    field: String!
    operation: StatsOperation!
    inferred: Boolean
    toTypes: [String]
    startDate: DateTime
    endDate: DateTime
    limit: Int
    order: String
  ): [Distribution] @auth(for: [KNOWLEDGE])
  stixSightingsNumber(fromId: String, endDate: DateTime, inferred: Boolean): Number
  # Workspaces
  workspace(id: String!): Workspace @auth(for: [EXPLORE])
  workspaces(
    first: Int
    after: ID
    orderBy: WorkspacesOrdering
    orderMode: OrderingMode
    search: String
    filters: [WorkspacesFiltering]
    filterMode: FilterMode
  ): WorkspaceConnection @auth(for: [EXPLORE])
  workspacesNumber(endDate: DateTime): Number @auth(for: [EXPLORE])
  # Identities
  identity(id: String!): Identity @auth(for: [KNOWLEDGE])
  identities(
    first: Int
    after: ID
    types: [String]
    orderBy: IdentitiesOrdering
    orderMode: OrderingMode
    search: String
    filters: [IdentitiesFiltering]
    filterMode: FilterMode
    toStix: Boolean
  ): IdentityConnection @auth(for: [KNOWLEDGE])
  # Users
  me: User @auth
  user(id: String!): User @auth(for: [SETTINGS_SETACCESSES])
  person(id: String!): User @auth(for: [KNOWLEDGE])
  users(
    first: Int
    after: ID
    orderBy: UsersOrdering
    orderMode: OrderingMode
    filters: [UsersFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): UserConnection @auth(for: [SETTINGS_SETACCESSES])
  persons(
    first: Int
    after: ID
    orderBy: UsersOrdering
    orderMode: OrderingMode
    filters: [UsersFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): UserConnection @auth(for: [KNOWLEDGE])
  role(id: String!): Role @auth(for: [SETTINGS_SETACCESSES])
  # Organizations
  organization(id: String): Organization @auth(for: [KNOWLEDGE])
  organizations(
    organizationClass: String
    first: Int
    after: ID
    orderBy: OrganizationsOrdering
    orderMode: OrderingMode
    filters: [OrganizationsFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): OrganizationConnection @auth(for: [KNOWLEDGE])
  # Sectors
  sector(id: String): Sector @auth(for: [KNOWLEDGE])
  sectors(
    first: Int
    after: ID
    orderBy: SectorsOrdering
    orderMode: OrderingMode
    filters: [SectorsFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): SectorConnection @auth(for: [KNOWLEDGE])
  # Cities
  city(id: String): City @auth(for: [KNOWLEDGE])
  cities(
    first: Int
    after: ID
    orderBy: CitiesOrdering
    orderMode: OrderingMode
    filters: [CitiesFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): CityConnection @auth(for: [KNOWLEDGE])
  # Countries
  country(id: String): Country @auth(for: [KNOWLEDGE])
  countries(
    first: Int
    after: ID
    orderBy: CountriesOrdering
    orderMode: OrderingMode
    filters: [CountriesFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): CountryConnection @auth(for: [KNOWLEDGE])
  # Regions
  region(id: String!): Region @auth(for: [KNOWLEDGE])
  regions(
    first: Int
    after: ID
    orderBy: RegionsOrdering
    orderMode: OrderingMode
    filters: [RegionsFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): RegionConnection @auth(for: [KNOWLEDGE])
  # Groups
  group(id: String!): Group @auth(for: [SETTINGS_SETACCESSES])
  groups(first: Int, after: ID, orderBy: GroupsOrdering, orderMode: OrderingMode, search: String): GroupConnection
    @auth(for: [SETTINGS_SETACCESSES])
  roles(first: Int, after: ID, orderBy: RolesOrdering, orderMode: OrderingMode, search: String): RoleConnection
    @auth(for: [SETTINGS_SETACCESSES])
  capabilities(first: Int): CapabilityConnection @auth(for: [SETTINGS_SETACCESSES])
  # MarkingDefinitions
  markingDefinition(id: String): MarkingDefinition @auth(for: [KNOWLEDGE])
  markingDefinitions(
    first: Int
    after: ID
    orderBy: MarkingDefinitionsOrdering
    orderMode: OrderingMode
    filters: [MarkingDefinitionsFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): MarkingDefinitionConnection @auth(for: [KNOWLEDGE])
  # ExternalReferences
  externalReference(id: String!): ExternalReference @auth(for: [KNOWLEDGE])
  externalReferences(
    first: Int
    after: ID
    orderBy: ExternalReferencesOrdering
    orderMode: OrderingMode
    filters: [ExternalReferencesFiltering]
    filterMode: FilterMode
    search: String
  ): ExternalReferenceConnection @auth(for: [KNOWLEDGE])
  # KillChainPhases
  killChainPhase(id: String!): KillChainPhase @auth(for: [KNOWLEDGE])
  killChainPhases(
    first: Int
    after: ID
    orderBy: KillChainPhasesOrdering
    orderMode: OrderingMode
    filters: [KillChainPhasesFiltering]
    filterMode: FilterMode
    search: String
  ): KillChainPhaseConnection @auth(for: [KNOWLEDGE])
  # AttackPatterns
  attackPattern(id: String): AttackPattern @auth(for: [KNOWLEDGE])
  attackPatterns(
    first: Int
    after: ID
    orderBy: AttackPatternsOrdering
    orderMode: OrderingMode
    filters: [AttackPatternsFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): AttackPatternConnection @auth(for: [KNOWLEDGE])
  # CoursesOfAction
  courseOfAction(id: String): CourseOfAction @auth(for: [KNOWLEDGE])
  coursesOfAction(
    first: Int
    after: ID
    orderBy: CoursesOfActionOrdering
    orderMode: OrderingMode
    filters: [CoursesOfActionFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): CourseOfActionConnection @auth(for: [KNOWLEDGE])
  # ThreatActors
  threatActor(id: String): ThreatActor @auth(for: [KNOWLEDGE])
  threatActors(
    first: Int
    after: ID
    orderBy: ThreatActorsOrdering
    orderMode: OrderingMode
    filters: [ThreatActorsFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): ThreatActorConnection @auth(for: [KNOWLEDGE])
  # IntursionSets
  intrusionSet(id: String): IntrusionSet @auth(for: [KNOWLEDGE])
  intrusionSets(
    first: Int
    after: ID
    orderBy: IntrusionSetsOrdering
    orderMode: OrderingMode
    filters: [IntrusionSetsFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): IntrusionSetConnection @auth(for: [KNOWLEDGE])
  # Campaigns
  campaign(id: String): Campaign @auth(for: [KNOWLEDGE])
  campaigns(
    first: Int
    after: ID
    orderBy: CampaignsOrdering
    orderMode: OrderingMode
    filters: [CampaignsFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): CampaignConnection @auth(for: [KNOWLEDGE])
  campaignsTimeSeries(
    objectId: String
    field: String!
    operation: StatsOperation!
    startDate: DateTime!
    endDate: DateTime!
    interval: String!
    relationType: String
    inferred: Boolean
  ): [TimeSeries] @auth(for: [KNOWLEDGE])
  # Incidents
  incident(id: String): Incident @auth(for: [KNOWLEDGE])
  incidents(
    first: Int
    after: ID
    orderBy: IncidentsOrdering
    orderMode: OrderingMode
    filters: [IncidentsFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): IncidentConnection @auth(for: [KNOWLEDGE])
  incidentsTimeSeries(
    objectId: String
    field: String!
    operation: StatsOperation!
    startDate: DateTime!
    endDate: DateTime!
    interval: String!
    relationType: String
    inferred: Boolean
  ): [TimeSeries] @auth(for: [KNOWLEDGE])
  # Malwares
  malware(id: String): Malware @auth(for: [KNOWLEDGE])
  malwares(
    first: Int
    after: ID
    orderBy: MalwaresOrdering
    orderMode: OrderingMode
    filters: [MalwaresFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): MalwareConnection @auth(for: [KNOWLEDGE])
  # Tools
  tool(id: String): Tool @auth(for: [KNOWLEDGE])
  tools(
    first: Int
    after: ID
    orderBy: ToolsOrdering
    orderMode: OrderingMode
    filters: [ToolsFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): ToolConnection @auth(for: [KNOWLEDGE])
  # Vulnerabilities
  vulnerability(id: String): Vulnerability @auth(for: [KNOWLEDGE])
  vulnerabilities(
    first: Int
    after: ID
    orderBy: VulnerabilitiesOrdering
    orderMode: OrderingMode
    filters: [VulnerabilitiesFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): VulnerabilityConnection @auth(for: [KNOWLEDGE])
  # Reports
  report(id: String): Report @auth(for: [KNOWLEDGE])
  reports(
    first: Int
    after: ID
    orderBy: ReportsOrdering
    orderMode: OrderingMode
    filters: [ReportsFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): ReportConnection @auth(for: [KNOWLEDGE])
  reportsTimeSeries(
    objectId: String
    authorId: String
    reportClass: String
    field: String!
    operation: StatsOperation!
    startDate: DateTime!
    endDate: DateTime!
    interval: String!
  ): [TimeSeries] @auth(for: [KNOWLEDGE])
  reportsNumber(reportClass: String, objectId: String, endDate: DateTime): Number @auth(for: [KNOWLEDGE])
  reportsDistribution(
    objectId: String
    field: String!
    operation: StatsOperation!
    limit: Int
    order: String
  ): [Distribution] @auth(for: [KNOWLEDGE])
  reportContainsStixDomainObject(id: String!, objectId: String!): Boolean @auth(for: [KNOWLEDGE])
  reportContainsStixRelation(id: String!, objectId: String!): Boolean @auth(for: [KNOWLEDGE])
  reportContainsStixCyberObservable(id: String!, objectId: String!): Boolean @auth(for: [KNOWLEDGE])
  # Notes
  note(id: String): Note @auth(for: [KNOWLEDGE])
  notes(
    first: Int
    after: ID
    orderBy: NotesOrdering
    orderMode: OrderingMode
    filters: [NotesFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): NoteConnection @auth(for: [KNOWLEDGE])
  notesTimeSeries(
    objectId: String
    authorId: String
    field: String!
    operation: StatsOperation!
    startDate: DateTime!
    endDate: DateTime!
    interval: String!
  ): [TimeSeries] @auth(for: [KNOWLEDGE])
  notesNumber(objectId: String, endDate: DateTime): Number @auth(for: [KNOWLEDGE])
  notesDistribution(
    objectId: String
    field: String!
    operation: StatsOperation!
    limit: Int
    order: String
  ): [Distribution] @auth(for: [KNOWLEDGE])
  noteContainsStixDomainObject(id: String!, objectId: String!): Boolean @auth(for: [KNOWLEDGE])
  noteContainsStixRelation(id: String!, objectId: String!): Boolean @auth(for: [KNOWLEDGE])
  noteContainsStixCyberObservable(id: String!, objectId: String!): Boolean @auth(for: [KNOWLEDGE])
  # Opinions
  opinion(id: String): Opinion @auth(for: [KNOWLEDGE])
  opinions(
    first: Int
    after: ID
    orderBy: OpinionsOrdering
    orderMode: OrderingMode
    filters: [OpinionsFiltering]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): OpinionConnection @auth(for: [KNOWLEDGE])
  opinionsTimeSeries(
    objectId: String
    authorId: String
    field: String!
    operation: StatsOperation!
    startDate: DateTime!
    endDate: DateTime!
    interval: String!
  ): [TimeSeries] @auth(for: [KNOWLEDGE])
  opinionsNumber(objectId: String, endDate: DateTime): Number @auth(for: [KNOWLEDGE])
  opinionsDistribution(
    objectId: String
    field: String!
    operation: StatsOperation!
    limit: Int
    order: String
  ): [Distribution] @auth(for: [KNOWLEDGE])
  opinionContainsStixDomainObject(id: String!, objectId: String!): Boolean @auth(for: [KNOWLEDGE])
  opinionContainsStixRelation(id: String!, objectId: String!): Boolean @auth(for: [KNOWLEDGE])
  opinionContainsStixCyberObservable(id: String!, objectId: String!): Boolean @auth(for: [KNOWLEDGE])
  # Indicators
  indicator(id: String!): Indicator @auth(for: [KNOWLEDGE])
  indicators(
    first: Int
    after: ID
    orderBy: IndicatorsOrdering
    orderMode: OrderingMode
    filters: [IndicatorsFiltering]
    filterMode: FilterMode
    search: String
  ): IndicatorConnection @auth(for: [KNOWLEDGE])
}

### SUBSCRIPTIONS
type Subscription {
  settings(id: ID!): Settings @auth(for: [SETTINGS])
  label(id: ID!): Label @auth(for: [SETTINGS])
  markingDefinition(id: ID!): MarkingDefinition @auth(for: [SETTINGS])
  killChainPhase(id: ID!): KillChainPhase @auth(for: [SETTINGS])
  StixDomainObject(id: ID!): StixDomainObject @auth(for: [KNOWLEDGE])
  StixCyberObservable(id: ID!): StixCyberObservable @auth(for: [KNOWLEDGE])
  stixRelation(id: ID!): StixKnowledgeRelationship @auth(for: [KNOWLEDGE])
  stixSighting(id: ID!): StixSightingRelationship @auth(for: [KNOWLEDGE])
  externalReference(id: ID!): ExternalReference @auth(for: [KNOWLEDGE])
  workspace(id: ID!): Workspace @auth(for: [EXPLORE])
}

### MUTATIONS
# Settings
type SettingsEditMutations {
  fieldPatch(input: EditInput): Settings
  contextPatch(input: EditContext): Settings
  contextClean: Settings
}
# Attribute
type AttributeEditMutations {
  delete: ID
  update(input: AttributeEditInput): Attribute
}
# Label
type LabelEditMutations {
  delete: ID
  fieldPatch(input: EditInput): Label
  contextPatch(input: EditContext): Label
  contextClean: Label
}

# StixObject
type StixObjectEditMutations {
  relationAdd(input: StixKnowledgeRelationAddInput): StixKnowledgeRelationship
  relationDelete(relationId: ID!): StixObject
}

# StixDomainObject
type StixDomainObjectEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  changeType(newType: String!): StixDomainObject @auth(for: [KNOWLEDGE_KNUPDATE])
  fieldPatch(input: EditInput): StixDomainObject @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): StixDomainObject @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: StixDomainObject @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixKnowledgeRelationAddInput): StixKnowledgeRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID, toId: String, relationType: String): StixObject @auth(for: [KNOWLEDGE_KNUPDATE])
  importPush(file: Upload!): File @auth(for: [KNOWLEDGE_KNUPLOAD])
  exportAsk(format: String!, exportType: String!, maxMarkingDefinition: String): [File]
    @auth(for: [KNOWLEDGE_KNGETEXPORT_KNASKEXPORT])
  exportPush(file: Upload!): Boolean @auth(for: [CONNECTORAPI])
  mergeEntities(StixDomainObjectIds: [String]!, alias: [String]): StixDomainObject @auth(for: [KNOWLEDGE_KNUPDATE])
}

# StixCyberObservable
type StixCyberObservableEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): StixCyberObservable @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): StixCyberObservable @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: StixCyberObservable @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixKnowledgeRelationAddInput): StixKnowledgeRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID, toId: String, relationType: String): StixCyberObservable @auth(for: [KNOWLEDGE_KNUPDATE])
  askEnrichment(connectorId: ID!): Work @auth(for: [KNOWLEDGE_KNENRICHMENT])
}

# StixRelation
type StixRelationEditMutations {
  delete: ID
  fieldPatch(input: EditInput): StixKnowledgeRelationship
  contextPatch(input: EditContext): StixKnowledgeRelationship
  contextClean: StixKnowledgeRelationship
  relationAdd(input: StixKnowledgeRelationAddInput): StixKnowledgeRelationship
  relationDelete(relationId: ID!): StixKnowledgeRelationship
}

# StixSighting
type StixSightingEditMutations {
  delete: ID
  fieldPatch(input: EditInput): StixSightingRelationship
  contextPatch(input: EditContext): StixSightingRelationship
  contextClean: StixSightingRelationship
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship
  relationDelete(relationId: ID!): StixSightingRelationship
}

# Workspace
type WorkspaceEditMutations {
  delete: ID @auth(for: [EXPLORE_EXUPDATE_EXDELETE])
  fieldPatch(input: EditInput): Workspace @auth(for: [EXPLORE_EXUPDATE])
  contextPatch(input: EditContext): Workspace @auth(for: [EXPLORE_EXUPDATE])
  contextClean: Workspace @auth(for: [EXPLORE_EXUPDATE])
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship @auth(for: [EXPLORE_EXUPDATE])
  relationDelete(relationId: ID!): Workspace @auth(for: [EXPLORE_EXUPDATE])
}

# Identity
type IdentityEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): Identity @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): Identity @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: Identity @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixKnowledgeRelationAddInput): StixKnowledgeRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): Identity @auth(for: [KNOWLEDGE_KNUPDATE])
}

# User
type UserEditMutations {
  delete: ID
  fieldPatch(input: EditInput): User
  contextPatch(input: EditContext): User
  contextClean: User
  tokenRenew: User
  relationAdd(input: InternalRelationshipAddInput): InternalRelationship
  removeRole(name: String!): User
  relationDelete(relationId: ID!): User
}
type PersonEditMutations {
  delete: ID
  fieldPatch(input: EditInput): User
  contextPatch(input: EditContext): User
  contextClean: User
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship
  relationDelete(relationId: ID!): User
}

# Organization
type OrganizationEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): Organization @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): Organization @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: Organization @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixKnowledgeRelationAddInput): StixKnowledgeRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): Organization @auth(for: [KNOWLEDGE_KNUPDATE])
}

# Sector
type SectorEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): Sector @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): Sector @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: Sector @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixKnowledgeRelationAddInput): StixKnowledgeRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): Sector @auth(for: [KNOWLEDGE_KNUPDATE])
}

# City
type CityEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): City @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): City @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: City @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixKnowledgeRelationAddInput): StixKnowledgeRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): City @auth(for: [KNOWLEDGE_KNUPDATE])
}

# Country
type CountryEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): Country @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): Country @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: Country @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixKnowledgeRelationAddInput): StixKnowledgeRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): Country @auth(for: [KNOWLEDGE_KNUPDATE])
}

# Region
type RegionEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): Region @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): Region @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: Region @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixKnowledgeRelationAddInput): StixKnowledgeRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): Region @auth(for: [KNOWLEDGE_KNUPDATE])
}

# Role
type RoleEditMutations {
  delete: ID
  fieldPatch(input: EditInput): Role
  contextPatch(input: EditContext): Role
  contextClean: Role
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship
  removeCapability(name: String!): Role
}

# Group
type GroupEditMutations {
  delete: ID
  fieldPatch(input: EditInput): Group
  contextPatch(input: EditContext): Group
  contextClean: Group
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship
  relationDelete(relationId: ID!): Group
}

# MarkingDefinition
type MarkingDefinitionEditMutations {
  delete: ID
  fieldPatch(input: EditInput): MarkingDefinition
  contextPatch(input: EditContext): MarkingDefinition
  contextClean: MarkingDefinition
}

# ExternalReference
type ExternalReferenceEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): ExternalReference @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): ExternalReference @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: ExternalReference @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): ExternalReference @auth(for: [KNOWLEDGE_KNUPDATE])
}

# KillChainPhase
type KillChainPhaseEditMutations {
  delete: ID
  fieldPatch(input: EditInput): KillChainPhase
  contextPatch(input: EditContext): KillChainPhase
  contextClean: KillChainPhase
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship
  relationDelete(relationId: ID!): KillChainPhase
}

# AttackPattern
type AttackPatternEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): AttackPattern @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): AttackPattern @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: AttackPattern @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): AttackPattern @auth(for: [KNOWLEDGE_KNUPDATE])
}

# CourseOfAction
type CourseOfActionEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): CourseOfAction @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): CourseOfAction @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: CourseOfAction @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): CourseOfAction @auth(for: [KNOWLEDGE_KNUPDATE])
}

# ThreatActor
type ThreatActorEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): ThreatActor @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): ThreatActor @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: ThreatActor @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): ThreatActor @auth(for: [KNOWLEDGE_KNUPDATE])
}

# IntrusionSet
type IntrusionSetEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): IntrusionSet @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): IntrusionSet @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: IntrusionSet @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): IntrusionSet @auth(for: [KNOWLEDGE_KNUPDATE])
}

# Campaign
type CampaignEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): Campaign @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): Campaign @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: Campaign @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): Campaign @auth(for: [KNOWLEDGE_KNUPDATE])
}

# Incident
type IncidentEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): Incident @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): Incident @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: Incident @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): Incident @auth(for: [KNOWLEDGE_KNUPDATE])
}

# Malware
type MalwareEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): Malware @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): Malware @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: Malware @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): Malware @auth(for: [KNOWLEDGE_KNUPDATE])
}

# Tool
type ToolEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): Tool @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): Tool @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: Tool @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): Tool @auth(for: [KNOWLEDGE_KNUPDATE])
}

# Vulnerability
type VulnerabilityEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): Vulnerability @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): Vulnerability @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: Vulnerability @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): Vulnerability @auth(for: [KNOWLEDGE_KNUPDATE])
}

# Report
type ReportEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): Report @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): Report @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: Report @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID, toId: String, relationType: String): Report @auth(for: [KNOWLEDGE_KNUPDATE])
}

# Note
type NoteEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): Note @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): Note @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: Note @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID, toId: String, relationType: String): Note @auth(for: [KNOWLEDGE_KNUPDATE])
}

# Opinion
type OpinionEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): Opinion @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): Opinion @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: Opinion @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID, toId: String, relationType: String): Opinion @auth(for: [KNOWLEDGE_KNUPDATE])
}

# Indicator
type IndicatorEditMutations {
  delete: ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  fieldPatch(input: EditInput): Indicator @auth(for: [KNOWLEDGE_KNUPDATE])
  contextPatch(input: EditContext): Indicator @auth(for: [KNOWLEDGE_KNUPDATE])
  contextClean: Indicator @auth(for: [KNOWLEDGE_KNUPDATE])
  relationAdd(input: StixMetaRelationAddInput): StixMetaRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  relationDelete(relationId: ID!): Indicator @auth(for: [KNOWLEDGE_KNUPDATE])
}

# Mutations
type Mutation {
  # Login
  token(input: UserLoginInput): String
  # Settings
  settingsEdit(id: ID!): SettingsEditMutations @auth(for: [SETTINGS])
  # Inferences
  inferenceEnable(id: ID!): Inference @auth(for: [SETTINGS_SETINFERENCES])
  inferenceDisable(id: ID!): Inference @auth(for: [SETTINGS_SETINFERENCES])
  # Attribute
  attributeAdd(input: AttributeAddInput): Attribute @auth(for: [SETTINGS])
  attributeEdit(id: ID!): AttributeEditMutations @auth(for: [SETTINGS])
  # Connector
  pingConnector(id: ID!, state: String): Connector @auth(for: [CONNECTORAPI])
  registerConnector(input: RegisterConnectorInput): Connector @auth(for: [CONNECTORAPI])
  resetStateConnector(id: ID!): Connector @auth(for: [MODULES_MODMANAGE])
  deleteConnector(id: ID!): ID! @auth(for: [MODULES_MODMANAGE])
  deleteWork(id: ID!): ID! @auth(for: [KNOWLEDGE_KNASKIMPORT, KNOWLEDGE_KNGETEXPORT_KNASKEXPORT])
  initiateJob(workId: ID!): Job @auth(for: [CONNECTORAPI])
  updateJob(jobId: ID!, status: Status!, messages: [String]): Job @auth(for: [CONNECTORAPI])
  # File management
  deleteImport(fileName: String): Boolean @auth(for: [KNOWLEDGE_KNASKIMPORT])
  uploadImport(file: Upload!): File @auth(for: [KNOWLEDGE_KNASKIMPORT])
  askJobImport(fileName: ID!, context: String): File @auth(for: [KNOWLEDGE_KNASKIMPORT])
  # Label
  labelAdd(input: LabelAddInput): Label @auth(for: [KNOWLEDGE_KNUPDATE])
  labelEdit(id: ID!): LabelEditMutations @auth(for: [KNOWLEDGE_KNUPDATE])
  # StixObject
  stixEntityEdit(id: ID!): StixObjectEditMutations @auth(for: [KNOWLEDGE_KNUPDATE])
  # StixDomainObject
  StixDomainObjectAdd(input: StixDomainObjectAddInput): StixDomainObject @auth(for: [KNOWLEDGE_KNUPDATE])
  StixDomainObjectEdit(id: ID!): StixDomainObjectEditMutations
  StixDomainObjectExportAsk(
    type: String!
    format: String!
    exportType: String!
    maxMarkingDefinition: String
    context: String
    search: String
    orderBy: StixDomainObjectOrdering
    orderMode: OrderingMode
    filters: [StixDomainObjectFiltering]
    filterMode: FilterMode
  ): FileConnection @auth(for: [KNOWLEDGE_KNGETEXPORT_KNASKEXPORT])
  StixDomainObjectMerge(
    keepedEntityId: ID!
    mergedEntityId: ID!
    mergeRelations: Boolean
    mergeAliases: Boolean
  ): StixDomainObject @auth(for: [KNOWLEDGE_KNUPDATE])
  StixDomainObjectDelete(id: [ID]!): [ID]!
  StixDomainObjectExportPush(type: String!, file: Upload!, context: String, listArgs: String): Boolean
    @auth(for: [CONNECTORAPI])
  # StixCyberObservable
  StixCyberObservableAdd(input: StixCyberObservableAddInput): StixCyberObservable @auth(for: [KNOWLEDGE_KNUPDATE])
  StixCyberObservableEdit(id: ID!): StixCyberObservableEditMutations
  StixCyberObservableExportAsk(
    format: String!
    exportType: String!
    maxMarkingDefinition: String
    context: String
    types: [String]
    search: String
    orderBy: StixCyberObservableOrdering
    orderMode: OrderingMode
    filters: [StixCyberObservableFiltering]
    filterMode: FilterMode
  ): FileConnection @auth(for: [KNOWLEDGE_KNGETEXPORT_KNASKEXPORT])
  StixCyberObservableExportPush(file: Upload!, context: String, listArgs: String): Boolean
  @auth(for: [CONNECTORAPI])
  # StixRelation
  stixRelationAdd(input: StixRelationAddInput, reversedReturn: Boolean): StixKnowledgeRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  stixRelationEdit(id: ID!): StixRelationEditMutations @auth(for: [KNOWLEDGE_KNUPDATE])
  # StixSighting
  stixSightingAdd(input: StixSightingAddInput, reversedReturn: Boolean): StixSightingRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  stixSightingEdit(id: ID!): StixSightingEditMutations @auth(for: [KNOWLEDGE_KNUPDATE])
  # Workspace
  workspaceAdd(input: WorkspaceAddInput): Workspace @auth(for: [EXPLORE_EXUPDATE])
  workspaceEdit(id: ID!): WorkspaceEditMutations
  # Identity
  identityAdd(input: IdentityAddInput): Identity @auth(for: [KNOWLEDGE_KNUPDATE])
  identityEdit(id: ID!): IdentityEditMutations
  # User
  userAdd(input: UserAddInput): User @auth(for: [SETTINGS_SETACCESSES])
  userEdit(id: ID!): UserEditMutations @auth(for: [SETTINGS_SETACCESSES])
  personAdd(input: PersonAddInput): User @auth(for: [KNOWLEDGE_KNUPDATE])
  personEdit(id: ID!): PersonEditMutations @auth(for: [KNOWLEDGE_KNUPDATE])
  meEdit(input: EditInput): User @auth
  logout: ID @auth
  # Role
  roleAdd(input: RoleAddInput): Role @auth(for: [SETTINGS_SETACCESSES])
  roleEdit(id: ID!): RoleEditMutations @auth(for: [SETTINGS_SETACCESSES])
  # Organization
  organizationAdd(input: OrganizationAddInput): Organization @auth(for: [KNOWLEDGE_KNUPDATE])
  organizationEdit(id: ID!): OrganizationEditMutations
  # Sector
  sectorAdd(input: SectorAddInput): Sector @auth(for: [KNOWLEDGE_KNUPDATE])
  sectorEdit(id: ID!): SectorEditMutations
  # City
  cityAdd(input: CityAddInput): City @auth(for: [KNOWLEDGE_KNUPDATE])
  cityEdit(id: ID!): CityEditMutations
  # Country
  countryAdd(input: CountryAddInput): Country @auth(for: [KNOWLEDGE_KNUPDATE])
  countryEdit(id: ID!): CountryEditMutations
  # Region
  regionAdd(input: RegionAddInput): Region @auth(for: [KNOWLEDGE_KNUPDATE])
  regionEdit(id: ID!): RegionEditMutations
  # Group
  groupAdd(input: GroupAddInput): Group @auth(for: [SETTINGS_SETACCESSES])
  groupEdit(id: ID!): GroupEditMutations @auth(for: [SETTINGS_SETACCESSES])
  # MarkingDefinition
  markingDefinitionAdd(input: MarkingDefinitionAddInput): MarkingDefinition @auth(for: [SETTINGS_SETMARKINGS])
  markingDefinitionEdit(id: ID!): MarkingDefinitionEditMutations @auth(for: [SETTINGS_SETMARKINGS])
  # ExternalReference
  externalReferenceAdd(input: ExternalReferenceAddInput): ExternalReference @auth(for: [KNOWLEDGE_KNUPDATE])
  externalReferenceEdit(id: ID!): ExternalReferenceEditMutations
  # KillChainPhase
  killChainPhaseAdd(input: KillChainPhaseAddInput): KillChainPhase @auth(for: [SETTINGS])
  killChainPhaseEdit(id: ID!): KillChainPhaseEditMutations @auth(for: [SETTINGS])
  # AttackPattern
  attackPatternAdd(input: AttackPatternAddInput): AttackPattern @auth(for: [KNOWLEDGE_KNUPDATE])
  attackPatternEdit(id: ID!): AttackPatternEditMutations
  # CourseOfAction
  courseOfActionAdd(input: CourseOfActionAddInput): CourseOfAction @auth(for: [KNOWLEDGE_KNUPDATE])
  courseOfActionEdit(id: ID!): CourseOfActionEditMutations
  # ThreatActor
  threatActorAdd(input: ThreatActorAddInput): ThreatActor @auth(for: [KNOWLEDGE_KNUPDATE])
  threatActorEdit(id: ID!): ThreatActorEditMutations
  # IntrusionSet
  intrusionSetAdd(input: IntrusionSetAddInput): IntrusionSet @auth(for: [KNOWLEDGE_KNUPDATE])
  intrusionSetEdit(id: ID!): IntrusionSetEditMutations
  # Campaign
  campaignAdd(input: CampaignAddInput): Campaign @auth(for: [KNOWLEDGE_KNUPDATE])
  campaignEdit(id: ID!): CampaignEditMutations
  # Incident
  incidentAdd(input: IncidentAddInput): Incident @auth(for: [KNOWLEDGE_KNUPDATE])
  incidentEdit(id: ID!): IncidentEditMutations
  # Malware
  malwareAdd(input: MalwareAddInput): Malware @auth(for: [KNOWLEDGE_KNUPDATE])
  malwareEdit(id: ID!): MalwareEditMutations
  # Tool
  toolAdd(input: ToolAddInput): Tool @auth(for: [KNOWLEDGE_KNUPDATE])
  toolEdit(id: ID!): ToolEditMutations
  # Vulnerability
  vulnerabilityAdd(input: VulnerabilityAddInput): Vulnerability @auth(for: [KNOWLEDGE_KNUPDATE])
  vulnerabilityEdit(id: ID!): VulnerabilityEditMutations
  # Report
  reportAdd(input: ReportAddInput): Report @auth(for: [KNOWLEDGE_KNUPDATE])
  reportEdit(id: ID!): ReportEditMutations
  # Note
  noteAdd(input: NoteAddInput): Note @auth(for: [KNOWLEDGE_KNUPDATE])
  noteEdit(id: ID!): NoteEditMutations
  # Report
  opinionAdd(input: OpinionAddInput): Opinion @auth(for: [KNOWLEDGE_KNUPDATE])
  opinionEdit(id: ID!): OpinionEditMutations
  # Indicator
  indicatorAdd(input: IndicatorAddInput): Indicator @auth(for: [KNOWLEDGE_KNUPDATE])
  indicatorEdit(id: ID!): IndicatorEditMutations
}
