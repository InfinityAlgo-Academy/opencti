import { expect, it, describe } from 'vitest';
import gql from 'graphql-tag';
import { queryAsAdmin } from '../../utils/testQuery';
import { validateVulnerabilityValues } from '../../../src/domain/vulnerability';

const LIST_QUERY = gql`
  query vulnerabilities(
    $first: Int
    $after: ID
    $orderBy: VulnerabilitiesOrdering
    $orderMode: OrderingMode
    $filters: FilterGroup
    $search: String
  ) {
    vulnerabilities(
      first: $first
      after: $after
      orderBy: $orderBy
      orderMode: $orderMode
      filters: $filters
      search: $search
    ) {
      edges {
        node {
          id
          name
          description
        }
      }
    }
  }
`;

const READ_QUERY = gql`
  query vulnerability($id: String!) {
    vulnerability(id: $id) {
      id
      name
      description
      toStix
    }
  }
`;

describe('Vulnerability resolver standard behavior', () => {
  let vulnerabilityInternalId;
  const vulnerabilityStixId = 'vulnerability--09eb6088-bda5-4fbe-9454-321b2d6dfbea';
  it('should vulnerability created', async () => {
    const CREATE_QUERY = gql`
      mutation VulnerabilityAdd($input: VulnerabilityAddInput!) {
        vulnerabilityAdd(input: $input) {
          id
          name
          description
        }
      }
    `;
    // Create the vulnerability
    const VULNERABILITY_TO_CREATE = {
      input: {
        name: 'Vulnerability',
        stix_id: vulnerabilityStixId,
        description: 'Vulnerability description',
      },
    };
    const vulnerability = await queryAsAdmin({
      query: CREATE_QUERY,
      variables: VULNERABILITY_TO_CREATE,
    });
    expect(vulnerability).not.toBeNull();
    expect(vulnerability.data.vulnerabilityAdd).not.toBeNull();
    expect(vulnerability.data.vulnerabilityAdd.name).toEqual('Vulnerability');
    vulnerabilityInternalId = vulnerability.data.vulnerabilityAdd.id;
  });
  it('should vulnerability loaded by internal id', async () => {
    const queryResult = await queryAsAdmin({ query: READ_QUERY, variables: { id: vulnerabilityInternalId } });
    expect(queryResult).not.toBeNull();
    expect(queryResult.data.vulnerability).not.toBeNull();
    expect(queryResult.data.vulnerability.id).toEqual(vulnerabilityInternalId);
    expect(queryResult.data.vulnerability.toStix.length).toBeGreaterThan(5);
  });
  it('should vulnerability loaded by stix id', async () => {
    const queryResult = await queryAsAdmin({ query: READ_QUERY, variables: { id: vulnerabilityStixId } });
    expect(queryResult).not.toBeNull();
    expect(queryResult.data.vulnerability).not.toBeNull();
    expect(queryResult.data.vulnerability.id).toEqual(vulnerabilityInternalId);
  });
  it('should list vulnerabilities', async () => {
    const queryResult = await queryAsAdmin({ query: LIST_QUERY, variables: { first: 10 } });
    expect(queryResult.data.vulnerabilities.edges.length).toEqual(1);
  });
  it('should update vulnerability', async () => {
    const UPDATE_QUERY = gql`
      mutation VulnerabilityEdit($id: ID!, $input: [EditInput]!) {
        vulnerabilityEdit(id: $id) {
          fieldPatch(input: $input) {
            id
            name
          }
        }
      }
    `;
    const queryResult = await queryAsAdmin({
      query: UPDATE_QUERY,
      variables: { id: vulnerabilityInternalId, input: { key: 'name', value: ['Vulnerability - test'] } },
    });
    expect(queryResult.data.vulnerabilityEdit.fieldPatch.name).toEqual('Vulnerability - test');
  });
  it('should context patch vulnerability', async () => {
    const CONTEXT_PATCH_QUERY = gql`
      mutation VulnerabilityEdit($id: ID!, $input: EditContext) {
        vulnerabilityEdit(id: $id) {
          contextPatch(input: $input) {
            id
          }
        }
      }
    `;
    const queryResult = await queryAsAdmin({
      query: CONTEXT_PATCH_QUERY,
      variables: { id: vulnerabilityInternalId, input: { focusOn: 'description' } },
    });
    expect(queryResult.data.vulnerabilityEdit.contextPatch.id).toEqual(vulnerabilityInternalId);
  });
  it('should context clean vulnerability', async () => {
    const CONTEXT_PATCH_QUERY = gql`
      mutation VulnerabilityEdit($id: ID!) {
        vulnerabilityEdit(id: $id) {
          contextClean {
            id
          }
        }
      }
    `;
    const queryResult = await queryAsAdmin({
      query: CONTEXT_PATCH_QUERY,
      variables: { id: vulnerabilityInternalId },
    });
    expect(queryResult.data.vulnerabilityEdit.contextClean.id).toEqual(vulnerabilityInternalId);
  });
  it('should add relation in vulnerability', async () => {
    const RELATION_ADD_QUERY = gql`
      mutation VulnerabilityEdit($id: ID!, $input: StixRefRelationshipAddInput!) {
        vulnerabilityEdit(id: $id) {
          relationAdd(input: $input) {
            id
            from {
              ... on Vulnerability {
                objectMarking {
                  id
                }
              }
            }
          }
        }
      }
    `;
    const queryResult = await queryAsAdmin({
      query: RELATION_ADD_QUERY,
      variables: {
        id: vulnerabilityInternalId,
        input: {
          toId: 'marking-definition--78ca4366-f5b8-4764-83f7-34ce38198e27',
          relationship_type: 'object-marking',
        },
      },
    });
    expect(queryResult.data.vulnerabilityEdit.relationAdd.from.objectMarking.length).toEqual(1);
  });
  it('should delete relation in vulnerability', async () => {
    const RELATION_DELETE_QUERY = gql`
      mutation VulnerabilityEdit($id: ID!, $toId: StixRef!, $relationship_type: String!) {
        vulnerabilityEdit(id: $id) {
          relationDelete(toId: $toId, relationship_type: $relationship_type) {
            id
            objectMarking {
              id
            }
          }
        }
      }
    `;
    const queryResult = await queryAsAdmin({
      query: RELATION_DELETE_QUERY,
      variables: {
        id: vulnerabilityInternalId,
        toId: 'marking-definition--78ca4366-f5b8-4764-83f7-34ce38198e27',
        relationship_type: 'object-marking',
      },
    });
    expect(queryResult.data.vulnerabilityEdit.relationDelete.objectMarking.length).toEqual(0);
  });
  it('should vulnerability deleted', async () => {
    const DELETE_QUERY = gql`
      mutation vulnerabilityDelete($id: ID!) {
        vulnerabilityEdit(id: $id) {
          delete
        }
      }
    `;
    // Delete the vulnerability
    await queryAsAdmin({
      query: DELETE_QUERY,
      variables: { id: vulnerabilityInternalId },
    });
    // Verify is no longer found
    const queryResult = await queryAsAdmin({ query: READ_QUERY, variables: { id: vulnerabilityStixId } });
    expect(queryResult).not.toBeNull();
    expect(queryResult.data.vulnerability).toBeNull();
  });

  describe('Test errors', () => {
    const values1 = { x_opencti_epss_score: null, x_opencti_epss_percentile: 2 };
    const values2 = { x_opencti_epss_score: 2, x_opencti_epss_percentile: null };
    const values3 = { x_opencti_epss_score: 2, x_opencti_epss_percentile: 2 };

    describe('EPSS values', () => {
      describe(`if epss score is ${values1.x_opencti_epss_score} and epss percentile is ${values1.x_opencti_epss_percentile}`, () => {
        it('should throw an error', () => {
          expect(() => validateVulnerabilityValues(values1)).toThrowError('Epss values should be between 0 and 1');
        });
      });
      describe(`if epss score is ${values2.x_opencti_epss_score} and epss percentile is ${values2.x_opencti_epss_percentile}`, () => {
        it('should throw an error', () => {
          expect(() => validateVulnerabilityValues(values2)).toThrowError('Epss values should be between 0 and 1');
        });
      });
      describe(`if epss score is ${values3.x_opencti_epss_score} and epss percentile is ${values3.x_opencti_epss_percentile}`, () => {
        it('should throw an error', () => {
          expect(() => validateVulnerabilityValues(values3)).toThrowError('Epss values should be between 0 and 1');
        });
      });
    });
  });
});
