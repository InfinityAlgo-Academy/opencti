import { assoc, head, join, map, tail } from 'ramda';
import uuid from 'uuid/v4';
import {
  dayFormat,
  escapeString,
  executeWrite,
  loadEntityById,
  graknNow,
  monthFormat,
  notify,
  prepareDate,
  yearFormat
} from '../database/grakn';
import { BUS_TOPICS } from '../config/conf';
import { elPaginate } from '../database/elasticSearch';
import { linkCreatedByRef, linkKillChains, linkMarkingDef } from './stixEntity';

export const findAll = args =>
  elPaginate('stix_domain_entities', assoc('type', 'malware', args));

export const findById = malwareId => loadEntityById(malwareId);

export const addMalware = async (user, malware) => {
  const malwareId = await executeWrite(async wTx => {
    const internalId = malware.internal_id_key
      ? escapeString(malware.internal_id_key)
      : uuid();
    const now = graknNow();
    const malwareIterator = await wTx.tx.query(`insert $malware isa Malware,
    has internal_id_key "${internalId}",
    has entity_type "malware",
    has stix_id_key "${
      malware.stix_id_key
        ? escapeString(malware.stix_id_key)
        : `malware--${uuid()}`
    }",
    has stix_label "",
    ${
      malware.alias
        ? `${join(
            ' ',
            map(val => `has alias "${escapeString(val)}",`, tail(malware.alias))
          )} has alias "${escapeString(head(malware.alias))}",`
        : 'has alias "",'
    }
    has name "${escapeString(malware.name)}",
    has description "${escapeString(malware.description)}",
    has created ${malware.created ? prepareDate(malware.created) : now},
    has modified ${malware.modified ? prepareDate(malware.modified) : now},
    has revoked false,
    has created_at ${now},
    has created_at_day "${dayFormat(now)}",
    has created_at_month "${monthFormat(now)}",
    has created_at_year "${yearFormat(now)}",         
    has updated_at ${now};
  `);
    const createMalware = await malwareIterator.next();
    const createdMalwareId = await createMalware.map().get('malware').id;
    // Create associated relations
    await linkCreatedByRef(wTx, createdMalwareId, malware.createdByRef);
    await linkMarkingDef(wTx, createdMalwareId, malware.markingDefinitions);
    await linkKillChains(wTx, createdMalwareId, malware.killChainPhases);
    return internalId;
  });
  return loadEntityById(malwareId).then(created => {
    return notify(BUS_TOPICS.StixDomainEntity.ADDED_TOPIC, created, user);
  });
};
