import { createEntity } from '../database/middleware';
import { listEntitiesThroughRelationsPaginated, listEntities, storeLoadById } from '../database/middleware-loader';
import { BUS_TOPICS } from '../config/conf';
import { notify } from '../database/redis';
import { ENTITY_TYPE_VULNERABILITY } from '../schema/stixDomainObject';
import { ABSTRACT_STIX_DOMAIN_OBJECT } from '../schema/general';
import { RELATION_HAS } from '../schema/stixCoreRelationship';
import { ENTITY_SOFTWARE } from '../schema/stixCyberObservable';
import { stixDomainObjectEditField } from './stixDomainObject';
import { FunctionalError } from '../config/errors';

export const findById = (context, user, vulnerabilityId) => {
  return storeLoadById(context, user, vulnerabilityId, ENTITY_TYPE_VULNERABILITY);
};

export const findAll = (context, user, args) => {
  return listEntities(context, user, [ENTITY_TYPE_VULNERABILITY], args);
};

export const addVulnerability = async (context, user, vulnerability) => {
  const { x_opencti_epss_percentile, x_opencti_epss_score } = vulnerability;
  validateVulnerabilityValues({ x_opencti_epss_percentile, x_opencti_epss_score });
  const created = await createEntity(context, user, vulnerability, ENTITY_TYPE_VULNERABILITY);
  return notify(BUS_TOPICS[ABSTRACT_STIX_DOMAIN_OBJECT].ADDED_TOPIC, created, user);
};

export const vulnerabilityEditField = async (context, user, stixObjectId, input, opts = {}) => {
  input.forEach((item) => {
    if (item.key === 'x_opencti_epss_percentile' || item.key === 'x_opencti_epss_score') {
      validateVulnerabilityValues({
        [item.key]: item.value[0] === null ? null : parseFloat(item.value[0])
      });
    }
  });
  return stixDomainObjectEditField(context, user, stixObjectId, input, opts);
};

export const softwarePaginated = async (context, user, vulnerabilityId, opts) => {
  return listEntitiesThroughRelationsPaginated(context, user, vulnerabilityId, RELATION_HAS, ENTITY_SOFTWARE, true, opts);
};

export const validateVulnerabilityValues = ({ x_opencti_epss_percentile = null, x_opencti_epss_score = null }) => {
  const isEpssScoreCorrect = x_opencti_epss_score === null || (x_opencti_epss_score >= 0 && x_opencti_epss_score <= 1);
  const isEpssPercentileCorrect = x_opencti_epss_percentile === null || (x_opencti_epss_percentile >= 0 && x_opencti_epss_percentile <= 1);

  if (!isEpssScoreCorrect || !isEpssPercentileCorrect) {
    throw FunctionalError('Epss values should be between 0 and 1', { reason: { x_opencti_epss_score, x_opencti_epss_percentile } });
  }
};
