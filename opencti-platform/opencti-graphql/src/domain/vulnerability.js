import { assoc, head, join, map, tail } from 'ramda';
import uuid from 'uuid/v4';
import {
  dayFormat,
  escapeString,
  executeWrite,
  loadEntityById,
  graknNow,
  monthFormat,
  prepareDate,
  yearFormat
} from '../database/grakn';
import { BUS_TOPICS } from '../config/conf';
import { elPaginate } from '../database/elasticSearch';
import { linkCreatedByRef, linkKillChains, linkMarkingDef } from './stixEntity';
import { notify } from '../database/redis';

export const findAll = args => {
  return elPaginate(
    'stix_domain_entities',
    assoc('type', 'vulnerability', args)
  );
};

export const findById = vulnerabilityId => loadEntityById(vulnerabilityId);

export const addVulnerability = async (user, vulnerability) => {
  const vulId = await executeWrite(async wTx => {
    const internalId = vulnerability.internal_id_key
      ? escapeString(vulnerability.internal_id_key)
      : uuid();
    const vulnerabilityIterator = await wTx.tx
      .query(`insert $vulnerability isa Vulnerability,
    has internal_id_key "${internalId}",
    has entity_type "vulnerability",
    has stix_id_key "${
      vulnerability.stix_id_key
        ? escapeString(vulnerability.stix_id_key)
        : `vulnerability--${uuid()}`
    }",
    has stix_label "",
    ${
      vulnerability.alias
        ? `${join(
            ' ',
            map(
              val => `has alias "${escapeString(val)}",`,
              tail(vulnerability.alias)
            )
          )} has alias "${escapeString(head(vulnerability.alias))}",`
        : 'has alias "",'
    }
    has name "${escapeString(vulnerability.name)}",
    has description "${escapeString(vulnerability.description)}",
    has created ${
      vulnerability.created ? prepareDate(vulnerability.created) : graknNow()
    },
    has modified ${
      vulnerability.modified ? prepareDate(vulnerability.modified) : graknNow()
    },
    has revoked false,
    has created_at ${graknNow()},
    has created_at_day "${dayFormat(graknNow())}",
    has created_at_month "${monthFormat(graknNow())}",
    has created_at_year "${yearFormat(graknNow())}",      
    has updated_at ${graknNow()};
  `);
    const createVulnerability = await vulnerabilityIterator.next();
    const createdId = await createVulnerability.map().get('vulnerability').id;

    // Create associated relations
    await linkCreatedByRef(wTx, createdId, vulnerability.createdByRef);
    await linkMarkingDef(wTx, createdId, vulnerability.markingDefinitions);
    await linkKillChains(wTx, createdId, vulnerability.killChainPhases);
    return internalId;
  });
  return loadEntityById(vulId).then(created => {
    return notify(BUS_TOPICS.StixDomainEntity.ADDED_TOPIC, created, user);
  });
};
