import type { Resolvers } from '../../generated/graphql';
import { buildRefRelationKey } from '../../schema/general';
import { RELATION_CREATED_BY, RELATION_OBJECT_LABEL, RELATION_OBJECT_MARKING } from '../../schema/stixRefRelationship';
import {
  addMalwareAnalysis,
  batchAnalysisSco,
  batchHostVm,
  batchInstalledSoftware,
  batchOperatingSystem,
  batchSample,
  findAll,
  findById,
  RELATION_ANALYSIS_SCO,
  RELATION_HOST_VM,
  RELATION_INSTALLED_SOFTWARE,
  RELATION_OPERATING_SYSTEM,
  RELATION_SAMPLE
} from './malwareAnalysis-domain';
import { batchLoader } from '../../database/middleware';
import {
  stixDomainObjectAddRelation,
  stixDomainObjectCleanContext,
  stixDomainObjectDelete,
  stixDomainObjectDeleteRelation,
  stixDomainObjectEditContext,
  stixDomainObjectEditField
} from '../../domain/stixDomainObject';

const hostVmLoader = batchLoader(batchHostVm);
const operatingSystemLoader = batchLoader(batchOperatingSystem);
const installedSoftwareLoader = batchLoader(batchInstalledSoftware);
const analysisScoLoader = batchLoader(batchAnalysisSco);
const sampleLoader = batchLoader(batchSample);

const malwareAnalysisResolvers: Resolvers = {

  Query: {
    malwareAnalysis: (_, { id }, context) => {
      return findById(context, context.user, id);
    },
    malwareAnalyses: (_, args, context) => {
      return findAll(context, context.user, args);
    },
  },
  MalwareAnalysis: {
    hostVm: (malwareAnalysis, _, context) => hostVmLoader.load(malwareAnalysis.id, context, context.user),
    operatingSystem: (malwareAnalysis, _, context) => operatingSystemLoader.load(malwareAnalysis.id, context, context.user),
    installedSoftware: (malwareAnalysis, _, context) => installedSoftwareLoader.load(malwareAnalysis.id, context, context.user),
    analysisSco: (malwareAnalysis, _, context) => analysisScoLoader.load(malwareAnalysis.id, context, context.user),
    sample: (malwareAnalysis, _, context) => sampleLoader.load(malwareAnalysis.id, context, context.user),
  },
  MalwareAnalysesFilter: {
    createdBy: buildRefRelationKey(RELATION_CREATED_BY),
    markedBy: buildRefRelationKey(RELATION_OBJECT_MARKING),
    labelledBy: buildRefRelationKey(RELATION_OBJECT_LABEL),
    sample: buildRefRelationKey(RELATION_SAMPLE),
    operatingSystem: buildRefRelationKey(RELATION_OPERATING_SYSTEM),
    analysisSco: buildRefRelationKey(RELATION_ANALYSIS_SCO),
    hostVm: buildRefRelationKey(RELATION_HOST_VM),
    installedSoftware: buildRefRelationKey(RELATION_INSTALLED_SOFTWARE),
  },
  Mutation: {
    malwareAnalysisAdd: (_, { input }, context) => {
      return addMalwareAnalysis(context, context.user, input);
    },
    malwareAnalysisDelete: (_, { id }, context) => {
      return stixDomainObjectDelete(context, context.user, id);
    },
    malwareAnalysisFieldPatch: (_, { id, input, commitMessage, references }, context) => {
      return stixDomainObjectEditField(context, context.user, id, input, { commitMessage, references });
    },
    malwareAnalysisContextPatch: (_, { id, input }, context) => {
      return stixDomainObjectEditContext(context, context.user, id, input);
    },
    malwareAnalysisContextClean: (_, { id }, context) => {
      return stixDomainObjectCleanContext(context, context.user, id);
    },
    malwareAnalysisRelationAdd: (_, { id, input }, context) => {
      return stixDomainObjectAddRelation(context, context.user, id, input);
    },
    malwareAnalysisRelationDelete: (_, { id, toId, relationship_type: relationshipType }, context) => {
      return stixDomainObjectDeleteRelation(context, context.user, id, toId, relationshipType);
    },
  }
};

export default malwareAnalysisResolvers;
