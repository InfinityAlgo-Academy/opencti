import { buildStixDomain } from '../../database/stix-converter';
import { INPUT_HOST_VM, INPUT_OPERATING_SYSTEM, INPUT_SAMPLE, INPUT_INSTALLED_SOFTWARE, INPUT_ANALYSIS_SCO } from './malwareAnalysis-types';
const convertMalwareAnalysisToStix = (instance) => {
    var _a, _b, _c, _d, _e;
    const stixDomainObject = buildStixDomain(instance);
    return Object.assign(Object.assign({}, stixDomainObject), { version: instance.version, product: instance.product, host_vm_ref: (_a = instance[INPUT_HOST_VM]) === null || _a === void 0 ? void 0 : _a.standard_id, operating_system_ref: (_b = instance[INPUT_OPERATING_SYSTEM]) === null || _b === void 0 ? void 0 : _b.standard_id, installed_software_refs: ((_c = instance[INPUT_INSTALLED_SOFTWARE]) !== null && _c !== void 0 ? _c : []).map((m) => m.standard_id), configuration_version: instance.configuration_version, modules: instance.modules, analysis_engine_version: instance.analysis_engine_version, analysis_definition_version: instance.analysis_definition_version, submitted: instance.submitted, analysis_started: instance.analysis_started, analysis_ended: instance.analysis_ended, result_name: instance.result_name, result: instance.result, analysis_sco_refs: ((_d = instance[INPUT_ANALYSIS_SCO]) !== null && _d !== void 0 ? _d : []).map((m) => m.standard_id), sample_ref: (_e = instance[INPUT_SAMPLE]) === null || _e === void 0 ? void 0 : _e.standard_id });
};
export default convertMalwareAnalysisToStix;
