type Narrative implements BasicObject & StixCoreObject & StixDomainObject & StixObject {
    id: ID! # internal_id
    standard_id: String!
    entity_type: String!
    parent_types: [String]!
    # StixObject
    x_opencti_stix_ids: [String]
    is_inferred: Boolean!
    spec_version: String!
    created_at: DateTime!
    updated_at: DateTime!
    # inferences
    x_opencti_inferences: [Inference]
    # StixCoreObject
    createdBy: Identity
    objectMarking: MarkingDefinitionConnection
    objectLabel: LabelConnection
    externalReferences(first: Int): ExternalReferenceConnection
    reports(first: Int): ReportConnection
    notes(first: Int): NoteConnection
    opinions(first: Int): OpinionConnection
    observedData(first: Int): ObservedDataConnection
    stixCoreRelationships(
        first: Int
        after: ID
        orderBy: StixCoreRelationshipsOrdering
        orderMode: OrderingMode
        fromId: String
        toId: String
        fromTypes: [String]
        toTypes: [String]
        relationship_type: String
        startTimeStart: DateTime
        startTimeStop: DateTime
        stopTimeStart: DateTime
        stopTimeStop: DateTime
        firstSeenStart: DateTime
        firstSeenStop: DateTime
        lastSeenStart: DateTime
        lastSeenStop: DateTime
        confidences: [Int]
        search: String
        filters: [StixCoreRelationshipsFiltering]
        filterMode: FilterMode
    ): StixCoreRelationshipConnection
    # StixDomainObject
    revoked: Boolean!
    confidence: Int
    lang: String
    created: DateTime
    modified: DateTime
    x_opencti_graph_data: String
    # Narrative
    name: String!
    description: String
    aliases: [String]
    # Technical
    creator: User
    toStix: String
    importFiles(first: Int): FileConnection
    pendingFiles(first: Int): FileConnection
    exportFiles(first: Int): FileConnection
    editContext: [EditUserContext]
    connectors(onlyAlive: Boolean): [Connector]
    jobs(first: Int): [Work]
    status: Status
    workflowEnabled: Boolean
}

# Ordering
enum NarrativesOrdering {
    name
    type
    created
    modified
    created_at
    updated_at
    objectMarking
    objectLabel
    x_opencti_workflow_id
}

# Filtering
enum NarrativesFilter {
    name
    aliases
    type
    created
    modified
    created_at
    updated_at
    createdBy
    markedBy
    labelledBy
    x_opencti_workflow_id
}
input NarrativesFiltering {
    key: NarrativesFilter!
    values: [String]
    operator: String
    filterMode: FilterMode
}

# Relay connections
type NarrativeConnection {
    pageInfo: PageInfo!
    edges: [NarrativeEdge]
}
type NarrativeEdge {
    cursor: String!
    node: Narrative!
}

# Queries
type Query {
    narrative(id: String!): Narrative @auth(for: [KNOWLEDGE])
    narratives(
        first: Int
        after: ID
        orderBy: NarrativesOrdering
        orderMode: OrderingMode
        filters: [NarrativesFiltering!]
        filterMode: FilterMode
        search: String
    ): NarrativeConnection @auth(for: [KNOWLEDGE])
}

# Mutations
input NarrativeAddInput {
    stix_id: String
    x_opencti_stix_ids: [String]
    name: String! @constraint(minLength: 2)
    description: String!
    aliases: [String]
    confidence: Int
    createdBy: String
    objectMarking: [String]
    objectLabel: [String]
    created: DateTime
    modified: DateTime
    clientMutationId: String
    update: Boolean
}
type Mutation {
    narrativeAdd(input: NarrativeAddInput!): Narrative @auth(for: [KNOWLEDGE_KNUPDATE])
}