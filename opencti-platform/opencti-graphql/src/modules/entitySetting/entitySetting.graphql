type TypeAttribute {
  name: String!
  builtIn: Boolean!
  mandatory: Boolean!
  label: String
}

type EntitySetting implements InternalObject & BasicObject {
  id: ID!
  entity_type: String! @auth
  standard_id: String! @auth
  parent_types: [String!]! @auth
  # EntitySetting
  target_type: String! @auth
  platform_entity_files_ref: Boolean @auth
  platform_hidden_type: Boolean @auth
  enforce_reference: Boolean @auth
  confidence_scale: String @auth(for: [SETTINGS])
  attributes_configuration: String @auth(for: [SETTINGS])
  mandatoryDefinitions: [TypeAttribute!]! @auth(for: [SETTINGS])
  mandatoryAttributes: [String!]! @auth
  availableSettings: [String!]! @auth
  created_at: DateTime! @auth
  updated_at: DateTime! @auth
}

# Ordering
enum EntitySettingsOrdering {
  target_type
}

# Filtering
enum EntitySettingsFilter {
  target_type
}

input EntitySettingsFiltering {
  key: [EntitySettingsFilter!]!
  values: [String]
  operator: String
  filterMode: FilterMode
}

# Relay connections
type EntitySettingConnection {
  pageInfo: PageInfo!
  edges: [EntitySettingEdge!]!
}
type EntitySettingEdge {
  cursor: String!
  node: EntitySetting!
}

# Queries
type Query {
  entitySetting(id: String!): EntitySetting @auth
  entitySettingByType(targetType: String!): EntitySetting @auth
  entitySettings(
    first: Int
    after: ID
    orderBy: EntitySettingsOrdering
    orderMode: OrderingMode
    filters: [EntitySettingsFiltering!]
    filterMode: FilterMode
    search: String
  ): EntitySettingConnection @auth
}

# Mutations
type Mutation {
  entitySettingsFieldPatch(ids: [ID!]!, input: [EditInput!]!, commitMessage: String, references: [String]): [EntitySetting] @auth(for: [SETTINGS])
}

# Subscriptions
type Subscription {
  entitySetting(id: ID!): EntitySetting @auth
}
