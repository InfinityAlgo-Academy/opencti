type PublicDashboard implements InternalObject & BasicObject {
  id: ID!
  entity_type: String!  @auth(for: [KNOWLEDGE, EXPLORE])
  standard_id: String!  @auth(for: [KNOWLEDGE, EXPLORE])
  parent_types: [String!]! @auth(for: [KNOWLEDGE, EXPLORE])
  # PublicDashboard
  name: String!
  description: String
  dashboard_id: String  @auth(for: [KNOWLEDGE, EXPLORE])
  user_id: String!  @auth(for: [KNOWLEDGE, EXPLORE])
  public_manifest: String
  private_manifest: String @auth(for: [KNOWLEDGE, EXPLORE])
  uri_key: String!
  allowed_markings_ids: [String!]  @auth(for: [KNOWLEDGE, EXPLORE])
  allowed_markings: [MarkingDefinitionShort!]  @auth(for: [KNOWLEDGE, EXPLORE])
  created_at: DateTime @auth(for: [KNOWLEDGE, EXPLORE])
  updated_at: DateTime @auth(for: [KNOWLEDGE, EXPLORE])
  editContext: [EditUserContext!]  @auth(for: [KNOWLEDGE, EXPLORE])
  authorized_members: [MemberAccess!]  @auth(for: [KNOWLEDGE, EXPLORE])
}

# Ordering
enum PublicDashboardsOrdering {
  name
  created_at
  updated_at
  creator
}

# Relay connections
type PublicDashboardConnection {
  pageInfo: PageInfo!
  edges: [PublicDashboardEdge!]!
}

# Queries
type Query {
  publicDashboard(id: String!): PublicDashboard  @auth(for: [KNOWLEDGE, EXPLORE])
  publicDashboards(
    first: Int
    after: ID
    orderBy: PublicDashboardsOrdering
    orderMode: OrderingMode
    filters: FilterGroup
    search: String
  ): PublicDashboardConnection @auth(for: [EXPLORE])
  publicDashboardByUriKey(uri_key: String!): PublicDashboard
  publicStixCoreObjectsNumber(
    startDate: DateTime
    endDate: DateTime
    uriKey: String!
    widgetId : String!
  ): Number
  publicStixRelationshipsNumber(
    uriKey: String!
    widgetId : String!
    startDate: DateTime
    endDate: DateTime
    dateAttribute: String
    authorId: String
    noDirection: Boolean
    onlyInferred: Boolean
    fromOrToId: [String]
    elementWithTargetTypes: [String]
    fromId: [String]
    fromRole: String
    fromTypes: [String]
    toId: [String]
    toRole: String
    toTypes: [String]
    relationship_type: [String]
    confidences: [Int]
    search: String
    dynamicFrom: FilterGroup
    dynamicTo: FilterGroup
  ): Number
  publicStixCoreObjectsMultiTimeSeries(
    startDate: DateTime
    endDate: DateTime
    uriKey: String!
    widgetId : String!
  ): [MultiTimeSeries]
  publicStixRelationshipsMultiTimeSeries(
    startDate: DateTime
    endDate: DateTime
    uriKey: String!
    widgetId : String!
  ): [MultiTimeSeries]
  publicStixCoreObjectsDistribution(
    uriKey: String!
    widgetId : String!
    startDate: DateTime
    endDate: DateTime
    relationship_type: [String]
    toTypes: [String]
    field: String!
    dateAttribute: String
    operation: StatsOperation!
    limit: Int
    order: String
    search: String
  ): [Distribution]
  publicStixRelationshipsDistribution(
    uriKey: String!
    widgetId : String!
    startDate: DateTime
    endDate: DateTime
    dateAttribute: String
    isTo: Boolean
    limit: Int
    order: String
    fromOrToId: [String]
    elementWithTargetTypes: [String]
    fromId: [String]
    fromRole: String
    fromTypes: [String]
    toId: [String]
    toRole: String
    toTypes: [String]
    relationship_type: [String]
    confidences: [Int]
    search: String
    dynamicFrom: FilterGroup
    dynamicTo: FilterGroup
    aggregateOnConnections: Boolean
  ): [Distribution]
  publicBookmarks(
    first: Int
    after: ID
    types: [String]
    uriKey: String!
    widgetId : String!
  ): StixDomainObjectConnection
  publicStixCoreObjects(
    uriKey: String!
    widgetId : String!
    first: Int
    after: ID
    orderBy: StixCoreObjectsOrdering
    orderMode: OrderingMode
  ): StixCoreObjectConnection
  publicStixRelationships(
    uriKey: String!
    widgetId : String!
    first: Int
    after: ID
    orderBy: StixRelationshipsOrdering
    orderMode: OrderingMode
    fromOrToId: String
    elementWithTargetTypes: [String]
    fromId: [String]
    fromRole: String
    fromTypes: [String]
    toId: [String]
    toRole: String
    toTypes: [String]
    relationship_type: [String]
    startTimeStart: DateTime
    startTimeStop: DateTime
    stopTimeStart: DateTime
    stopTimeStop: DateTime
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    startDate: DateTime
    endDate: DateTime
    confidences: [Int]
    search: String
    dynamicFrom: FilterGroup
    dynamicTo: FilterGroup
    stix: Boolean
  ): StixRelationshipConnection
}

type PublicDashboardEdge {
  cursor: String!
  node: PublicDashboard!
}

# Mutation
input PublicDashboardAddInput {
  name: String!
  description: String
  dashboard_id: String!
  allowed_markings_ids: [String!]
}

type Mutation {
  publicDashboardAdd(input: PublicDashboardAddInput!): PublicDashboard @auth(for: [EXPLORE_EXUPDATE_PUBLISH])
  publicDashboardDelete(id: ID!): ID @auth(for: [EXPLORE_EXUPDATE_PUBLISH])
  publicDashboardFieldPatch(id: ID!, input: [EditInput!]!): PublicDashboard @auth(for: [EXPLORE_EXUPDATE_PUBLISH])
}

