type CaseIncident implements BasicObject & StixObject & StixCoreObject & StixDomainObject & Container & Case {
  id: ID! # internal_id
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  # StixObject
  representative: Representative!
  x_opencti_stix_ids: [StixId]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  # inferences
  x_opencti_inferences: [Inference]
  # Stix Core Object
  createdBy: Identity
  numberOfConnectedElement: Int!
  objectMarking: MarkingDefinitionConnection
  objectOrganization: OrganizationConnection @auth(for: [KNOWLEDGE_KNUPDATE_KNORGARESTRICT])
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  containersNumber: Number
  containers(first: Int, entityTypes: [String!], elementId: [String]): ContainerConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  observedData(first: Int): ObservedDataConnection
  groupings(first: Int): GroupingConnection
  cases(first: Int): CaseConnection
  stixCoreRelationships(
    first: Int
    after: ID
    orderBy: StixCoreRelationshipsOrdering
    orderMode: OrderingMode
    fromId: StixRef
    toId: StixRef
    fromTypes: [String]
    toTypes: [String]
    relationship_type: String
    startTimeStart: DateTime
    startTimeStop: DateTime
    stopTimeStart: DateTime
    stopTimeStop: DateTime
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    confidences: [Int]
    search: String
    filters: [StixCoreRelationshipsFiltering]
    filterMode: FilterMode
  ): StixCoreRelationshipConnection
  stixCoreObjectsDistribution(
    relationship_type: [String]
    toTypes: [String]
    field: String!
    startDate: DateTime
    endDate: DateTime
    dateAttribute: String
    operation: StatsOperation!
    limit: Int
    order: String
    types: [String]
    filters: [StixCoreObjectsFiltering]
    filterMode: FilterMode
    search: String
  ): [Distribution] @auth(for: [KNOWLEDGE, EXPLORE])
  stixCoreRelationshipsDistribution(
    field: String!
    operation: StatsOperation!
    startDate: DateTime
    endDate: DateTime
    dateAttribute: String
    isTo: Boolean
    limit: Int
    order: String
    elementWithTargetTypes: [String]
    fromId: [String]
    fromRole: String
    fromTypes: [String]
    toId: [String]
    toRole: String
    toTypes: [String]
    relationship_type: [String]
    confidences: [Int]
    search: String
    filters: [StixCoreRelationshipsFiltering]
    filterMode: FilterMode
  ): [Distribution] @auth(for: [KNOWLEDGE, EXPLORE])
  # Stix Domain Object
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  objectAssignee: AssigneeConnection
  avatar: OpenCtiFile
  # Container
  objects(
    first: Int
    after: ID
    orderBy: StixObjectOrStixRelationshipsOrdering
    orderMode: OrderingMode
    filters: [StixObjectOrStixRelationshipsFiltering]
    filterMode: FilterMode
    search: String
    types: [String]
    all: Boolean
  ): StixObjectOrStixRelationshipRefConnection
  relatedContainers(
    first: Int
    after: ID
    orderBy: ContainersOrdering
    orderMode: OrderingMode
    filters: [ContainersFiltering]
    filterMode: FilterMode
    search: String
    types: [String]
    viaTypes: [String]
  ): ContainerConnection
  # Technical
  creators: [Creator!]
  toStix: String
  importFiles(first: Int, prefixMimeType: String): FileConnection
  pendingFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  editContext: [EditUserContext!]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  status: Status
  workflowEnabled: Boolean
  # Cases
  name: String!
  description: String
  content: String
  content_mapping: String
  tasks: TaskConnection!
  objectParticipant: ParticipantConnection
  # Incident Response
  rating: Int
  response_types: [String!]
  severity: String
  priority: String
}

# Ordering
enum CaseIncidentsOrdering {
  name
  created
  modified
  context
  severity
  priority
  created_at
  updated_at
  creator
  createdBy
  objectAssignee
  x_opencti_workflow_id
  confidence
  objectMarking
}

# Filtering
enum CaseIncidentsFilter {
  name
  created
  modified
  context
  created_at
  updated_at
  creator
  createdBy
  markedBy
  labelledBy
  assigneeTo
  participant
  x_opencti_workflow_id
  severity
  priority
  confidence
  source_reliability
}

input CaseIncidentsFiltering {
  key: [CaseIncidentsFilter!]!
  values: [String]
  operator: String
  filterMode: FilterMode
}

# Relay connections
type CaseIncidentConnection {
  pageInfo: PageInfo!
  edges: [CaseIncidentEdge]
}

type CaseIncidentEdge {
  cursor: String!
  node: CaseIncident!
}

# Queries
type Query {
  caseIncident(id: String!): CaseIncident @auth(for: [KNOWLEDGE])
  caseIncidents(
    first: Int
    after: ID
    orderBy: CaseIncidentsOrdering
    orderMode: OrderingMode
    filters: [CaseIncidentsFiltering!]
    filterMode: FilterMode
    search: String
    toStix: Boolean
  ): CaseIncidentConnection @auth(for: [KNOWLEDGE])
  caseIncidentContainsStixObjectOrStixRelationship(id: String!, stixObjectOrStixRelationshipId: String!): Boolean @auth(for: [KNOWLEDGE])
}

# Mutations
input CaseIncidentAddInput {
  stix_id: StixId
  x_opencti_stix_ids: [StixId]
  name: String! @constraint(minLength: 2)
  severity: String
  priority: String
  description: String
  content: String
  content_mapping: String
  confidence: Int
  revoked: Boolean
  lang: String
  objects: [String]
  createdBy: String
  objectMarking: [String]
  objectAssignee: [String]
  objectParticipant: [String]
  objectOrganization: [String]
  objectLabel: [String]
  externalReferences: [String]
  created: DateTime
  modified: DateTime
  file: Upload
  clientMutationId: String
  update: Boolean
  response_types: [String!]
  caseTemplates: [String!]
  x_opencti_workflow_id: String
}

type Mutation {
  caseIncidentAdd(input: CaseIncidentAddInput!): CaseIncident @auth
  caseIncidentDelete(id: ID!): ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
}
