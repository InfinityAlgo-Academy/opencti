enum CurrencyCode {
  afghan_afghani__afn
  albanian_lek__all
  algerian_dinar__dzd
  angolan_kwanza__aoa
  argentine_peso__ars
  armenian_dram__amd
  aruban_florin__awg
  australian_dollar__aud
  azerbaijani_manat__azn
  bahamian_dollar__bsd
  bahraini_dinar__bhd
  bangladeshi_taka__bdt
  barbados_dollar__bbd
  basic_attention_token__bat
  belarusian_ruble__byr
  belize_dollar__bzd
  bermudian_dollar__bmd
  bhutanese_ngultrum__btn
  binance_coin__bnb
  bitcoin__btc
  bitcoin_cash__bch
  bitcoin_gold__btg
  bitcoin_satoshi_vision__bsv
  boliviano__bob
  bolivian_mvdol__bov
  bosnia_and_herzegovina_convertible_mark__bam
  botswana_pula__bwp
  brazilian_real__brl
  brunei_dollar__bnd
  bulgarian_lev__bgn
  burundian_franc__bif
  cambodian_riel__khr
  canadian_dollar__cad
  cape_verde_escudo__cve
  cardano__ada
  cayman_islands_dollar__kyd
  cfa_franc_bceao__xof
  cfa_franc_beac__xaf
  cfp_franc__xpf
  chilean_peso__clp
  chinese_yuan__cny
  chinese_yuan_offshore__cnh
  colombian_peso__cop
  comoro_franc__kmf
  congolese_franc__cdf
  costa_rican_colon__crc
  croatian_kuna__hrk
  cuban_convertible_peso__cuc
  cuban_peso__cup
  czech_koruna__czk
  danish_krone__dkk
  dash__dash
  djiboutian_franc__djf
  dogecoin__doge
  dominican_peso__dop
  east_caribbean_dollar__xcd
  egyptian_pound__egp
  eritrean_nakfa__ern
  ethereum__eth
  ethereum_classic__etc
  ethiopian_birr__etb
  european_composite_unit__xba
  european_monetary_unit__xbb
  european_unit_of_account_17__xbd
  european_unit_of_account_9__xbc
  euro__eur
  falkland_islands_pound__fkp
  fiji_dollar__fjd
  gambian_dalasi__gmd
  georgian_lari__gel
  ghanaian_cedi__ghs
  gibraltar_pound__gip
  gold__xau
  guatemalan_quetzal__gtq
  guinean_franc__gnf
  guyanese_dollar__gyd
  haitian_gourde__htg
  honduran_lempira__hnl
  hong_kong_dollar__hkd
  hungarian_forint__huf
  icelandic_krona__isk
  indian_rupee__inr
  indonesian_rupiah__idr
  iranian_rial__irr
  iraqi_dinar__iqd
  israeli_new_shekel__ils
  jamaican_dollar__jmd
  japanese_yen__jpy
  jordanian_dinar__jod
  kazakhstani_tenge__kzt
  kenyan_shilling__kes
  kuwaiti_dinar__kwd
  kyrgyzstani_som__kgs
  lao_kip__lak
  latvian_lats__lvl
  lebanese_pound__lbp
  lesotho_loti__lsl
  liberian_dollar__lrd
  libyan_dinar__lyd
  lisk__lsk
  lithuanian_litas__ltl
  macanese_pataca__mop
  macedonian_denar__mkd
  malagasy_ariary__mga
  malawian_kwacha__mwk
  malaysian_ringgit__myr
  maldivian_rufiyaa__mvr
  mauritanian_ouguiya__mro
  mauritian_rupee__mur
  mexican_peso__mxn
  mexican_unidad_de_inversion__mxv
  moldovan_leu__mdl
  monero__xmr
  mongolian_tugrik__mnt
  moroccan_dirham__mad
  mozambican_metical__mzn
  myanma_kyat__mmk
  namibian_dollar__nad
  neo__neo
  nepalese_rupee__npr
  netherlands_antillean_guilder__ang
  new_taiwan_dollar__twd
  new_zealand_dollar__nzd
  nicaraguan_cordoba__nio
  nigerian_naira__ngn
  north_korean_won__kpw
  norwegian_krone__nok
  omani_rial__omr
  omisego__omg
  pakistani_rupee__pkr
  palladium__xpd
  panamanian_balboa__pab
  papua_new_guinean_kina__pgk
  paraguayan_guarani__pyg
  pence_sterling_british_penny__gbx
  peruvian_nuevo_sol__pen
  philippine_peso__php
  platinum__xpt
  polish_z_oty__pln
  pound_sterling__gbp
  qatari_riyal__qar
  qtum__qtum
  ripple__xrp
  romanian_new_leu__ron
  russian_rouble__rub
  rwandan_franc__rwf
  saint_helena_pound__shp
  samoan_tala__wst
  sao_tome_and_principe_dobra__std
  saudi_riyal__sar
  serbian_dinar__rsd
  seychelles_rupee__scr
  sierra_leonean_leone__sll
  silver__xag
  singapore_dollar__sgd
  solomon_islands_dollar__sbd
  somali_shilling__sos
  south_african_rand__zar
  south_korean_won__krw
  south_sudanese_pound__ssp
  special_drawing_rights__xdr
  sri_lankan_rupee__lkr
  stellar_lumen__xlm
  sudanese_pound__sdg
  surinamese_dollar__srd
  swazi_lilangeni__szl
  swedish_krona_kronor__sek
  swiss_franc__chf
  syrian_pound__syp
  tajikistani_somoni__tjs
  tanzanian_shilling__tzs
  tehterus__usdt
  thai_baht__thb
  tongan_paanga__top
  trinidad_and_tobago_dollar__ttd
  tunisian_dinar__tnd
  turkish_lira__try
  turkmenistani_manat__tmt
  ugandan_shilling__ugx
  uic_franc__xfu
  ukrainian_hryvnia__uah
  unidad_de_fomento__clf
  unidad_de_valor_real__cou
  united_arab_emirates_dirham__aed
  united_states_dollar__usd
  uruguayan_peso__uyu
  uruguay_peso_en_unidades_indexadas__uyi
  uzbekistan_som__uzs
  vanuatu_vatu__vuv
  venezuelan_bolivar_fuerte__vef
  vietnamese_dong__vnd
  wir_euro__che
  wir_franc__chw
  yemeni_rial__yer
  zambian_kwacha__zmw
  zcash__zec
}
enum FinancialAccountStatus {
  active
  inactive
  on_hold
}
enum FinancialAccountType {
  credit_credit_card
  depository_cash_management
  depository_certificate_of_deposit_cd
  depository_checking
  depository_electronic_benefit_transfer_ebt
  depository_health_savings_account_hsa
  depository_money_market
  depository_prepaid_debit_card
  depository_savings
  digital_wallet
  investment_401a
  investment_401k
  investment_403b
  investment_457b
  investment_529
  investment_brokerage
  investment_cash_individual_savings_account_isa
  investment_education_savings_account
  investment_fixed_annuity
  investment_guaranteed_investment_certificate_gic
  investment_health_reimbursement_arrangement
  investment_health_savings_account_hsa
  investment_individual_retirement_account_ira
  investment_individual_savings_account_isa
  investment_keogh
  investment_life_income_fund_lif
  investment_life_insurance
  investment_locked_in_retirement_account_lira
  investment_locked_in_retirement_income_fund_lrif
  investment_locked_in_retirement_savings_plan_lrsp
  investment_mutual_fund
  investment_non_taxable_brokerage_account
  investment_other_annuity
  investment_other_insurance
  investment_other
  investment_pension
  investment_prescribed_registered_retirement_income_fund_prif
  investment_profit_sharing_plan
  investment_qualifying_share_account_qshr
  investment_registered_disability_savings_plan_rdsp
  investment_registered_education_savings_plan_resp
  investment_registered_retirement_income_fund_rrif
  investment_registered_retirement_savings_plan_rrsp
  investment_restricted_life_income_fund_rlif
  investment_retirement
  investment_roth_401k
  investment_roth
  investment_salary_reduction_simplified_employee_pension_plan_sarsep
  investment_self_invested_personal_pension_sipp
  investment_simple_individual_retirement_account_ira
  investment_simplified_employee_pension_sep_individual_retirement_account_ira
  investment_stock_plan
  investment_tax_free_savings_account_tfsa
  investment_thrift_savings_plan
  investment_trust
  investment_uniform_gift_to_minors_act_ugma
  investment_uniform_transfers_to_minors_act_utma
  investment_variable_annuity
  loan_auto
  loan_business
  loan_commercial
  loan_construction
  loan_consumer
  loan_home_equity
  loan_line_of_credit
  loan_loan
  loan_mortgage
  loan_other
  loan_overdraft
  loan_student
  payroll
  recurring
  rewards
  safe_deposit
  virtual_currency
}
type FinancialAccountBalance {
  index: Int
  as_of_date: DateTime
  balance: Float
}
input FinancialAccountBalanceInput {
  as_of_date: DateTime
  balance: Float
}
enum FinancialAssetType {
  airplane
  boat
  car
  company
  domain_name
  real_estate
  digital
  other
}

# Entities
type FinancialAccount implements BasicObject & StixObject & StixCoreObject & StixDomainObject {
  id: ID! # internal_id
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  # StixObject
  x_opencti_stix_ids: [StixId]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  # inferences
  x_opencti_inferences: [Inference]
  # StixCoreObject
  representative: Representative!
  createdBy: Identity
  numberOfConnectedElement: Int!
  objectMarking: MarkingDefinitionConnection
  objectOrganization: OrganizationConnection
    @auth(for: [KNOWLEDGE_KNUPDATE_KNORGARESTRICT])
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  containersNumber: Number
  containers(first: Int, entityTypes: [String!], elementId: [String]): ContainerConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  observedData(first: Int): ObservedDataConnection
  groupings(first: Int): GroupingConnection
  cases(first: Int): CaseConnection
  stixCoreRelationships(
    first: Int
    after: ID
    orderBy: StixCoreRelationshipsOrdering
    orderMode: OrderingMode
    fromId: StixRef
    toId: StixRef
    fromTypes: [String]
    toTypes: [String]
    relationship_type: String
    startTimeStart: DateTime
    startTimeStop: DateTime
    stopTimeStart: DateTime
    stopTimeStop: DateTime
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    confidences: [Int]
    search: String
    filters: [StixCoreRelationshipsFiltering]
    filterMode: FilterMode
  ): StixCoreRelationshipConnection
  stixCoreObjectsDistribution(
    relationship_type: [String]
    toTypes: [String]
    field: String!
    startDate: DateTime
    endDate: DateTime
    dateAttribute: String
    operation: StatsOperation!
    limit: Int
    order: String
    types: [String]
    filters: [StixCoreObjectsFiltering]
    filterMode: FilterMode
    search: String
  ): [Distribution] @auth(for: [KNOWLEDGE, EXPLORE])
  stixCoreRelationshipsDistribution(
    field: String!
    operation: StatsOperation!
    startDate: DateTime
    endDate: DateTime
    dateAttribute: String
    isTo: Boolean
    limit: Int
    order: String
    elementWithTargetTypes: [String]
    fromId: [String]
    fromRole: String
    fromTypes: [String]
    toId: [String]
    toRole: String
    toTypes: [String]
    relationship_type: [String]
    confidences: [Int]
    search: String
    filters: [StixCoreRelationshipsFiltering]
    filterMode: FilterMode
  ): [Distribution] @auth(for: [KNOWLEDGE, EXPLORE])
  # StixDomainObject
  x_opencti_photo_ref: String
  x_opencti_photo_refs: [String]
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  objectAssignee: AssigneeConnection
  avatar: OpenCtiFile
  x_opencti_files(prefixMimeType: String): [OpenCtiFile!]
  status: Status
  workflowEnabled: Boolean
  # Technical
  creators: [Creator!]
  toStix: String
  importFiles(first: Int, prefixMimeType: String): FileConnection
  pendingFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  editContext: [EditUserContext!]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  # Financial Account
  currency_code: CurrencyCode
  name: String!
  financial_account_number: String
  financial_account_status: FinancialAccountStatus
  financial_account_type: FinancialAccountType
  financial_account_balances: [FinancialAccountBalance!]
  international_bank_account_number: String
}
type FinancialAsset implements BasicObject & StixObject & StixCoreObject & StixDomainObject {
  id: ID! # internal_id
  standard_id: String!
  entity_type: String!
  parent_types: [String]!
  # StixObject
  x_opencti_stix_ids: [StixId]
  is_inferred: Boolean!
  spec_version: String!
  created_at: DateTime!
  updated_at: DateTime!
  # inferences
  x_opencti_inferences: [Inference]
  # StixCoreObject
  representative: Representative!
  createdBy: Identity
  numberOfConnectedElement: Int!
  objectMarking: MarkingDefinitionConnection
  objectOrganization: OrganizationConnection
    @auth(for: [KNOWLEDGE_KNUPDATE_KNORGARESTRICT])
  objectLabel: LabelConnection
  externalReferences(first: Int): ExternalReferenceConnection
  containersNumber: Number
  containers(first: Int, entityTypes: [String!], elementId: [String]): ContainerConnection
  reports(first: Int): ReportConnection
  notes(first: Int): NoteConnection
  opinions(first: Int): OpinionConnection
  observedData(first: Int): ObservedDataConnection
  groupings(first: Int): GroupingConnection
  cases(first: Int): CaseConnection
  stixCoreRelationships(
    first: Int
    after: ID
    orderBy: StixCoreRelationshipsOrdering
    orderMode: OrderingMode
    fromId: StixRef
    toId: StixRef
    fromTypes: [String]
    toTypes: [String]
    relationship_type: String
    startTimeStart: DateTime
    startTimeStop: DateTime
    stopTimeStart: DateTime
    stopTimeStop: DateTime
    firstSeenStart: DateTime
    firstSeenStop: DateTime
    lastSeenStart: DateTime
    lastSeenStop: DateTime
    confidences: [Int]
    search: String
    filters: [StixCoreRelationshipsFiltering]
    filterMode: FilterMode
  ): StixCoreRelationshipConnection
  stixCoreObjectsDistribution(
    relationship_type: [String]
    toTypes: [String]
    field: String!
    startDate: DateTime
    endDate: DateTime
    dateAttribute: String
    operation: StatsOperation!
    limit: Int
    order: String
    types: [String]
    filters: [StixCoreObjectsFiltering]
    filterMode: FilterMode
    search: String
  ): [Distribution] @auth(for: [KNOWLEDGE, EXPLORE])
  stixCoreRelationshipsDistribution(
    field: String!
    operation: StatsOperation!
    startDate: DateTime
    endDate: DateTime
    dateAttribute: String
    isTo: Boolean
    limit: Int
    order: String
    elementWithTargetTypes: [String]
    fromId: [String]
    fromRole: String
    fromTypes: [String]
    toId: [String]
    toRole: String
    toTypes: [String]
    relationship_type: [String]
    confidences: [Int]
    search: String
    filters: [StixCoreRelationshipsFiltering]
    filterMode: FilterMode
  ): [Distribution] @auth(for: [KNOWLEDGE, EXPLORE])
  # StixDomainObject
  x_opencti_photo_ref: String
  x_opencti_photo_refs: [String]
  revoked: Boolean!
  confidence: Int
  lang: String
  created: DateTime
  modified: DateTime
  x_opencti_graph_data: String
  objectAssignee: AssigneeConnection
  avatar: OpenCtiFile
  x_opencti_files(prefixMimeType: String): [OpenCtiFile!]
  status: Status
  workflowEnabled: Boolean
  # Technical
  creators: [Creator!]
  toStix: String
  importFiles(first: Int, prefixMimeType: String): FileConnection
  pendingFiles(first: Int): FileConnection
  exportFiles(first: Int): FileConnection
  editContext: [EditUserContext!]
  connectors(onlyAlive: Boolean): [Connector]
  jobs(first: Int): [Work]
  # Financial Asset
  name: String!
  asset_type: FinancialAssetType
  asset_value: Int
  currency_code: CurrencyCode
}

# Ordering
enum FinancialAccountOrdering {
  name
  financial_account_number
  financial_account_status
  financial_account_type
  international_bank_account_number
  created
  modified
  created_at
  updated_at
  objectMarking
  objectLabel
}
enum FinancialAssetOrdering {
  name
  asset_type
  asset_value
  created
  modified
  created_at
  updated_at
  objectMarking
  objectLabel
}

# Filtering
enum FinancialAccountFilter {
  currency_code
  name
  financial_account_number
  financial_account_status
  financial_account_type
  international_bank_account_number
  created
  modified
  created_at
  updated_at
  createdBy
}
input FinancialAccountFiltering {
  key: [FinancialAccountFilter!]!
  values: [String]
  operator: String
  filterMode: FilterMode
}
enum FinancialAssetFilter {
  name
  asset_type
  asset_value
  created
  modified
  created_at
  updated_at
  createdBy
}
input FinancialAssetFiltering {
  key: [FinancialAssetFilter!]!
  values: [String]
  operator: String
  filterMode: FilterMode
}

# Relay Connections
type FinancialAccountConnection {
  pageInfo: PageInfo!
  edges: [FinancialAccountEdge!]
}
type FinancialAccountEdge {
  cursor: String!
  node: FinancialAccount!
}
type FinancialAssetConnection {
  pageInfo: PageInfo!
  edges: [FinancialAssetEdge!]
}
type FinancialAssetEdge {
  cursor: String!
  node: FinancialAsset!
}

union FinancialData = FinancialAccount | FinancialAsset

# Queries
type Query {
  financialAccount(id: ID!): FinancialAccount @auth(for: [KNOWLEDGE])
  financialAccounts(
    first: Int
    after: ID
    orderBy: FinancialAccountOrdering
    orderMode: OrderingMode
    filters: [FinancialAccountFiltering!]
    filterMode: FilterMode
    search: String
  ): FinancialAccountConnection @auth(for: [KNOWLEDGE])
  financialAsset(id: ID!): FinancialAsset @auth(for: [KNOWLEDGE])
  financialAssets(
    first: Int
    after: ID
    orderBy: FinancialAssetOrdering
    orderMode: OrderingMode
    filters: [FinancialAssetFiltering!]
    filterMode: FilterMode
    search: String
  ): FinancialAssetConnection @auth(for: [KNOWLEDGE])
}

# Mutations
input FinancialAccountAddInput {
  currency_code: CurrencyCode
  name: String! @constraint(minLength: 2)
  financial_account_number: String
  financial_account_status: FinancialAccountStatus
  financial_account_type: FinancialAccountType
  financial_account_balances: [FinancialAccountBalanceInput]
  international_bank_account_number: String
  createdBy: String
  objectMarking: [String]
  objectOrganization: [String]
  objectLabel: [String]
  externalReferences: [String]
}
input FinancialAccountUpdateInput {
  id: ID! # internal_id
  currency_code: CurrencyCode
  name: String @constraint(minLength: 2)
  financial_account_number: String
  financial_account_status: FinancialAccountStatus
  financial_account_type: FinancialAccountType
  financial_account_balances: [FinancialAccountBalanceInput]
  international_bank_account_number: String
}
input FinancialAssetAddInput {
  name: String! @constraint(minLength: 2)
  asset_type: FinancialAssetType
  asset_value: Int
  currency_code: CurrencyCode
  createdBy: String
  objectMarking: [String]
  objectOrganization: [String]
  objectLabel: [String]
  externalReferences: [String]
}
input FinancialAssetUpdateInput {
  id: ID! # internal_id
  name: String @constraint(minLength: 2)
  asset_type: FinancialAssetType
  asset_value: Int
  currency_code: CurrencyCode
}
type Mutation {
  financialAccountAdd(input: FinancialAccountAddInput!): FinancialAccount @auth(for: [KNOWLEDGE_KNUPDATE])
  financialAccountUpdate(input: FinancialAccountUpdateInput!): FinancialAccount @auth(for: [KNOWLEDGE_KNUPDATE])
  financialAccountDelete(id: ID!): ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  financialAccountFieldPatch(id: ID!, input: [EditInput]!, commitMessage: String, references: [String]): FinancialAccount @auth(for: [KNOWLEDGE_KNUPDATE])
  financialAccountContextPatch(id: ID!, input: EditContext!): FinancialAccount @auth(for: [KNOWLEDGE_KNUPDATE])
  financialAccountContextClean(id: ID!): FinancialAccount @auth(for: [KNOWLEDGE_KNUPDATE])
  financialAccountRelationAdd(id: ID!, input: StixRefRelationshipAddInput!): StixRefRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  financialAccountRelationDelete(id: ID!, toId: StixRef!, relationship_type: String!): FinancialAccount @auth(for: [KNOWLEDGE_KNUPDATE])
  financialAssetAdd(input: FinancialAssetAddInput!): FinancialAsset @auth(for: [KNOWLEDGE_KNUPDATE])
  financialAssetUpdate(input: FinancialAssetUpdateInput!): FinancialAsset @auth(for: [KNOWLEDGE_KNUPDATE])
  financialAssetDelete(id: ID!): ID @auth(for: [KNOWLEDGE_KNUPDATE_KNDELETE])
  financialAssetContextPatch(id: ID!, input: EditContext!): FinancialAsset @auth(for: [KNOWLEDGE_KNUPDATE])
  financialAssetContextClean(id: ID!): FinancialAsset @auth(for: [KNOWLEDGE_KNUPDATE])
  financialAssetRelationAdd(id: ID!, input: StixRefRelationshipAddInput!): StixRefRelationship @auth(for: [KNOWLEDGE_KNUPDATE])
  financialAssetRelationDelete(id: ID!, toId: StixRef!, relationship_type: String!): FinancialAsset @auth(for: [KNOWLEDGE_KNUPDATE])
}