import { addMalware, findAll, findById } from '../domain/malware';
import {
  stixDomainObjectAddRelation,
  stixDomainObjectCleanContext,
  stixDomainObjectDelete,
  stixDomainObjectDeleteRelation,
  stixDomainObjectEditContext,
  stixDomainObjectEditField,
} from '../domain/stixDomainObject';
import { RELATION_KILL_CHAIN_PHASE } from '../schema/stixRefRelationship';
import { batchLoader } from '../database/middleware';
import { batchInternalRels } from '../domain/stixCoreObject';

const relBatchLoader = batchLoader(batchInternalRels);

const malwareResolvers = {
  Query: {
    malware: (_, { id }, context) => findById(context, context.user, id),
    malwares: (_, args, context) => findAll(context, context.user, args),
  },
  Malware: {
    killChainPhases: (malware, _, context) => relBatchLoader.load({ element: malware, type: RELATION_KILL_CHAIN_PHASE }, context, context.user),
  },
  Mutation: {
    malwareEdit: (_, { id }, context) => ({
      delete: () => stixDomainObjectDelete(context, context.user, id),
      fieldPatch: ({ input, commitMessage, references }) => stixDomainObjectEditField(context, context.user, id, input, { commitMessage, references }),
      contextPatch: ({ input }) => stixDomainObjectEditContext(context, context.user, id, input),
      contextClean: () => stixDomainObjectCleanContext(context, context.user, id),
      relationAdd: ({ input }) => stixDomainObjectAddRelation(context, context.user, id, input),
      relationDelete: ({ toId, relationship_type: relationshipType }) => stixDomainObjectDeleteRelation(context, context.user, id, toId, relationshipType),
    }),
    malwareAdd: (_, { input }, context) => addMalware(context, context.user, input),
  },
};

export default malwareResolvers;
