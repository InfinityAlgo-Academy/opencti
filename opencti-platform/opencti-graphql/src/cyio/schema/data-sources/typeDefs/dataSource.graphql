# declares the query entry-points for this type
extend type Query {
  dataSource(id: ID!): DataSource @hasPermission(resources: "DataSource:view")
  dataSources(
    first: Int
    offset: Int
    orderedBy: DataSourceOrdering
    orderMode: OrderingMode
    filters: [DataSourceFiltering]
    filterMode: FilterMode
    search: String @constraint(minLength: 2)
  ): DataSourceConnection @hasPermission(resources: "DataSource:view")
}

# declares the mutation entry-points for this type
extend type Mutation {
  deleteDataSources(ids: [ID!]!): [ID]  @hasPermission(resources: "DataSource:delete")
  createDataSource(input: DataSourceInput): DataSource  @hasPermission(resources: "DataSource:update")
  deleteDataSource(id: ID!): String! @hasPermission(resources: "DataSource:delete")
  editDataSource(id: ID!, input: [EditInput]!, commitMessage: String): DataSource @hasPermission(resources: "DataSource:update")
  # Data Source Management
  startDataSource(id: ID!): DataSource  @hasPermission(resources: "DataSource:manage-state")
  pauseDataSource(id: ID!): DataSource  @hasPermission(resources: "DataSource:manage-state")
  resetDataSource(id: ID!): DataSource  @hasPermission(resources: "DataSource:manage-state")
}

"""
DataSource defines the information required to describe a data source.
"""
type DataSource implements BasicObject & LifecycleObject {
  # BasicObject
  "Uniquely identifies this object."
  id: ID!
  "Identifies the identifier defined by the standard."
  standard_id: String!
  "Identifies the type of the Object."
  entity_type: String!
  "Identifies the parent types of this object."
  parent_types: [String]!
  # LifecycleObject
  "Identities the date and time at which the object was originally created."
  created: Timestamp!
  "Identifies the date and time at which the object was last modified."
  modified: Timestamp!
  # Data Source
  "Identifies the name of the product"
  name: String!
  "Identifies the name used to display to users"
  display_name: String
  "Identifies a human-readable description of the data source"
  description: String
  "Identifies the type of data source"
  data_source_type: DataSourceType!
  "Identifies the current status of the data source"
  status: DataSourceStatus!
  "Identifies if the data is contextual"
  contextual: Boolean!
  "Identifies whether collection is automatically triggered"
  auto: Boolean!
  "Identifies the types of information represented in the ingested data"
  scope: [String]
  "Indicates the frequency at which the Connector should attempt to ingest data from an external source"
  update_frequency: FrequencyTiming
  "Identifies the last time the data source successfully executed"
  last_success: DateTime
  "Identifies an artifact that represents a where to the next query should resume.  This must be a string even if its a number."
  last_ingest_artifact: String
  "Indicates the information necessary to make a connection to the external source."
  connection_information: ConnectionInformation
  "Identifies the Information Exchange Policy that must be applied to any data ingested."
  iep: IEPMarking
  "Identifies the recent activities of the data source"
  activities(since: DateTime): [IngestActivity]
  "Identifies a list of CyioExternalReferences, each of which refers to information external to the data model. This property is used to provide one or more URLs, descriptions, or IDs to records in other systems."
  external_references: [CyioExternalReference]
  "Identifies one or more references to additional commentary on the Model."
  notes: [CyioNote]
}

input DataSourceInput {
  # Data Source
  "Identifies the name of the product"
  name: String!
  "Identifies a human-readable description of the data source"
  description: String
  "Identifies the type of data source"
  data_source_type: DataSourceType!
  "Identifies the current status of the data source"
  status: DataSourceStatus!
  "Identifies if the data is contextual"
  contextual: Boolean!
  "Identifies whether collection is automatically triggered"
  auto: Boolean!
  "Identifies the types of information represented in the ingested data"
  scope: [String]
  "Indicates the frequency at which the Connector should attempt to ingest data from an external source"
  update_frequency: FrequencyTimingAddInput
  "Indicates the information necessary to make a connection to the external source."
  connection_information: ConnectionInformationInput!
  "Identifies the Information Exchange Policy that must be applied to any data ingested."
  iep: ID
}


# Data Source Status
"""
DataSourceStatus field provides an indication about the state of the Data Source.
 - ACTIVE indicates the Data Source will actively attempt to ingest data.
 - INACTIVE indicates the Data Source will not actively attempt to ingest data.
 - NOT_APPLICABLE indicates that the Data Source is typically manual and does not have an active state.
"""
enum DataSourceStatus {
  "Indicates the data source is active"
  ACTIVE
  "Indicates the data source is Inactive"
  INACTIVE
  "Indicates the data source is not applicable"
  NOT_APPLICABLE
}

# Data Source Type
"""
DataSourceType provides an indication about the type of the Data Source
  - EXTERNAL_IMPORT indicates the Data Source ingests information from an 
    external entity or service and import it into Cyio.
  - EXTERNAL_IMPORT_FILE indicates the Data Source downloads a file from an
    external entity or service and extracts information to be ingested it 
    into Cyio.
  - INTERNAL_ENRICHMENT indicates the Data Source reaches to an external 
    lookup services to retrieve information about a specific entity that increases 
    the knowledge of that object in Cyio.  An example would be a whois lookup for an
    IP address.
  - INTERNAL_IMPORT_FILE indicates the Data Source ingests information from an 
    uploaded file can be extracted and ingested into Cyio.
  - STREAM indicates the Data Source connects to a data stream and continuously 
    ingests the retrieved information into Cyio. When used in combination with EDR 
    systems like Tanium, the connector is also able to answer the originating system 
    and turn this into a two way interaction between another system and Cyio.
"""
enum DataSourceType {
  "Import of information via API from an external source"
  EXTERNAL_IMPORT
  "Import of information via file form an external source"
  EXTERNAL_IMPORT_FILE
  "Internal import of information for about a specific entity from an external lookup service."
  INTERNAL_ENRICHMENT
  "Internal import of data from an uploaded file"
  INTERNAL_IMPORT_FILE
  # "Internal export of data contained in Cyio into different file formats"
  # INTERNAL_EXPORT_FILE
  "Connect to a data stream an continuously ingest the retrieved information information"
  STREAM
}


# Ordering
enum DataSourceOrdering {
  "Created"
  created
  "Modified"
  modified
  "Display Name"
  display_name
  "Type"
  data_source_type
  "Name"
  name
  "Status"
  status
}

# Filtering Enumerations
enum DataSourceFilter {
  "Created"
  created
  "Modified"
  modified
  "Display Name"
  display_name
  "Data Source Type"
  data_source_type
  "Name"
  name
  "Status"
  status
}

input DataSourceFiltering {
  key: DataSourceFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}

# Pagination Types
type DataSourceConnection {
  pageInfo: PageInfo!
  edges: [DataSourceEdge]
}
type DataSourceEdge {
  cursor: String!
  node: DataSource!
}

