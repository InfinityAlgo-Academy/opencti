  # Query Extensions
  extend type Query {
    softwareAssetList(
        first: Int
        offset: Int
        orderedBy: SoftwareAssetOrdering
        orderMode: OrderingMode
        filters: [SoftwareAssetFiltering]
        filterMode: FilterMode
        search: String
      ): SoftwareAssetConnection
    softwareAsset(id: ID!): SoftwareAsset
  }

  extend type Mutation {
    createSoftwareAsset(input: SoftwareAssetAddInput): SoftwareAsset
    deleteSoftwareAsset(id: ID!): String!
    editSoftwareAsset(id: ID!, input: [EditInput]!, commitMessage: String): SoftwareAsset
    createOperatingSystemAsset(input: OperatingSystemAssetAddInput): OperatingSystemAsset
    deleteOperatingSystemAsset(id: ID!): String!
    editOperatingSystemAsset(id: ID!, input: [EditInput]!, commitMessage: String): OperatingSystemAsset
    createApplicationSoftwareAsset(input: OperatingSystemAssetAddInput): ApplicationSoftwareAsset
    deleteApplicationSoftwareAsset(id: ID!): String!
    editApplicationSoftwareAsset(id: ID!, input: [EditInput]!, commitMessage: String): ApplicationSoftwareAsset
  }


  # Query Types
  "Defines identifying information about an instance of software."
  type SoftwareAsset implements BasicObject & LifecycleObject & CoreObject & Asset & ItAsset {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # CoreObject
    created: Timestamp
    modified: Timestamp
    labels: [String]
    # Asset
    asset_id: String
    name: String!
    description: String
    locations: [AssetLocation]
    external_references( first: Int ): CyioExternalReferenceConnection
    notes( first: Int ): CyioNoteConnection
    # ItAsset
    asset_tag: String
    asset_type: AssetType!
    serial_number: String
    vendor_name: String
    version: String
    release_date: Timestamp
    implementation_point: ImplementationPoint
    operational_status: OperationalStatus
    # responsible_parties: [ResponsibleParty]
    # SoftwareAsset
    function: String
    cpe_identifier: String
    software_identifier: String
    patch_level: String
    installation_id: String
    license_key: String
    is_publicly_accessible: Boolean
    is_scanned: Boolean
    last_scanned: Timestamp
}

  "Defines identifying information about an instance of operating system software."
  type OperatingSystemAsset implements BasicObject & LifecycleObject & CoreObject & Asset & ItAsset {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # CoreObject
    created: Timestamp
    modified: Timestamp
    labels: [String]
    # Asset
    asset_id: String
    name: String!
    description: String
    locations: [AssetLocation]
    external_references( first: Int ): CyioExternalReferenceConnection
    notes( first: Int ): CyioNoteConnection
    # ItAsset
    asset_tag: String
    asset_type: AssetType!
    serial_number: String
    vendor_name: String
    version: String
    release_date: Timestamp
    implementation_point: ImplementationPoint
    operational_status: OperationalStatus
    # responsible_parties: [ResponsibleParty]
    # SoftwareAsset
    function: String
    cpe_identifier: String
    software_identifier: String
    patch_level: String
    installation_id: String
    license_key: String
    is_publicly_accessible: Boolean
    is_scanned: Boolean
    last_scanned: Timestamp
    # Operating SystemAsset
    family: FamilyType
  }

  "Defines identifying information about an instance of application software."
  type ApplicationSoftwareAsset implements BasicObject & LifecycleObject & CoreObject & Asset & ItAsset {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # CoreObject
    created: Timestamp
    modified: Timestamp
    labels: [String]
    # Asset
    asset_id: String
    name: String!
    description: String
    locations: [AssetLocation]
    external_references( first: Int ): CyioExternalReferenceConnection
    notes( first: Int ): CyioNoteConnection
    # ItAsset
    asset_tag: String
    asset_type: AssetType!
    serial_number: String
    vendor_name: String
    version: String
    release_date: Timestamp
    implementation_point: ImplementationPoint
    operational_status: OperationalStatus
    # responsible_parties: [ResponsibleParty]
    # SoftwareAsset
    function: String
    cpe_identifier: String
    software_identifier: String
    patch_level: String
    installation_id: String
    license_key: String
    is_publicly_accessible: Boolean
    is_scanned: Boolean
    last_scanned: Timestamp
}

  # Mutation Types
  input SoftwareAssetAddInput {
    labels: [String]
    # Asset
    asset_id: String
    name: String!
    description: String
    # ItAsset
    asset_tag: String
    asset_type: AssetType!
    serial_number: String
    vendor_name: String
    version: String
    release_date: Timestamp
    implementation_point: ImplementationPoint
    operational_status: OperationalStatus
    # responsible_parties: [ResponsibleParty]
    # SoftwareAsset
    function: String
    cpe_identifier: String
    software_identifier: String
    patch_level: String
    installation_id: String
    license_key: String
    is_publicly_accessible: Boolean
    is_scanned: Boolean
    last_scanned: Timestamp
  }

  input OperatingSystemAssetAddInput {
    labels: [String]
    # Asset
    asset_id: String
    name: String!
    description: String
    # ItAsset
    asset_tag: String
    asset_type: AssetType!
    serial_number: String
    vendor_name: String
    version: String
    release_date: Timestamp
    implementation_point: ImplementationPoint
    operational_status: OperationalStatus
    # responsible_parties: [ResponsibleParty]
    # SoftwareAsset
    function: String
    cpe_identifier: String
    software_identifier: String
    patch_level: String
    installation_id: String
    license_key: String
    is_publicly_accessible: Boolean
    is_scanned: Boolean
    last_scanned: Timestamp
    # Operating SystemAsset
    family: FamilyType
  }

  input ApplicationSoftwareAssetAddInput {
    labels: [String]
    # Asset
    asset_id: String
    name: String!
    description: String
    # ItAsset
    asset_tag: String
    asset_type: AssetType!
    serial_number: String
    vendor_name: String
    version: String
    release_date: Timestamp
    implementation_point: ImplementationPoint
    operational_status: OperationalStatus
    # responsible_parties: [ResponsibleParty]
    # SoftwareAsset
    function: String
    cpe_identifier: String
    software_identifier: String
    patch_level: String
    installation_id: String
    license_key: String
    is_publicly_accessible: Boolean
    is_scanned: Boolean
    last_scanned: Timestamp
  }

  enum FamilyType {
    "Windows"
    windows
    "Linux"
    linux
    "MacOS"
    macos
    "Other"
    other
  }

  # Pagination Types
  type SoftwareAssetConnection {
    pageInfo: PageInfo!
    edges: [SoftwareAssetEdge]
  }

  type SoftwareAssetEdge {
    cursor: String!
    node: SoftwareAsset!
  }

  # Slicing Types
  enum SoftwareAssetOrdering {
    "Name"
    name
    "Asset Type"
    asset_type
    "Asset ID"
    asset_id
    "Labels"
    labels
    "Vendor Name"
    vendor_name
  }

  # Filtering Types
  input SoftwareAssetFiltering {
    key: SoftwareAssetFilter!
    values: [String]
    operator: String
    filterMode: FilterMode 
  }

  "Defines the list of fields that can be filtered upon for Software Assets."
  enum SoftwareAssetFilter {
    "Created"
    created       # Created before/Created after (key: created, values: ["2021-11-10"], operator: "gt|lt")
    "Modified"
    modified      # Modified before/Mreated after (key: created, values: ["2021-11-10"], operator: "gt|lt")
    "Name"
    name          # Name (key:name, values: ["name1","name2"], operator: "matches", filterMode: "or")
    "Asset Type"
    asset_type    # Asset Type (key:asset_type, values: ["type1","type2","type3"], operator: "matches", filterMode: "or")
    "Labels"
    labels        # Label (key:labels, values:["label1","label2"], operator: "matches", filterMode: "or")
    "Vendor Name"
    vendor_name   # Vendor (key:vendor_name, values:["vendor1","vendor2"], operator: "matches", filterMode: "or")
  }

  # this is used to restrict the set of asset_types values that are allowed in a filter
  "Defines the list of Software assets types that can be used in filtering."
  enum SoftwareAssetTypes {
    "Software"
    software
    "Application Software"
    application_software
    "Operating System"
    operating_system
  }

  union SoftwareKind = SoftwareAsset | ApplicationSoftwareAsset | OperatingSystemAsset
