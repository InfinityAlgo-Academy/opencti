  extend type Query {
    asset(id: ID!): Asset
    assetList(
      first: Int
      offset: Int
      orderedBy: AssetsOrdering
      orderMode: OrderingMode
      filters: [AssetsFiltering]
      filterMode: FilterMode
      search: String
    ): AssetConnection
    assetLocation(id: ID!): AssetLocation
    assetLocationList(
      first: Int
      offset: Int
      orderedBy: AssetLocationsOrdering
      orderMode: OrderingMode
      filters: [AssetLocationsFiltering]
      filterMode: FilterMode
      search: String
    ): AssetLocationConnection 
    itAsset(id: ID!): ItAsset
    itAssetList(
      first: Int
      offset: Int
      orderedBy: ItAssetsOrdering
      orderMode: OrderingMode
      filters: [ItAssetsFiltering]
      filterMode: FilterMode
      search: String
    ): ItAssetConnection
    hardware(id: ID!): HardwareAsset
    hardwareList(
      first: Int
      offset: Int
      orderedBy: HardwareAssetsOrdering
      orderMode: OrderingMode
      filters: [HardwareAssetsFiltering]
      filterMode: FilterMode
      search: String
    ): HardwareAssetConnection
  }

  extend type Mutation {
    deleteAsset(id:ID!): ID
    deleteAssets(ids:[ID]!): [ID]
    createAssetLocation(input: AssetLocationAddInput): AssetLocation
    deleteAssetLocation(id: ID!): String!
    editAssetLocation(id: ID!, input: [EditInput]!, commitMessage: String): AssetLocation
  }

  # ENUMERATIONS
  "Defines the types of assets."
  enum AssetType {
    "Account"
    account
    "Appliance"
    appliance
    "Application Software"
    application_software
    "Circuit"
    circuit
    "Computer Account"
    computer_account
    "Computing Device"
    computing_device
    "Data"
    data
    "Database"
    database
    "Directory Server"
    directory_server
    "DNS Server"
    dns_server
    "Email Server"
    email_server
    "Embedded Device"
    embedded
    "Firewall"
    firewall
    "Guidance"
    guidance
    "Hypervisor"
    hypervisor
    "Load Balancer"
    load_balancer
    "Network"
    network
    "Network Device"
    network_device
    "Operating System"
    operating_system
    "PBX"
    pbx
    "Physical Device"
    physical_device
    "Plan"
    plan
    "Policy"
    policy
    "Printer"
    printer
    "Procedure"
    procedure
    "Router"
    router
    "Server"
    server
    "Service Account"
    service_account
    "Service"
    service
    "Software"
    software
    "Standard"
    standard
    "Storage Array"
    storage_array
    "Network Switch"
    switch
    "System"
    system
    "User Account"
    user_account
    "Validation"
    validation
    "VoIP Device"
    voip_device
    "VoIP Handset"
    voip_handset
    "VoIP Router"
    voip_router
    "Web Server"
    web_server
    "Web Site"
    web_site
    "Workstation"
    workstation
  }

  "Defines network protocols"
  enum NetworkAssetProtocol {
      TCP
      UDP
      ICMP
      TLS
      SSL
      DHCP
      DNS
      HTTP
      HTTPS
      NFS
      POP3
      SMTP
      SNMP
      FTP
      NTP
      IRC
      Telnet
      SSH
      TFTP
      IMAP
      ARP
      NetBIOS
      SOAP
      IP
      IPSEC
      IPX
      NAT
      OSPF
      RDP
      RIP
      RPC
      SPX
      SMB
      SOCKS
  }

#####  AssetLocation 
##
  type AssetLocation implements BasicObject & LifecycleObject & CoreObject & CyioLocation {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # LifecycleObject
    created: Timestamp
    modified: Timestamp
    # CoreObject
    labels: [CyioLabel]
    external_references: [CyioExternalReference]
    notes: [CyioNote]
    #CyioLocation
    name: String!
    description: String
    # AssetLocation
    street_address: String
    city: String
    administrative_area: String
    country: String
    postal_code: PostalCode
  }
  
  input AssetLocationAddInput {
    # AssetLocation
    name: String!
    description: String
    street_address: String
    city: String
    administrative_area: String
    country: String
    postal_code: PostalCode
  }

# Pagination Types
  type AssetLocationConnection {
    pageInfo: PageInfo!
    edges: [AssetLocationEdge]
  }
  type AssetLocationEdge {
    cursor: String!
    node: AssetLocation!
  }
  # Filtering Types
  input AssetLocationsFiltering {
    key: AssetLocationsFilter!
    values: [String]!
    operator: String
    filterMode: FilterMode
  }
  enum AssetLocationsOrdering {
    "Creted"
    created
    "Modified"
    modified
    "Label"
    labels
    "City"
    city
    "Adminstrative Area"
    administrative_area
    "Country"
    country
    "Postal Code"
    postal_code
  }
  enum AssetLocationsFilter {
    "Created"
    created
    "Modified"
    modified
    "Label"
    label_name
    "City"
    city
    "Administrative Area"
    administrative_area
    "County"
    country
    "Postal Code"
    postal_code
  }

#####  Asset 
##
  "An abstract interface that defines identifying information about an asset in it generic form as something of value."
  interface Asset {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # CoreObject
    created: Timestamp
    modified: Timestamp
    labels: [CyioLabel]
    # Asset
    asset_id: String
    name: String!
    description: String
    locations: [AssetLocation]
    external_references: [CyioExternalReference]
    notes: [CyioNote]
  }

  # Pagination Types
  type AssetConnection {
    pageInfo: PageInfo!
    edges: [AssetEdge]
  }
  type AssetEdge {
    cursor: String!
    node: Asset!
  }
  # Filtering Types
  input AssetsFiltering {
    key: AssetsFilter!
    values: [String]!
    operator: String
    filterMode: FilterMode
  }
  enum AssetsOrdering {
    "Created"
    created
    "Modified"
    modified
    "Label"
    labels
    "Location"
    locations
    "Asset ID"
    asset_id
    "Name"
    name
  }
  enum AssetsFilter {
    "Created"
    created
    "Modified"
    modified
    "Label"
    label_name
    "Location"
    location_name
    "Asset ID"
    asset_id
  }

#####  ItAsset
##
  "An abstract interface that defines identifying information about an asset that is technology-based, such as hardware, software, and networking."
  interface ItAsset {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # CoreObject
    created: Timestamp
    modified: Timestamp
    labels: [CyioLabel]
    # Asset
    asset_id: String
    name: String!
    description: String
    locations: [AssetLocation]
    external_references: [CyioExternalReference]
    notes: [CyioNote]
    # ItAsset
    asset_tag: String
    asset_type: AssetType!
    serial_number: String
    vendor_name: String
    version: String
    release_date: Timestamp
    implementation_point: ImplementationPoint
    operational_status: OperationalStatus
    # responsible_parties: [ResponsibleParty]
  }

  # Pagination Types
  type ItAssetConnection {
    pageInfo: PageInfo!
    edges: [ItAssetEdge]
  }
  type ItAssetEdge {
    cursor: String!
    node: ItAsset!
  }
  # Filtering Types
  input ItAssetsFiltering {
    key: ItAssetsFilter!
    values: [String]!
    operator: String
    filterMode: FilterMode
  }
  enum ItAssetsOrdering {
    "Created"
    created
    "Modified"
    modified
    "Label"
    labels
    "Location"
    locations
    "Asset ID"
    asset_id
    "Name"
    name
    "Asset Tag"
    asset_tag
    "Asset Type"
    asset_type
    "Vendor Name"
    vendor_name
    "Version"
    version
    "Release Date"
    release_date
    "Implementation Point"
    implementation_point
    "Operational Status"
    operational_status
  }
  enum ItAssetsFilter {
    "Created"
    created
    "Modified"
    modified
    "Label"
    label_name
    "Location"
    location_name
    "Asset ID"
    asset_id
    "Asset Tag"
    asset_tag
    "Asset Type"
    asset_type
    "Vendor Name"
    vendor_name
    "Version"
    version
    "Release Date"
    release_date
    "Implementation Point"
    implementation_point
    "Operational Status"
    operational_status
  }


#####  HardwareAsset
##
  interface HardwareAsset {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # CoreObject
    created: Timestamp
    modified: Timestamp
    labels: [CyioLabel]
    # Asset
    asset_id: String
    name: String!
    description: String
    locations: [AssetLocation]
    external_references: [CyioExternalReference]
    notes: [CyioNote]
    # ItAsset
    asset_tag: String
    asset_type: AssetType!
    serial_number: String
    vendor_name: String
    version: String
    release_date: Timestamp
    implementation_point: ImplementationPoint
    operational_status: OperationalStatus
    # responsible_parties: [ResponsibleParty]
    # HardwareAsset
    cpe_identifier: String
    installation_id: String
    installed_hardware: [ComputingDeviceAsset]
    installed_operating_system: OperatingSystemAsset
    model: String
    motherboard_id: String
    baseline_configuration_name: String
    function: String
  }

  # Pagination Types
  type HardwareAssetConnection {
    pageInfo: PageInfo!
    edges: [HardwareAssetEdge]
  }
  type HardwareAssetEdge {
    cursor: String!
    node: HardwareAsset!
  }
  # Filtering Types
  input HardwareAssetsFiltering {
    key: HardwareAssetsFilter!
    values: [String]!
    operator: String
    filterMode: FilterMode
  }
  enum HardwareAssetsOrdering {
    "Created"
    created
    "Modified"
    modified
    "Label"
    labels
    "Location"
    locations
    "Asset ID"
    asset_id
    "Name"
    name
    "Asset Tag"
    asset_tag
    "Asset Type"
    asset_type
    "Vendor"
    vendor_name
    "Version"
    version
    "Release Date"
    release_date
    "Implementation Point"
    implementation_point
    "Operational Status"
    operational_status
    "CPE Identifier"
    cpe_identifier
    "Installation ID"
    installation_id
    "Model"
    model
    "Baseline Configuration"
    baseline_configuration_name
  }
  enum HardwareAssetsFilter {
    "Created"
    created
    "Modified"
    modified
    "Label"
    label_name
    "Location"
    location_name
    "Asset ID"
    asset_id
    "Name"
    name
    "Asset Tag"
    asset_tag
    "Asset Type"
    asset_type
    "Vendor"
    vendor_name
    "Version"
    version
    "Release Date"
    release_date
    "Implementation Point"
    implementation_point
    "Operational Status"
    operational_status
    "CPE Identifier"
    cpe_identifier
    "Installation ID"
    installation_id
    "Model"
    model
    "Baseline Configuration"
    baseline_configuration_name
  }

  type IpAddressRange {
      starting_ip_address: IpAddress!
      ending_ip_address: IpAddress!
  }

  input IpV4AddressRangeAddInput {
      starting_ip_address: IpV4AddressAddInput!
      ending_ip_address: IpV4AddressAddInput!
  }

  input IpV6AddressRangeAddInput {
      starting_ip_address: IpV6AddressAddInput!
      ending_ip_address: IpV6AddressAddInput!
  }

  union IpAddress = IpV4Address | IpV6Address

  type IpV4Address implements BasicObject {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # IpV4Address
    ip_address_value: IPv4!
  }

  type IpV6Address implements BasicObject {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # IpV6Address
    ip_address_value: IPv6!
  }

  input IpV4AddressAddInput {
      # IpV4Address
      ip_address_value: IPv4!
  } 

  input IpV6AddressAddInput {
      # IpV6Address
      ip_address_value: IPv6!
  }

  type MACAddress implements BasicObject {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # MAC Address
    mac_address_value: MAC!
    is_virtual: Boolean
  }

  input MACAddressAddInput {
    mac_address_value: MAC!
    is_virtual: Boolean!
  }

  "Defines identifying information about a network port."
  type PortInfo {
      port_number: Port
      protocols: [NetworkAssetProtocol]
  }

  input PortInfoAddInput {
      port_number: Port!
      protocols: [NetworkAssetProtocol]
  }

  type StartEndPortRange {
    starting_port: Port
    ending_port: Port
    protocols: [NetworkAssetProtocol]
  }
  
  union PortRange = PortInfo | StartEndPortRange

  union AssetKind = ComputerAccountAsset | ServiceAssetAccountAsset | UserAccountAsset
    | CircuitAsset
    | ComputingDeviceAsset | ServerAsset | WorkstationAsset 
    | DatabaseAsset
    | PhysicalDeviceAsset
    | GuidanceAsset | PlanAsset | PolicyAsset |ProcedureAsset | StandardAsset | ValidationAsset
    | NetworkAsset
    | NetworkDeviceAsset | ApplianceAsset | FirewallAsset | RouterAsset | StorageArrayAsset | SwitchAsset | VoIPHandsetAsset | VoIPRouterAsset
    | ServiceAsset
    | SoftwareAsset | ApplicationSoftwareAsset | OperatingSystemAsset
    | SystemAsset | DirectoryServerAsset | DnsServerAsset | EmailServerAsset | WebServerAsset
    | WebsiteAsset

  union ItAssetKind = ComputingDeviceAsset | ServerAsset | WorkstationAsset 
    | ComputerAccountAsset | ServiceAssetAccountAsset | UserAccountAsset
    | CircuitAsset
    | DatabaseAsset
    | PhysicalDeviceAsset
    | NetworkAsset
    | NetworkDeviceAsset | ApplianceAsset | FirewallAsset | RouterAsset | StorageArrayAsset | SwitchAsset | VoIPHandsetAsset | VoIPRouterAsset
    | ServiceAsset
    | SoftwareAsset | ApplicationSoftwareAsset | OperatingSystemAsset
    | SystemAsset | DirectoryServerAsset | DnsServerAsset | EmailServerAsset | WebServerAsset
    | WebsiteAsset

  union HardwareKind = PhysicalDeviceAsset 
    | ComputingDeviceAsset | ServerAsset | WorkstationAsset 
    | NetworkDeviceAsset | ApplianceAsset | FirewallAsset | RouterAsset | StorageArrayAsset | SwitchAsset | VoIPHandsetAsset | VoIPRouterAsset
