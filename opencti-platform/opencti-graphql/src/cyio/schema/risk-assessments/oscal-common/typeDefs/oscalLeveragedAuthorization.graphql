# declares the query entry-points for this type
extend type Query {
  # OSCAL User
  leveragedAuthorization(id: ID!): OscalLeveragedAuthorization  @hasPermission(resources:"SystemSecurityPlan:view")
  leveragedAuthorizations(
    first: Int
    offset: Int
    orderedBy: OscalLeveragedAuthorizationOrdering
    orderMode: OrderingMode
    filters: [OscalLeveragedAuthorizationFiltering]
    filterMode: FilterMode
    search: String
  ): OscalLeveragedAuthorizationConnection  @hasPermission(resources:"SystemSecurityPlan:view")
}

extend type Mutation {
  # OSCAL User
  createLeveragedAuthorization(input: OscalLeveragedAuthorizationAddInput): OscalLeveragedAuthorization  @hasPermission(resources:"SystemSecurityPlan:update")
  deleteLeveragedAuthorization(id: ID!): String!  @hasPermission(resources:"SystemSecurityPlan:delete")
  deleteLeveragedAuthorizations(ids: [ID!]!): [ID] @hasPermission(resources: "SystemSecurityPlan:delete")
  editLeveragedAuthorization(id: ID!, input: [EditInput]!, commitMessage: String): OscalLeveragedAuthorization  @hasPermission(resources:"SystemSecurityPlan:update")
  #
  attachToLeveragedAuthorization(id: ID!, field: String!, entityId: ID!): Boolean @hasPermission(resources: "SystemSecurityPlan:update")
  detachFromLeveragedAuthorization(id: ID!, field: String!, entityId: ID!): Boolean @hasPermission(resources: "SystemSecurityPlan:update")
}


##### OSCAL Leverage Authorization
##
"""
Defines identify information about another authorized system from which this 
system inherits capabilities that satisfy security requirements. Another term 
for this concept is a common control provider.
"""
type OscalLeveragedAuthorization implements BasicObject & LifecycleObject & OscalObject {
  # BasicObject
  "Uniquely identifies this object."
  id: ID!
  "Identifies the identifier defined by the standard."
  standard_id: String!
  "Identifies the type of the Object."
  entity_type: String!
  "Identifies the parent types of this object."
  parent_types: [String]!
  # LifecycleObject
  "Indicates the date and time at which the object was originally created."
  created: Timestamp
  "Indicates the date and time that this particular version of the object was last modified."
  modified: Timestamp
  "Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined."
  labels: [CyioLabel]
  # OscalObject
  "Identifies a list of CyioExternalReferences, each of which refers to information external to the data model. This property is used to provide one or more URLs, descriptions, or IDs to records in other systems."
  links: [CyioExternalReference]
  "Identifies one or more references to additional commentary on the Model."
  remarks: [CyioNote]
  "Identifies one or more relationships to other entities."
  relationships(
    first: Int
    offset: Int
    orderedBy: OscalRelationshipsOrdering
    orderMode: OrderingMode
    filters: [OscalRelationshipsFiltering]
    filterMode: FilterMode
    search: String
  ): OscalRelationshipConnection
  "Identifies one or more attributes, characteristics, or qualities of the containing object expressed as a namespace qualified name/value pair. The value of a property is a simple scalar value, which may be expressed as a list of values."
  props: [Property]
  # LeveragedAuthorization
  "Identifies a human readable name for the leveraged authorization in the context of the system."
  title: String!
  "Identifies a reference to the party that manages the leveraged system."
  party: OscalParty!
  "Identifies the date the system received its authorization."
  date_authorized: Date!
}
input OscalLeveragedAuthorizationInput {
  "Identifies a human readable name for the leveraged authorization in the context of the system."
  title: String!
  "Identifies a reference to the party that manages the leveraged system."
  party: ID!
  "Identifies the date the system received its authorization."
  date_authorized: Date!
}
# Ordering
enum OscalLeveragedAuthorizationOrdering {
  "Created"
  created
  "Modified"
  modified
  "Label"
  label_name
  "Name"
  name
}
# Filtering Types
enum OscalLeveragedAuthorizationFilter {
  "Created"
  created
  "Modified"
  modified
  "Name"
  name
}
input OscalLeveragedAuthorizationFiltering {
  key: OscalLeveragedAuthorizationFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}
# Pagination Types
type OscalLeveragedAuthorizationConnection {
  pageInfo: PageInfo!
  edges: [OscalLeveragedAuthorizationEdge]
}
type OscalLeveragedAuthorizationEdge {
  cursor: String!
  node: OscalLeveragedAuthorization!
}

