# declares the query entry-points for this type
extend type Query {
  descriptionBlock(id: ID!): DescriptionBlock @hasPermission(resources:"Asset:view")
  descriptionBlocks(
    first: Int
    offset: Int
    orderedBy: DescriptionBlockOrdering
    orderMode: OrderingMode
    filters: [DescriptionBlockFiltering]
    filterMode: FilterMode
    search: String
  ): DescriptionBlockConnection @hasPermission(resources: "Asset:view")

  # Diagram Ref
  diagramRef(id: ID!): DiagramRef @hasPermission(resources:"Asset:view")
  diagramRefs(
    first: Int
    offset: Int
    orderedBy: DiagramRefOrdering
    orderMode: OrderingMode
    filters: [DiagramRefFiltering]
    filterMode: FilterMode
    search: String
  ): DiagramRefConnection @hasPermission(resources: "Asset:view")
}

extend type Mutation {
  createDescriptionBlock(input: DescriptionBlockInput!): DescriptionBlock @hasPermission(resources: "Asset:update")
  deleteDescriptionBlock(id: ID!): ID @hasPermission(resources: "Asset:delete")
  deleteDescriptionBlocks(ids: [ID!]!): [ID] @hasPermission(resources: "Asset:delete")
  editDescriptionBlock(id: ID!, input: [EditInput]!, commitMessage: String): DescriptionBlock @hasPermission(resources: "Asset:update")
  #
  attachToDescriptionBlock(id: ID!, field: String!, entityId: ID!): Boolean @hasPermission(resources: "Asset:update")
  detachFromDescriptionBlock(id: ID!, field: String!, entityId: ID!): Boolean @hasPermission(resources: "Asset:update")

  #
  # Diagram Ref
  createDiagramRef(input: DiagramRefInput!): DiagramRef @hasPermission(resources: "Asset:update")
  deleteDiagramRef(id: ID!): ID @hasPermission(resources: "Asset:delete")
  deleteDiagramRefs(ids: [ID!]!): [ID] @hasPermission(resources: "Asset:delete")
  editDiagramRef(id: ID!, input: [EditInput]!, commitMessage: String): DiagramRef @hasPermission(resources: "Asset:update")
}


## -------- DescriptionBlock
type DescriptionBlock implements BasicObject & LifecycleObject {
  # BasicObject
  "Uniquely identifies this object."
  id: ID!
  "Identifies the identifier defined by the standard."
  standard_id: String!
  "Identifies the type of the Object."
  entity_type: String!
  "Identifies the parent types of this object."
  parent_types: [String]!
  # LifecycleObject
  "Identities the date and time at which the object was originally created."
  created: Timestamp
  "Identifies the date and time at which the object was last modified."
  modified: Timestamp
  "Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined."
  labels: [CyioLabel]
  # OscalObject
  "Identifies a list of CyioExternalReferences, each of which refers to information external to the data model. This property is used to provide one or more URLs, descriptions, or IDs to records in other systems."
  links: [CyioExternalReference]
  "Identifies one or more references to additional commentary on the Model."
  remarks: [CyioNote]
  "Identifies one or more relationships to other entities."
  relationships(
    first: Int
    offset: Int
    orderedBy: OscalRelationshipsOrdering
    orderMode: OrderingMode
    filters: [OscalRelationshipsFiltering]
    filterMode: FilterMode
    search: String
  ): OscalRelationshipConnection
  "Identifies a  label or descriptor that is tied to a sensitivity or classification marking system."
  object_markings: [DataMarking]
  # DescriptionBlock
  "Identifies a summary of the system's authorization boundary, network architecture, or data flow."
  description: String!
  "Identifies one or more graphics that provides a visual representation the system, or some aspect of it."
  diagrams: [DiagramRef]
}
input DescriptionBlockInput {
  "Identifies a summary of the system's authorization boundary, network architecture, or data flow."
  description: String!
  "Identifies one or more graphics that provides a visual representation the system, or some aspect of it."
  diagrams: [DiagramRefInput]
}
# Description Block Connection
type DescriptionBlockConnection {
  pageInfo: PageInfo!
  edges: [DescriptionBlockEdge]
}
type DescriptionBlockEdge {
  cursor: String,
  node: DescriptionBlock!
}
# slicing types
"Defines the list of fields that can be used to order by for an Information System"
enum DescriptionBlockOrdering {
    "Created"
    created
    "Modified"
    modified
    "Name"
    name
    "Label"
    label_name
}
# Filtering types
input DescriptionBlockFiltering {
  key: DescriptionBlockFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}
"Defines the list of fields that can be filtered upon for Information System."
enum DescriptionBlockFilter {
    "Created"
    created
    "Modified"
    modified
    "Label"
    label_name
}
## --------


## -------- Diagram
type DiagramRef implements BasicObject & LifecycleObject & OscalObject {
  # BasicObject
  "Uniquely identifies this object."
  id: ID!
  "Identifies the identifier defined by the standard."
  standard_id: String!
  "Identifies the type of the Object."
  entity_type: String!
  "Identifies the parent types of this object."
  parent_types: [String]!
  # LifecycleObject
  "Identities the date and time at which the object was originally created."
  created: Timestamp
  "Identifies the date and time at which the object was last modified."
  modified: Timestamp
  "Identifies a set of terms used to describe this object. The terms are user-defined or trust-group defined."
  labels: [CyioLabel]
  # OscalObject
  "Identifies a list of CyioExternalReferences, each of which refers to information external to the data model. This property is used to provide one or more URLs, descriptions, or IDs to records in other systems."
  links: [CyioExternalReference]
  "Identifies one or more references to additional commentary on the Model."
  remarks: [CyioNote]
  "Identifies one or more relationships to other entities."
  relationships(
    first: Int
    offset: Int
    orderedBy: OscalRelationshipsOrdering
    orderMode: OrderingMode
    filters: [OscalRelationshipsFiltering]
    filterMode: FilterMode
    search: String
  ): OscalRelationshipConnection
  # Diagram
  "Identifies one or more attributes, characteristics, or qualities of the containing object expressed as a namespace qualified name/value pair. The value of a property is a simple scalar value, which may be expressed as a list of values."
  props: [Property]
  "Identifies a summary of the diagram."
  description: String
  "Identifies a brief caption to annotate the diagram."
  caption: String
  "Identifies one or more links to a diagram"
  diagram_link: URL!
  "Identifies the media type of the diagram"
  diagram_media_type: String
}
input DiagramRefInput {
  "Identifies a summary of the diagram."
  description: String!
  "Identifies a brief caption to annotate the diagram."
  caption: String
  "Identifies one or more links to a diagram"
  diagram_link: URL!
  "Identifies the media type of the diagram"
  diagram_media_type: String
  "Identifies a list of CyioExternalReferences, each of which refers to information external to the data model. This property is used to provide one or more URLs, descriptions, or IDs to records in other systems."
  links: [CyioExternalReferenceAddInput]
}
# Diagram Connection
type DiagramRefConnection {
  pageInfo: PageInfo!
  edges: [DiagramRefEdge]
}
type DiagramRefEdge {
  cursor: String,
  node: DiagramRef!
}
# slicing types
"Defines the list of fields that can be used to order by for an Information System"
enum DiagramRefOrdering {
    "Created"
    created
    "Modified"
    modified
    "Caption"
    caption
    "Label"
    label_name
}
# Filtering types
input DiagramRefFiltering {
  key: DiagramRefFilter!
  values: [String]!
  operator: String
  filterMode: FilterMode
}
"Defines the list of fields that can be filtered upon for Information System."
enum DiagramRefFilter {
    "Created"
    created
    "Modified"
    modified
    "Caption"
    caption
    "Label"
    label_name
}
## --------

