  # declares the query entry-points for this type
  extend type Query {
    cyioNote(id: ID!): CyioNote
    cyioNoteList( 
      first: Int
      offset: Int
      orderedBy: CyioNotesOrdering
      orderMode: OrderingMode
      filters: [CyioNotesFiltering]
      filterMode: FilterMode
      search: String
    ): CyioNoteConnection
    cyioExternalReference(id: ID!): CyioExternalReference
    cyioExternalReferenceList(
      limit: Int
      offset: Int
      orderedBy: CyioExternalReferencesOrdering
      orderMode: OrderingMode
      filters: [CyioExternalReferencesFiltering]
      filterMode: FilterMode
    ): CyioExternalReferenceConnection
    cyioLabel(id: ID!): CyioLabel
    cyioLabels(
      limit: Int
      offset: Int
      orderBy: CyioLabelsOrdering
      orderMode: OrderingMode
      filters: [CyioLabelsFiltering]
      filterMode: FilterMode
      search: String
    ): CyioLabelConnection
  }

  # declares the mutation entry-points for this type
  extend type Mutation {
    addReference(input: ReferenceAddInput): Boolean
    removeReference( input: ReferenceAddInput): Boolean
    createCyioNote(input: CyioNoteAddInput): CyioNote
    deleteCyioNote(id: ID!): String!
    editCyioNote(id: ID!, input: [EditInput]!, commitMessage: String): CyioNote
    createCyioExternalReference(input: CyioExternalReferenceAddInput): CyioExternalReference
    deleteCyioExternalReference(id: ID!): String!
    editCyioExternalReference(id: ID!, input: [EditInput]!, commitMessage: String): CyioExternalReference
    createCyioLabel(input: CyioLabelAddInput): CyioLabel
    deleteCyioLabel(id: ID!): String!
    editCyioLabel(id: ID!, input: [EditInput]!, commitMessage: String): CyioLabel
  }

  "Identifies the identifying information about a lifecycle object"
  interface LifecycleObject {
    "Identities the date and time at which the object was originally created."
    created: Timestamp
    "Identifies the date and time at which the object was last modified."
    modified: Timestamp
  }

  "Defines the identifying information about a Core object"
  interface CoreObject {
    labels: [String]
    external_references( first: Int ): CyioExternalReferenceConnection
    notes( first: Int ): CyioNoteConnection
  }

  "Reference input to add a reference between two different objects"
  input ReferenceAddInput {
    field_name: String!  # this is the name of the field
    from_id: ID!
    to_id: ID!
  }

  ############## CyioExternalReferences
  enum CyioExternalReferencesOrdering {
    "Source Name"
    source_name
    "URL"
    url
    "Hash"
    hash
    "External ID"
    external_id
    "Created"
    created
    "Modified"
    modified
  }
  enum CyioExternalReferencesFilter {
    "URL"
    url
    "Source Name"
    source_name
    "External ID"
    external_id
  }
  input CyioExternalReferencesFiltering {
    key: CyioExternalReferencesFilter!
    values: [String]
    operator: String
    filterMode: FilterMode
  }

  # Pagination Types
  type CyioExternalReferenceConnection {
    pageInfo: PageInfo!
    edges: [CyioExternalReferenceEdge]
  }
  type CyioExternalReferenceEdge {
    cursor: String!
    node: CyioExternalReference!
  }

  type CyioExternalReference implements BasicObject & LifecycleObject {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # LifecycleObject
    "Identities the date and time at which the object was originally created."
    created: Timestamp
    "Identifies the date and time at which the object was last modified."
    modified: Timestamp
    # CyioExternalReference
    source_name: String
    description: String
    url: URL
    hashes: [HashInfo]
    external_id: String
    # OSCAL Link
    reference_purpose: ReferencePurposeType
    media_type: String
  }

  input CyioExternalReferenceAddInput {
    source_name: String!
    description: String
    url: URL
    hashes: [HashInfoAddInput]
    external_id: String
    # OSCAL Link
    reference_purpose: ReferencePurposeType
    media_type: String
  }

  type HashInfo {
    algorithm: HashAlgorithm!
    value: String!
  }

  input HashInfoAddInput {
    algorithm: HashAlgorithm!
    value: String!
  }

  enum ReferencePurposeType {
    "Identifies a reference to an external resource."
    reference
    "Identifies the authoritative location for this file."
    canonical
    "Identifies an alternative location or format for this file."
    alternative
  }

  enum HashAlgorithm {
    "The SHA-224 algorithm as defined by NIST FIPS 180-4."
    SHA_224
    "The SHA-256 algorithm as defined by NIST FIPS 180-4."
    SHA_256
    "The SHA-384 algorithm as defined by NIST FIPS 180-4."
    SHA_384
    "The SHA-512 algorithm as defined by NIST FIPS 180-4."
    SHA_512
    "The SHA3-224 algorithm as defined by NIST FIPS 202."
    SHA3_224
    "The SHA3-256 algorithm as defined by NIST FIPS 202."
    SHA3_256
    "The SHA3-384 algorithm as defined by NIST FIPS 202."
    SHA3_384
    "The SHA3-512 algorithm as defined by NIST FIPS 202."
    SHA3_512
  }

############## Labels
  type CyioLabel implements BasicObject & LifecycleObject {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # Lifecycle Object
    "Identities the date and time at which the object was originally created."
    created: Timestamp
    "Identifies the date and time at which the object was last modified."
    modified: Timestamp
    # Cyio Label
    "Identifies the text value of the label."
    name: String!
    "Identifies the color to be applied to the label."
    color: String
    "Identifies a human-readable description of the meaning of the label"
    description: String
  }

  input CyioLabelAddInput {
    name: String!
    color: String
    description: String
  }

  enum CyioLabelsOrdering {
    "Name"
    name
    "Color"
    color
    "Created"
    created
    "Modified"
    modified
  }

  enum CyioLabelsFilter {
    "Name"
    name
  }
  input CyioLabelsFiltering {
    key: LabelsFilter!
    values: [String]
    operator: String
    filterMode: FilterMode
  }
  type CyioLabelConnection {
    pageInfo: PageInfo!
    edges: [CyioLabelEdge]
  }
  type CyioLabelEdge {
    cursor: String!
    node: CyioLabel!
  }


  type CyioNote implements BasicObject & LifecycleObject {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # Lifecycle
    created: Timestamp
    modified: Timestamp
    labels: [String]
    # CyioNote
    abstract: String
    content: String!
    authors: [String]
  }

  input CyioNoteAddInput {
    # CyioNote
    abstract: String
    content: String!
    authors: [String]
  }

  enum CyioNotesOrdering {
    "Created"
    created
    "Modified"
    modified
    "Labels"
    labels
  }

  enum CyioNotesFilter {
    "Abstract"
    abstract
    "Authors"
    authors
    "Created"
    created
    "Modified"
    modified
    "Labels"
    labels
  }

  input CyioNotesFiltering {
    key: CyioNotesFilter!
    values: [String]!
    operator: String
    filterMode: FilterMode
  }

  # Pagination Types
  type CyioNoteConnection {
    pageInfo: PageInfo!
    edges: [CyioNoteEdge]
  }

  type CyioNoteEdge {
    cursor: String!
    node: CyioNote!
  }

  interface CyioLocation {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # CoreObject
    created: Timestamp
    modified: Timestamp
    labels: [String]
    external_references( first: Int ): CyioExternalReferenceConnection
    notes( first: Int ): CyioNoteConnection
    # CyioLocation
    name: String!
    description: String
  }
  
  input CyioLocationAddInput {
    labels: [String]
    # CyioLocation
    location_type: CyioLocationType
    name: String!
    description: String
  }

  interface CyioIdentity {
    # BasicObject
    "Uniquely identifies this object."
    id: ID!
    "Identifies the identifier defined by the standard."
    standard_id: String!
    "Identifies the type of the Object."
    entity_type: String!
    "Identifies the parent types of this object."
    parent_types: [String]!
    # CoreObject
    created: Timestamp
    modified: Timestamp
    labels: [String]
    external_references( first: Int ): CyioExternalReferenceConnection
    notes( first: Int ): CyioNoteConnection
    # CyioIdentity
    name: String!
    description: String
  }

  enum CyioLocationType {
    "GeoLocation"
    geo_location
    "City"
    city
    "Country"
    country
    "Region"
    region
    "Civic Address"
    civic_address
  }

  "Defines the set of Region names"
  enum RegionName {
    "Africa"
    africa
    "Eastern Africa"
    eastern_africa
    "Middle Africa"
    middle_africa
    "Nothern Africa"
    northern_africa
    "Southern Africa"
    southern_africa
    "Western Africa"
    western_africa
    "Americas"
    americas
    "Caribbean"
    caribbean
    "Central America"
    central_america
    "Latin America-Caribbean"
    latin_america_caribbean
    "Northern America"
    northern_america
    "South Amercia"
    south_america
    "Asia"
    asia
    "Central Asia"
    central_asia
    "Eastern Asia"
    eastern_asia
    "Southern Asia"
    southern_asia
    "South Eastern Asia"
    south_eastern_asia
    "Western Asia"
    western_asia
    "Europe"
    europe
    "Eastern Europe"
    eastern_europe
    "Northern Europe"
    northern_europe
    "Southern Europe"
    southern_europe
    "Western Europe"
    western_europe
    "Oceania"
    oceania
    "Antarctica"
    antarctica
    "Australia-New Zealand"
    australia_new_zealand
    "Melanesia"
    melanesia
    "Micronesia"
    micronesia
    "Polynesia"
    polynesia
  }


  type PageInfo {
    startCursor: String!
    endCursor: String!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    globalCount: Int!
  }
  
  enum OrderingMode {
    asc
    desc
  }

  enum FilterMode {
    and
    or
  }

  enum EditOperation {
    add
    replace
    remove
  }

  # Editing
  input EditInput {
    key: String!              # Field name to change
    value: [String]!          # Values to apply
    operation: EditOperation  # Undefined = REPLACE
  }

  enum OperationalStatus {
    "operational"
    operational
    "under development"
    under_development
    "under major modification"
    under_major_modification
    "disposition"
    disposition
    "other"
    other
  }

  enum ImplementationPoint {
    "internal"
    internal
    "external"
    external
  }

  type CivicAddress {
    address_type: UsageType
    street_address: String
    city: String
    administrative_area: String
    country: String
    postal_code: PostalCode
  }

  input CivicAddressAddInput {
    address_type: UsageType
    street_address: String
    city: String
    administrative_area: String
    country: String
    postal_code: PostalCode
  }

  enum UsageType {
    "home"
    home
    "office"
    office
    "mobile"
    mobile
  }

  type TelephoneNumber {
    usage_type: UsageType
    phone_number: PhoneNumber
  }

  input TelephoneNumberAddInput {
    usage_type: UsageType
    phone_number: PhoneNumber
  }

  type ContactInfo {
    email_addresses: [EmailAddress]
    telephone_numbers: [TelephoneNumber]
  }
