@Library('utils@dev') _

node {
  try {
    stage('Checkout') {
      gitInfo = checkout scm
      notify.notifyBuild('STARTED');
    }

    String app = 'graphql'
    String version = 'undefined'
    def gitInfo

    dir('opencti-platform/opencti-graphql') {
      stage('Setup') {
        // Jenkins project setup
        utils.setCommonBuildStepsAndProperties(true, false) // conccurancy: true; cancelPreviousBuild: false
 
        // Set the version - update:DD-685
        def    json       = readJSON(file: 'package.json')
        def    mmp        = json['version'].split('\\.')
        String properties = [major:mmp[0], minor:mmp[1], patch:mmp[2]].collect{entry->entry.key+"="+entry.value}.join('\n')
        writeFile(file: "version.properties", text: properties)
        utils.getAndSetBuildVersion()                 //reads version.properties
        version    = env.COMMON_BUILD_VERSION         //from utils.getAndSetBuildVersion
        json['version'] = version
        writeJSON(file: "package.json", json: json)   //update package.json with semver
        echo "Version: ${version}"
       
        // Install app dependencies
        docker.image('node:16-alpine').inside {
          sh 'yarn install'
        }
      }

      // stage('Test') {
      //   docker.image('node:16-alpine').inside {
      //     sh 'yarn test'
      //   }
      // }

      stage('Build') {
        utils.buildDockerImage(name: app, version: version)
      }

      stage('Upload & Archive') {
        parallel upload: {
          utils.pushDockerImage(name: app, version: version)
        }, archive: {
          utils.archiveDockerImage(name: app, version: version)
        }
      }
    }
  } catch (Exception e) {
    currentBuild.result = "FAILED"
		throw e
  } finally {
    notify.notifyBuild(currentBuild.result);
  }
}
